
h755_vl53l5cx_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000157ec  0800edfc  0800edfc  0001edfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080245e8  080245e8  00040134  2**0
                  CONTENTS
  4 .ARM          00000008  080245e8  080245e8  000345e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080245f0  080245f0  00040134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080245f0  080245f0  000345f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080245f4  080245f4  000345f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080245f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  0802466c  00040074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  080246cc  000400d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001210  24000134  0802472c  00040134  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24001344  0802472c  00041344  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040134  2**0
                  CONTENTS, READONLY
 14 .debug_info   000306e4  00000000  00000000  00040162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000470c  00000000  00000000  00070846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001598  00000000  00000000  00074f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001458  00000000  00000000  000764f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c971  00000000  00000000  00077948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e383  00000000  00000000  000b42b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001873d8  00000000  00000000  000d263c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00259a14  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f80  00000000  00000000  00259a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ede4 	.word	0x0800ede4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800ede4 	.word	0x0800ede4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <HAL_I2C_MemRxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	6018      	str	r0, [r3, #0]
	if (vl53l5cx_reading_check_data_ready_async(&vl53l5cx))
 80007c8:	4820      	ldr	r0, [pc, #128]	; (800084c <HAL_I2C_MemRxCpltCallback+0x90>)
 80007ca:	f002 fb26 	bl	8002e1a <vl53l5cx_reading_check_data_ready_async>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d014      	beq.n	80007fe <HAL_I2C_MemRxCpltCallback+0x42>
	{
		uint8_t ready = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
		vl53l5cx_finish_check_data_ready_async(&vl53l5cx, &ready);
 80007da:	f207 5357 	addw	r3, r7, #1367	; 0x557
 80007de:	4619      	mov	r1, r3
 80007e0:	481a      	ldr	r0, [pc, #104]	; (800084c <HAL_I2C_MemRxCpltCallback+0x90>)
 80007e2:	f002 fb2c 	bl	8002e3e <vl53l5cx_finish_check_data_ready_async>
		if (ready)
 80007e6:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d003      	beq.n	80007f6 <HAL_I2C_MemRxCpltCallback+0x3a>
		{
			vl53l5cx_start_get_ranging_data_async(&vl53l5cx);
 80007ee:	4817      	ldr	r0, [pc, #92]	; (800084c <HAL_I2C_MemRxCpltCallback+0x90>)
 80007f0:	f002 fb60 	bl	8002eb4 <vl53l5cx_start_get_ranging_data_async>
		static char buf[32];
		sprintf(buf, "distance: %i\n", data.distance_mm[28]);
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) buf, strlen(buf));
		vl53l5cx_start_check_data_ready_async(&vl53l5cx);
	}
}
 80007f4:	e025      	b.n	8000842 <HAL_I2C_MemRxCpltCallback+0x86>
			vl53l5cx_start_check_data_ready_async(&vl53l5cx);
 80007f6:	4815      	ldr	r0, [pc, #84]	; (800084c <HAL_I2C_MemRxCpltCallback+0x90>)
 80007f8:	f002 fae9 	bl	8002dce <vl53l5cx_start_check_data_ready_async>
}
 80007fc:	e021      	b.n	8000842 <HAL_I2C_MemRxCpltCallback+0x86>
	else if (vl53l5cx_reading_get_ranging_data_async(&vl53l5cx))
 80007fe:	4813      	ldr	r0, [pc, #76]	; (800084c <HAL_I2C_MemRxCpltCallback+0x90>)
 8000800:	f002 fb7f 	bl	8002f02 <vl53l5cx_reading_get_ranging_data_async>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d01b      	beq.n	8000842 <HAL_I2C_MemRxCpltCallback+0x86>
		vl53l5cx_finish_get_ranging_data_async(&vl53l5cx, &data);
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	480e      	ldr	r0, [pc, #56]	; (800084c <HAL_I2C_MemRxCpltCallback+0x90>)
 8000812:	f002 fb89 	bl	8002f28 <vl53l5cx_finish_get_ranging_data_async>
		sprintf(buf, "distance: %i\n", data.distance_mm[28]);
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	f9b3 33f8 	ldrsh.w	r3, [r3, #1016]	; 0x3f8
 800081e:	461a      	mov	r2, r3
 8000820:	490b      	ldr	r1, [pc, #44]	; (8000850 <HAL_I2C_MemRxCpltCallback+0x94>)
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <HAL_I2C_MemRxCpltCallback+0x98>)
 8000824:	f00d febe 	bl	800e5a4 <siprintf>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) buf, strlen(buf));
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <HAL_I2C_MemRxCpltCallback+0x98>)
 800082a:	f7ff fd59 	bl	80002e0 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29b      	uxth	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	4907      	ldr	r1, [pc, #28]	; (8000854 <HAL_I2C_MemRxCpltCallback+0x98>)
 8000836:	4808      	ldr	r0, [pc, #32]	; (8000858 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000838:	f00b fd5e 	bl	800c2f8 <HAL_UART_Transmit_DMA>
		vl53l5cx_start_check_data_ready_async(&vl53l5cx);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <HAL_I2C_MemRxCpltCallback+0x90>)
 800083e:	f002 fac6 	bl	8002dce <vl53l5cx_start_check_data_ready_async>
}
 8000842:	bf00      	nop
 8000844:	f507 67ab 	add.w	r7, r7, #1368	; 0x558
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	24000750 	.word	0x24000750
 8000850:	0800edfc 	.word	0x0800edfc
 8000854:	24000150 	.word	0x24000150
 8000858:	2400017c 	.word	0x2400017c

0800085c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000866:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000868:	bf00      	nop
 800086a:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <main+0xfc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d004      	beq.n	8000880 <main+0x24>
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	60fa      	str	r2, [r7, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	dcf4      	bgt.n	800086a <main+0xe>
		;
	if (timeout < 0)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da01      	bge.n	800088a <main+0x2e>
	{
		Error_Handler();
 8000886:	f000 fac3 	bl	8000e10 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800088a:	f002 fcff 	bl	800328c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800088e:	f000 f869 	bl	8000964 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000892:	4b31      	ldr	r3, [pc, #196]	; (8000958 <main+0xfc>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <main+0xfc>)
 800089a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <main+0xfc>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f006 faf9 	bl	8006ea8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2000      	movs	r0, #0
 80008ba:	f006 fb0f 	bl	8006edc <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80008be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c2:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80008c4:	bf00      	nop
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <main+0xfc>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d104      	bne.n	80008dc <main+0x80>
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	60fa      	str	r2, [r7, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dcf4      	bgt.n	80008c6 <main+0x6a>
		;
	if (timeout < 0)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	da01      	bge.n	80008e6 <main+0x8a>
	{
		Error_Handler();
 80008e2:	f000 fa95 	bl	8000e10 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008e6:	f000 f9fd 	bl	8000ce4 <MX_GPIO_Init>
	MX_DMA_Init();
 80008ea:	f000 f9cb 	bl	8000c84 <MX_DMA_Init>
	MX_ETH_Init();
 80008ee:	f000 f8b9 	bl	8000a64 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80008f2:	f000 f949 	bl	8000b88 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80008f6:	f000 f993 	bl	8000c20 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 80008fa:	f000 f905 	bl	8000b08 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	vl53l5cx.platform.hi2c = &hi2c1;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <main+0x100>)
 8000900:	4a17      	ldr	r2, [pc, #92]	; (8000960 <main+0x104>)
 8000902:	605a      	str	r2, [r3, #4]
	vl53l5cx.platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <main+0x100>)
 8000906:	2252      	movs	r2, #82	; 0x52
 8000908:	801a      	strh	r2, [r3, #0]

	uint8_t is_alive = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	72fb      	strb	r3, [r7, #11]
	vl53l5cx_is_alive(&vl53l5cx, &is_alive);
 800090e:	f107 030b 	add.w	r3, r7, #11
 8000912:	4619      	mov	r1, r3
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <main+0x100>)
 8000916:	f001 f9f1 	bl	8001cfc <vl53l5cx_is_alive>
	if (!is_alive)
 800091a:	7afb      	ldrb	r3, [r7, #11]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <main+0xc8>
	{
		return 1;
 8000920:	2301      	movs	r3, #1
 8000922:	e015      	b.n	8000950 <main+0xf4>
	}
	vl53l5cx_init(&vl53l5cx);
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <main+0x100>)
 8000926:	f001 fa33 	bl	8001d90 <vl53l5cx_init>
	vl53l5cx_set_ranging_frequency_hz(&vl53l5cx, 5);
 800092a:	2105      	movs	r1, #5
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <main+0x100>)
 800092e:	f002 f880 	bl	8002a32 <vl53l5cx_set_ranging_frequency_hz>
	vl53l5cx_set_resolution(&vl53l5cx, VL53L5CX_RESOLUTION_8X8);
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <main+0x100>)
 8000936:	f001 ffa8 	bl	800288a <vl53l5cx_set_resolution>
	vl53l5cx_set_ranging_mode(&vl53l5cx, VL53L5CX_RANGING_MODE_CONTINUOUS);
 800093a:	2101      	movs	r1, #1
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <main+0x100>)
 800093e:	f002 f899 	bl	8002a74 <vl53l5cx_set_ranging_mode>
	vl53l5cx_start_ranging(&vl53l5cx);
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <main+0x100>)
 8000944:	f001 fe20 	bl	8002588 <vl53l5cx_start_ranging>

	vl53l5cx_start_check_data_ready_async(&vl53l5cx);
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <main+0x100>)
 800094a:	f002 fa40 	bl	8002dce <vl53l5cx_start_check_data_ready_async>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800094e:	e7fe      	b.n	800094e <main+0xf2>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58024400 	.word	0x58024400
 800095c:	24000750 	.word	0x24000750
 8000960:	24000284 	.word	0x24000284

08000964 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09c      	sub	sp, #112	; 0x70
 8000968:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	224c      	movs	r2, #76	; 0x4c
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00d fe0e 	bl	800e594 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2220      	movs	r2, #32
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00d fe08 	bl	800e594 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000984:	2004      	movs	r0, #4
 8000986:	f009 f8e3 	bl	8009b50 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <SystemClock_Config+0xf8>)
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	4a32      	ldr	r2, [pc, #200]	; (8000a5c <SystemClock_Config+0xf8>)
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	62d3      	str	r3, [r2, #44]	; 0x2c
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <SystemClock_Config+0xf8>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <SystemClock_Config+0xfc>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ac:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <SystemClock_Config+0xfc>)
 80009ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <SystemClock_Config+0xfc>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80009c0:	bf00      	nop
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <SystemClock_Config+0xfc>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ce:	d1f8      	bne.n	80009c2 <SystemClock_Config+0x5e>
	{
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80009d0:	2303      	movs	r3, #3
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009da:	2301      	movs	r3, #1
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 80009ee:	2318      	movs	r3, #24
 80009f0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f6:	2304      	movs	r3, #4
 80009f8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009fe:	230c      	movs	r3, #12
 8000a00:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f009 f908 	bl	8009c24 <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xba>
	{
		Error_Handler();
 8000a1a:	f000 f9f9 	bl	8000e10 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a1e:	233f      	movs	r3, #63	; 0x3f
 8000a20:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f009 fd1a 	bl	800a47c <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xee>
	{
		Error_Handler();
 8000a4e:	f000 f9df 	bl	8000e10 <Error_Handler>
	}
}
 8000a52:	bf00      	nop
 8000a54:	3770      	adds	r7, #112	; 0x70
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	58024800 	.word	0x58024800

08000a64 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_ETH_Init+0x90>)
 8000a6a:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <MX_ETH_Init+0x94>)
 8000a6c:	601a      	str	r2, [r3, #0]
	heth.Init.MACAddr[0] = 0x00;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_ETH_Init+0x90>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ETH_Init+0x90>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_ETH_Init+0x90>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	3302      	adds	r3, #2
 8000a86:	22e1      	movs	r2, #225	; 0xe1
 8000a88:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ETH_Init+0x90>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	3303      	adds	r3, #3
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ETH_Init+0x90>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_ETH_Init+0x90>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	3305      	adds	r3, #5
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_ETH_Init+0x90>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ETH_Init+0x90>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_ETH_Init+0x98>)
 8000ab2:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_ETH_Init+0x90>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_ETH_Init+0x9c>)
 8000ab8:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_ETH_Init+0x90>)
 8000abc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ac0:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <MX_ETH_Init+0x90>)
 8000ac4:	f005 fc10 	bl	80062e8 <HAL_ETH_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ETH_Init+0x6e>
	{
		Error_Handler();
 8000ace:	f000 f99f 	bl	8000e10 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000ad2:	2234      	movs	r2, #52	; 0x34
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480b      	ldr	r0, [pc, #44]	; (8000b04 <MX_ETH_Init+0xa0>)
 8000ad8:	f00d fd5c 	bl	800e594 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_ETH_Init+0xa0>)
 8000ade:	2221      	movs	r2, #33	; 0x21
 8000ae0:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_ETH_Init+0xa0>)
 8000ae4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ae8:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_ETH_Init+0xa0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	24001274 	.word	0x24001274
 8000af8:	40028000 	.word	0x40028000
 8000afc:	240000d4 	.word	0x240000d4
 8000b00:	24000074 	.word	0x24000074
 8000b04:	240012fc 	.word	0x240012fc

08000b08 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <MX_I2C1_Init+0x78>)
 8000b10:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10707DBC;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <MX_I2C1_Init+0x7c>)
 8000b16:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b44:	f006 f9de 	bl	8006f04 <HAL_I2C_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000b4e:	f000 f95f 	bl	8000e10 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b56:	f008 fe1b 	bl	8009790 <HAL_I2CEx_ConfigAnalogFilter>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000b60:	f000 f956 	bl	8000e10 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_I2C1_Init+0x74>)
 8000b68:	f008 fe5d 	bl	8009826 <HAL_I2CEx_ConfigDigitalFilter>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000b72:	f000 f94d 	bl	8000e10 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24000284 	.word	0x24000284
 8000b80:	40005400 	.word	0x40005400
 8000b84:	10707dbc 	.word	0x10707dbc

08000b88 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_USART3_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bd2:	f00b fb41 	bl	800c258 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8000bdc:	f000 f918 	bl	8000e10 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000be4:	f00d f8cf 	bl	800dd86 <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8000bee:	f000 f90f 	bl	8000e10 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bf6:	f00d f904 	bl	800de02 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8000c00:	f000 f906 	bl	8000e10 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000c06:	f00d f885 	bl	800dd14 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8000c10:	f000 f8fe 	bl	8000e10 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2400017c 	.word	0x2400017c
 8000c1c:	40004800 	.word	0x40004800

08000c20 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c26:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c28:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c2c:	2209      	movs	r2, #9
 8000c2e:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c32:	2202      	movs	r2, #2
 8000c34:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c68:	f008 fe29 	bl	80098be <HAL_PCD_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USB_OTG_FS_PCD_Init+0x56>
	{
		Error_Handler();
 8000c72:	f000 f8cd 	bl	8000e10 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	240002d0 	.word	0x240002d0
 8000c80:	40080000 	.word	0x40080000

08000c84 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_DMA_Init+0x5c>)
 8000c8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_DMA_Init+0x5c>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_DMA_Init+0x5c>)
 8000c9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	200b      	movs	r0, #11
 8000cae:	f002 fc9e 	bl	80035ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cb2:	200b      	movs	r0, #11
 8000cb4:	f002 fcb5 	bl	8003622 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	200c      	movs	r0, #12
 8000cbe:	f002 fc96 	bl	80035ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cc2:	200c      	movs	r0, #12
 8000cc4:	f002 fcad 	bl	8003622 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	200d      	movs	r0, #13
 8000cce:	f002 fc8e 	bl	80035ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cd2:	200d      	movs	r0, #13
 8000cd4:	f002 fca5 	bl	8003622 <HAL_NVIC_EnableIRQ>

}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a40      	ldr	r2, [pc, #256]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	4a31      	ldr	r2, [pc, #196]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2102      	movs	r1, #2
 8000db2:	4815      	ldr	r0, [pc, #84]	; (8000e08 <MX_GPIO_Init+0x124>)
 8000db4:	f006 f85e 	bl	8006e74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2120      	movs	r1, #32
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <MX_GPIO_Init+0x128>)
 8000dbe:	f006 f859 	bl	8006e74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PWR_EN_C_Pin */
	GPIO_InitStruct.Pin = PWR_EN_C_Pin;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PWR_EN_C_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <MX_GPIO_Init+0x124>)
 8000dda:	f005 fe9b 	bl	8006b14 <HAL_GPIO_Init>

	/*Configure GPIO pin : LPn_C_Pin */
	GPIO_InitStruct.Pin = LPn_C_Pin;
 8000dde:	2320      	movs	r3, #32
 8000de0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LPn_C_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_GPIO_Init+0x128>)
 8000df6:	f005 fe8d 	bl	8006b14 <HAL_GPIO_Init>

}
 8000dfa:	bf00      	nop
 8000dfc:	3730      	adds	r7, #48	; 0x30
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020400 	.word	0x58020400
 8000e0c:	58020c00 	.word	0x58020c00

08000e10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_MspInit+0x30>)
 8000e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e28:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x30>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x30>)
 8000e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	58024400 	.word	0x58024400

08000e50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	; 0x38
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a59      	ldr	r2, [pc, #356]	; (8000fd4 <HAL_ETH_MspInit+0x184>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	f040 80ab 	bne.w	8000fca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e74:	4b58      	ldr	r3, [pc, #352]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e7a:	4a57      	ldr	r2, [pc, #348]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8e:	623b      	str	r3, [r7, #32]
 8000e90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e92:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e98:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea2:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000eb0:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb6:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b42      	ldr	r3, [pc, #264]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ede:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	4a39      	ldr	r2, [pc, #228]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a2a      	ldr	r2, [pc, #168]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f46:	2332      	movs	r3, #50	; 0x32
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f56:	230b      	movs	r3, #11
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <HAL_ETH_MspInit+0x18c>)
 8000f62:	f005 fdd7 	bl	8006b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f66:	2386      	movs	r3, #134	; 0x86
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f76:	230b      	movs	r3, #11
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <HAL_ETH_MspInit+0x190>)
 8000f82:	f005 fdc7 	bl	8006b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f98:	230b      	movs	r3, #11
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <HAL_ETH_MspInit+0x194>)
 8000fa4:	f005 fdb6 	bl	8006b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fa8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fba:	230b      	movs	r3, #11
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <HAL_ETH_MspInit+0x198>)
 8000fc6:	f005 fda5 	bl	8006b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3738      	adds	r7, #56	; 0x38
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40028000 	.word	0x40028000
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020800 	.word	0x58020800
 8000fe0:	58020000 	.word	0x58020000
 8000fe4:	58020400 	.word	0x58020400
 8000fe8:	58021800 	.word	0x58021800

08000fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0b8      	sub	sp, #224	; 0xe0
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	22bc      	movs	r2, #188	; 0xbc
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f00d fac1 	bl	800e594 <memset>
  if(hi2c->Instance==I2C1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5a      	ldr	r2, [pc, #360]	; (8001180 <HAL_I2C_MspInit+0x194>)
 8001018:	4293      	cmp	r3, r2
 800101a:	f040 80ad 	bne.w	8001178 <HAL_I2C_MspInit+0x18c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800101e:	2308      	movs	r3, #8
 8001020:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4618      	mov	r0, r3
 800102e:	f009 fdb1 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001038:	f7ff feea 	bl	8000e10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	4b51      	ldr	r3, [pc, #324]	; (8001184 <HAL_I2C_MspInit+0x198>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	4a50      	ldr	r2, [pc, #320]	; (8001184 <HAL_I2C_MspInit+0x198>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104c:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <HAL_I2C_MspInit+0x198>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800105a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001074:	2304      	movs	r3, #4
 8001076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800107e:	4619      	mov	r1, r3
 8001080:	4841      	ldr	r0, [pc, #260]	; (8001188 <HAL_I2C_MspInit+0x19c>)
 8001082:	f005 fd47 	bl	8006b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001086:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <HAL_I2C_MspInit+0x198>)
 8001088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800108c:	4a3d      	ldr	r2, [pc, #244]	; (8001184 <HAL_I2C_MspInit+0x198>)
 800108e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001092:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_I2C_MspInit+0x198>)
 8001098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010a6:	4a3a      	ldr	r2, [pc, #232]	; (8001190 <HAL_I2C_MspInit+0x1a4>)
 80010a8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010ac:	2221      	movs	r2, #33	; 0x21
 80010ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010d0:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010e2:	482a      	ldr	r0, [pc, #168]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010e4:	f002 fab8 	bl	8003658 <HAL_DMA_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 80010ee:	f7ff fe8f 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a25      	ldr	r2, [pc, #148]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <HAL_I2C_MspInit+0x1a0>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001100:	4a25      	ldr	r2, [pc, #148]	; (8001198 <HAL_I2C_MspInit+0x1ac>)
 8001102:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001106:	2222      	movs	r2, #34	; 0x22
 8001108:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800113c:	4815      	ldr	r0, [pc, #84]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 800113e:	f002 fa8b 	bl	8003658 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8001148:	f7ff fe62 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_I2C_MspInit+0x1a8>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	201f      	movs	r0, #31
 800115e:	f002 fa46 	bl	80035ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001162:	201f      	movs	r0, #31
 8001164:	f002 fa5d 	bl	8003622 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2020      	movs	r0, #32
 800116e:	f002 fa3e 	bl	80035ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001172:	2020      	movs	r0, #32
 8001174:	f002 fa55 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	37e0      	adds	r7, #224	; 0xe0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40005400 	.word	0x40005400
 8001184:	58024400 	.word	0x58024400
 8001188:	58020400 	.word	0x58020400
 800118c:	240011fc 	.word	0x240011fc
 8001190:	40020010 	.word	0x40020010
 8001194:	2400020c 	.word	0x2400020c
 8001198:	40020028 	.word	0x40020028

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0b8      	sub	sp, #224	; 0xe0
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	22bc      	movs	r2, #188	; 0xbc
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f00d f9e9 	bl	800e594 <memset>
  if(huart->Instance==USART3)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a3f      	ldr	r2, [pc, #252]	; (80012c4 <HAL_UART_MspInit+0x128>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d177      	bne.n	80012bc <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 fcda 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011e6:	f7ff fe13 	bl	8000e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ea:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HAL_UART_MspInit+0x12c>)
 80011ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f0:	4a35      	ldr	r2, [pc, #212]	; (80012c8 <HAL_UART_MspInit+0x12c>)
 80011f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <HAL_UART_MspInit+0x12c>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_UART_MspInit+0x12c>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120e:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <HAL_UART_MspInit+0x12c>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_UART_MspInit+0x12c>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800122a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001240:	2307      	movs	r3, #7
 8001242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800124a:	4619      	mov	r1, r3
 800124c:	481f      	ldr	r0, [pc, #124]	; (80012cc <HAL_UART_MspInit+0x130>)
 800124e:	f005 fc61 	bl	8006b14 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_UART_MspInit+0x134>)
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_UART_MspInit+0x134>)
 800125a:	222e      	movs	r2, #46	; 0x2e
 800125c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_UART_MspInit+0x134>)
 8001260:	2240      	movs	r2, #64	; 0x40
 8001262:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_UART_MspInit+0x134>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0x134>)
 800126c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001270:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_UART_MspInit+0x134>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0x134>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_UART_MspInit+0x134>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_UART_MspInit+0x134>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_UART_MspInit+0x134>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001290:	480f      	ldr	r0, [pc, #60]	; (80012d0 <HAL_UART_MspInit+0x134>)
 8001292:	f002 f9e1 	bl	8003658 <HAL_DMA_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 800129c:	f7ff fdb8 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_UART_MspInit+0x134>)
 80012a4:	679a      	str	r2, [r3, #120]	; 0x78
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_UART_MspInit+0x134>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2027      	movs	r0, #39	; 0x27
 80012b2:	f002 f99c 	bl	80035ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012b6:	2027      	movs	r0, #39	; 0x27
 80012b8:	f002 f9b3 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	37e0      	adds	r7, #224	; 0xe0
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40004800 	.word	0x40004800
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58020c00 	.word	0x58020c00
 80012d0:	240006d8 	.word	0x240006d8
 80012d4:	40020040 	.word	0x40020040

080012d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0b8      	sub	sp, #224	; 0xe0
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	22bc      	movs	r2, #188	; 0xbc
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00d f94b 	bl	800e594 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <HAL_PCD_MspInit+0xe8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d156      	bne.n	80013b6 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800130c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800130e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f009 fc3a 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001326:	f7ff fd73 	bl	8000e10 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800132a:	f008 fc6b 	bl	8009c04 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_PCD_MspInit+0xec>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_PCD_MspInit+0xec>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_PCD_MspInit+0xec>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800134c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001350:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001366:	230a      	movs	r3, #10
 8001368:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001370:	4619      	mov	r1, r3
 8001372:	4815      	ldr	r0, [pc, #84]	; (80013c8 <HAL_PCD_MspInit+0xf0>)
 8001374:	f005 fbce 	bl	8006b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <HAL_PCD_MspInit+0xf0>)
 8001394:	f005 fbbe 	bl	8006b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_PCD_MspInit+0xec>)
 800139a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_PCD_MspInit+0xec>)
 80013a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_PCD_MspInit+0xec>)
 80013aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	37e0      	adds	r7, #224	; 0xe0
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40080000 	.word	0x40080000
 80013c4:	58024400 	.word	0x58024400
 80013c8:	58020000 	.word	0x58020000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f001 ffaa 	bl	8003370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA1_Stream0_IRQHandler+0x10>)
 8001426:	f003 fc3f 	bl	8004ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	240011fc 	.word	0x240011fc

08001434 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA1_Stream1_IRQHandler+0x10>)
 800143a:	f003 fc35 	bl	8004ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2400020c 	.word	0x2400020c

08001448 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA1_Stream2_IRQHandler+0x10>)
 800144e:	f003 fc2b 	bl	8004ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	240006d8 	.word	0x240006d8

0800145c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <I2C1_EV_IRQHandler+0x10>)
 8001462:	f006 fa8d 	bl	8007980 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	24000284 	.word	0x24000284

08001470 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <I2C1_ER_IRQHandler+0x10>)
 8001476:	f006 fa9d 	bl	80079b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000284 	.word	0x24000284

08001484 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <USART3_IRQHandler+0x10>)
 800148a:	f00a ffc7 	bl	800c41c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2400017c 	.word	0x2400017c

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f00d f82c 	bl	800e524 <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	24040000 	.word	0x24040000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	24000170 	.word	0x24000170
 8001500:	24001348 	.word	0x24001348

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800153c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001508:	f7ff f8be 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	; (8001544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	; (8001550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001532:	f00c fffd 	bl	800e530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff f991 	bl	800085c <main>
  bx  lr
 800153a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800153c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001540:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001544:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001548:	080245f8 	.word	0x080245f8
  ldr r2, =_sbss
 800154c:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8001550:	24001344 	.word	0x24001344

08001554 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC3_IRQHandler>

08001556 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b088      	sub	sp, #32
 800155a:	af02      	add	r7, sp, #8
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	460b      	mov	r3, r1
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	b29b      	uxth	r3, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8001572:	897b      	ldrh	r3, [r7, #10]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(p_platform->hi2c, p_platform->address, data_write, 2, 100);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6858      	ldr	r0, [r3, #4]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8819      	ldrh	r1, [r3, #0]
 8001580:	f107 0214 	add.w	r2, r7, #20
 8001584:	2364      	movs	r3, #100	; 0x64
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2302      	movs	r3, #2
 800158a:	f005 fd4b 	bl	8007024 <HAL_I2C_Master_Transmit>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(p_platform->hi2c, p_platform->address, data_read, 1, 100);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6858      	ldr	r0, [r3, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8819      	ldrh	r1, [r3, #0]
 800159a:	f107 0210 	add.w	r2, r7, #16
 800159e:	2364      	movs	r3, #100	; 0x64
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	f005 fe32 	bl	800720c <HAL_I2C_Master_Receive>
 80015a8:	4603      	mov	r3, r0
 80015aa:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 80015ac:	7c3a      	ldrb	r2, [r7, #16]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	701a      	strb	r2, [r3, #0]
  
	return status;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(p_platform->hi2c,p_platform->address, data_write, 3, 100);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6858      	ldr	r0, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	8819      	ldrh	r1, [r3, #0]
 80015ec:	f107 020c 	add.w	r2, r7, #12
 80015f0:	2364      	movs	r3, #100	; 0x64
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2303      	movs	r3, #3
 80015f6:	f005 fd15 	bl	8007024 <HAL_I2C_Master_Transmit>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]

	return status;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b08b      	sub	sp, #44	; 0x2c
 800160c:	af04      	add	r7, sp, #16
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	460b      	mov	r3, r1
 8001616:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(p_platform->hi2c, p_platform->address, RegisterAdress,
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6858      	ldr	r0, [r3, #4]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8819      	ldrh	r1, [r3, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	897a      	ldrh	r2, [r7, #10]
 8001626:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800162a:	9402      	str	r4, [sp, #8]
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2302      	movs	r3, #2
 8001634:	f005 fee0 	bl	80073f8 <HAL_I2C_Mem_Write>
 8001638:	4603      	mov	r3, r0
 800163a:	75fb      	strb	r3, [r7, #23]
									I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	return status;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd90      	pop	{r4, r7, pc}

08001646 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8001646:	b590      	push	{r4, r7, lr}
 8001648:	b08b      	sub	sp, #44	; 0x2c
 800164a:	af04      	add	r7, sp, #16
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	460b      	mov	r3, r1
 8001654:	817b      	strh	r3, [r7, #10]

	uint8_t status = HAL_I2C_Mem_Read(p_platform->hi2c, p_platform->address, RegisterAdress, I2C_MEMADD_SIZE_16BIT, p_values, size, 100);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6858      	ldr	r0, [r3, #4]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8819      	ldrh	r1, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	897a      	ldrh	r2, [r7, #10]
 8001664:	2464      	movs	r4, #100	; 0x64
 8001666:	9402      	str	r4, [sp, #8]
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2302      	movs	r3, #2
 8001670:	f005 ffd6 	bl	8007620 <HAL_I2C_Mem_Read>
 8001674:	4603      	mov	r3, r0
 8001676:	75fb      	strb	r3, [r7, #23]
	return status;
 8001678:	7dfb      	ldrb	r3, [r7, #23]
}
 800167a:	4618      	mov	r0, r3
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}

08001682 <RdMultiAsync>:
uint8_t RdMultiAsync(
	VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b088      	sub	sp, #32
 8001686:	af02      	add	r7, sp, #8
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	460b      	mov	r3, r1
 8001690:	817b      	strh	r3, [r7, #10]

	uint8_t status = HAL_I2C_Mem_Read_IT(p_platform->hi2c, p_platform->address, RegisterAdress, I2C_MEMADD_SIZE_16BIT, p_values, size);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6858      	ldr	r0, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8819      	ldrh	r1, [r3, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	897a      	ldrh	r2, [r7, #10]
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2302      	movs	r3, #2
 80016a8:	f006 f8d4 	bl	8007854 <HAL_I2C_Mem_Read_IT>
 80016ac:	4603      	mov	r3, r0
 80016ae:	75fb      	strb	r3, [r7, #23]

	return status;
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <SwapBuffer>:
}

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e021      	b.n	8001710 <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3301      	adds	r3, #1
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	440b      	add	r3, r1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3302      	adds	r3, #2
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	440b      	add	r3, r1
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	3203      	adds	r2, #3
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	440a      	add	r2, r1
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	4313      	orrs	r3, r2
		tmp = (
 80016fe:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4413      	add	r3, r2
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3304      	adds	r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d3d9      	bcc.n	80016cc <SwapBuffer+0x12>
	}
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
               uint32_t TimeMs)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f001 fe3d 	bl	80033b0 <HAL_Delay>
	return 0;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_vl53l5cx_poll_for_answer>:
 * to wait for an answer from VL53L5CX sensor.
 */

static uint8_t _vl53l5cx_poll_for_answer(VL53L5CX_Configuration *p_dev,
		uint8_t size, uint8_t pos, uint16_t address, uint8_t mask,
		uint8_t expected_value) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	70fb      	strb	r3, [r7, #3]
 8001752:	460b      	mov	r3, r1
 8001754:	70bb      	strb	r3, [r7, #2]
 8001756:	4613      	mov	r3, r2
 8001758:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address, p_dev->temp_buffer,
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	8839      	ldrh	r1, [r7, #0]
 800176e:	f7ff ff6a 	bl	8001646 <RdMulti>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	4313      	orrs	r3, r2
 800177a:	73fb      	strb	r3, [r7, #15]
				size);
		status |= WaitMs(&(p_dev->platform), 10);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	210a      	movs	r1, #10
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ffd0 	bl	8001726 <WaitMs>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	4313      	orrs	r3, r2
 800178e:	73fb      	strb	r3, [r7, #15]

		if (timeout >= (uint8_t) 200) /* 2s timeout */
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	2bc7      	cmp	r3, #199	; 0xc7
 8001794:	d906      	bls.n	80017a4 <_vl53l5cx_poll_for_answer+0x64>
		{
			status |= p_dev->temp_buffer[2];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 250a 	ldrb.w	r2, [r3, #1290]	; 0x50a
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	4313      	orrs	r3, r2
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e00f      	b.n	80017c4 <_vl53l5cx_poll_for_answer+0x84>
		} else if ((size >= (uint8_t) 4)
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d909      	bls.n	80017be <_vl53l5cx_poll_for_answer+0x7e>
				&& (p_dev->temp_buffer[2] >= (uint8_t) 0x7f)) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 350a 	ldrb.w	r3, [r3, #1290]	; 0x50a
 80017b0:	2b7e      	cmp	r3, #126	; 0x7e
 80017b2:	d904      	bls.n	80017be <_vl53l5cx_poll_for_answer+0x7e>
			status |= VL53L5CX_MCU_ERROR;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e002      	b.n	80017c4 <_vl53l5cx_poll_for_answer+0x84>
		} else {
			timeout++;
 80017be:	7bbb      	ldrb	r3, [r7, #14]
 80017c0:	3301      	adds	r3, #1
 80017c2:	73bb      	strb	r3, [r7, #14]
		}
	} while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80017c4:	78bb      	ldrb	r3, [r7, #2]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	f893 2508 	ldrb.w	r2, [r3, #1288]	; 0x508
 80017ce:	7e3b      	ldrb	r3, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	7f3a      	ldrb	r2, [r7, #28]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d1c3      	bne.n	8001762 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_vl53l5cx_send_offset_data>:
 * @brief Inner function, not available outside this file. This function is used
 * to set the offset data gathered from NVM.
 */

static uint8_t _vl53l5cx_send_offset_data(VL53L5CX_Configuration *p_dev,
		uint8_t resolution) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0ea      	sub	sp, #424	; 0x1a8
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	6018      	str	r0, [r3, #0]
 80017ee:	460a      	mov	r2, r1
 80017f0:	1cfb      	adds	r3, r7, #3
 80017f2:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = { 0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07 };
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4ab4      	ldr	r2, [pc, #720]	; (8001ad0 <_vl53l5cx_send_offset_data+0x2ec>)
 8001800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001804:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = { 0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4 };
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	4ab1      	ldr	r2, [pc, #708]	; (8001ad4 <_vl53l5cx_send_offset_data+0x2f0>)
 800180e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001812:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void) memcpy(p_dev->temp_buffer, p_dev->offset_data,
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f503 60a1 	add.w	r0, r3, #1288	; 0x508
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3318      	adds	r3, #24
 8001824:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001828:	4619      	mov	r1, r3
 800182a:	f00c fea5 	bl	800e578 <memcpy>
	VL53L5CX_OFFSET_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 offset */
	if (resolution == (uint8_t) VL53L5CX_RESOLUTION_4X4) {
 800182e:	1cfb      	adds	r3, r7, #3
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b10      	cmp	r3, #16
 8001834:	f040 80f7 	bne.w	8001a26 <_vl53l5cx_send_offset_data+0x242>
		(void) memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f503 62a3 	add.w	r2, r3, #1304	; 0x518
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	cb03      	ldmia	r3!, {r0, r1}
 8001846:	6010      	str	r0, [r2, #0]
 8001848:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001852:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff2f 	bl	80016ba <SwapBuffer>
		(void) memcpy(signal_grid, &(p_dev->temp_buffer[0x3C]),
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f203 5144 	addw	r1, r3, #1348	; 0x544
 8001864:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186c:	4618      	mov	r0, r3
 800186e:	f00c fe83 	bl	800e578 <memcpy>
				sizeof(signal_grid));
		(void) memcpy(range_grid, &(p_dev->temp_buffer[0x140]),
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f503 61c9 	add.w	r1, r3, #1608	; 0x648
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	4618      	mov	r0, r3
 8001882:	f00c fe79 	bl	800e578 <memcpy>
				sizeof(range_grid));

		for (j = 0; j < (int8_t) 4; j++) {
 8001886:	2300      	movs	r3, #0
 8001888:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800188c:	e098      	b.n	80019c0 <_vl53l5cx_send_offset_data+0x1dc>
			for (i = 0; i < (int8_t) 4; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001894:	e088      	b.n	80019a8 <_vl53l5cx_send_offset_data+0x1c4>
				signal_grid[i + (4 * j)] = (signal_grid[(2 * i) + (16 * j)
 8001896:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800189a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
						+ (int8_t) 0]
 80018a2:	005a      	lsls	r2, r3, #1
				signal_grid[i + (4 * j)] = (signal_grid[(2 * i) + (16 * j)
 80018a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
						+ signal_grid[(2 * i) + (16 * j) + (int8_t) 1]
 80018ac:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80018b0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018c4:	441a      	add	r2, r3
						+ signal_grid[(2 * i) + (16 * j) + (int8_t) 8]
 80018c6:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80018ca:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	3304      	adds	r3, #4
 80018d4:	0059      	lsls	r1, r3, #1
 80018d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018de:	441a      	add	r2, r3
						+ signal_grid[(2 * i) + (16 * j) + (int8_t) 9])
 80018e0:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80018e4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	f103 0109 	add.w	r1, r3, #9
 80018f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018fa:	4413      	add	r3, r2
				signal_grid[i + (4 * j)] = (signal_grid[(2 * i) + (16 * j)
 80018fc:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001900:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	440a      	add	r2, r1
						/ (uint32_t) 4;
 8001908:	0899      	lsrs	r1, r3, #2
				signal_grid[i + (4 * j)] = (signal_grid[(2 * i) + (16 * j)
 800190a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800190e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i + (4 * j)] = (range_grid[(2 * i) + (16 * j)]
 8001912:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001916:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	005a      	lsls	r2, r3, #1
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001928:	4619      	mov	r1, r3
						+ range_grid[(2 * i) + (16 * j) + 1]
 800192a:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800192e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001942:	440b      	add	r3, r1
						+ range_grid[(2 * i) + (16 * j) + 8]
 8001944:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001948:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800194c:	00d2      	lsls	r2, r2, #3
 800194e:	440a      	add	r2, r1
 8001950:	3204      	adds	r2, #4
 8001952:	0051      	lsls	r1, r2, #1
 8001954:	f107 0218 	add.w	r2, r7, #24
 8001958:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800195c:	4413      	add	r3, r2
						+ range_grid[(2 * i) + (16 * j) + 9]) / (int16_t) 4;
 800195e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001962:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8001966:	00d2      	lsls	r2, r2, #3
 8001968:	440a      	add	r2, r1
 800196a:	0052      	lsls	r2, r2, #1
 800196c:	f102 0109 	add.w	r1, r2, #9
 8001970:	f107 0218 	add.w	r2, r7, #24
 8001974:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001978:	4413      	add	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	da00      	bge.n	8001980 <_vl53l5cx_send_offset_data+0x19c>
 800197e:	3303      	adds	r3, #3
 8001980:	109b      	asrs	r3, r3, #2
 8001982:	4619      	mov	r1, r3
				range_grid[i + (4 * j)] = (range_grid[(2 * i) + (16 * j)]
 8001984:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001988:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	441a      	add	r2, r3
 8001990:	b209      	sxth	r1, r1
 8001992:	f107 0318 	add.w	r3, r7, #24
 8001996:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t) 4; i++) {
 800199a:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80019a8:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	f77f af72 	ble.w	8001896 <_vl53l5cx_send_offset_data+0xb2>
		for (j = 0; j < (int8_t) 4; j++) {
 80019b2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	3301      	adds	r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80019c0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	f77f af62 	ble.w	800188e <_vl53l5cx_send_offset_data+0xaa>
			}
		}
		(void) memset(&range_grid[0x10], 0, (uint16_t) 96);
 80019ca:	f107 0318 	add.w	r3, r7, #24
 80019ce:	3320      	adds	r3, #32
 80019d0:	2260      	movs	r2, #96	; 0x60
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00c fddd 	bl	800e594 <memset>
		(void) memset(&signal_grid[0x10], 0, (uint16_t) 192);
 80019da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019de:	3340      	adds	r3, #64	; 0x40
 80019e0:	22c0      	movs	r2, #192	; 0xc0
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00c fdd5 	bl	800e594 <memset>
		(void) memcpy(&(p_dev->temp_buffer[0x3C]), signal_grid,
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80019f2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80019f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00c fdbc 	bl	800e578 <memcpy>
				sizeof(signal_grid));
		(void) memcpy(&(p_dev->temp_buffer[0x140]), range_grid,
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8001a08:	f107 0118 	add.w	r1, r7, #24
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00c fdb2 	bl	800e578 <memcpy>
				sizeof(range_grid));
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001a1c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe4a 	bl	80016ba <SwapBuffer>
	}

	for (k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t) 4); k++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001a2c:	e015      	b.n	8001a5a <_vl53l5cx_send_offset_data+0x276>
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t) 8];
 8001a2e:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001a32:	f103 0208 	add.w	r2, r3, #8
 8001a36:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001a3a:	1d39      	adds	r1, r7, #4
 8001a3c:	6809      	ldr	r1, [r1, #0]
 8001a3e:	440a      	add	r2, r1
 8001a40:	f892 1508 	ldrb.w	r1, [r2, #1288]	; 0x508
 8001a44:	1d3a      	adds	r2, r7, #4
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	460a      	mov	r2, r1
 8001a4c:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
	for (k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t) 4); k++) {
 8001a50:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001a5a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001a5e:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8001a62:	d3e4      	bcc.n	8001a2e <_vl53l5cx_send_offset_data+0x24a>
	}

	(void) memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	cb03      	ldmia	r3!, {r0, r1}
 8001a72:	6010      	str	r0, [r2, #0]
 8001a74:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8001a82:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8001a86:	f642 6118 	movw	r1, #11800	; 0x2e18
 8001a8a:	f7ff fdbd 	bl	8001608 <WrMulti>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8001a9c:	1d38      	adds	r0, r7, #4
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	23ff      	movs	r3, #255	; 0xff
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2104      	movs	r1, #4
 8001aae:	6800      	ldr	r0, [r0, #0]
 8001ab0:	f7ff fe46 	bl	8001740 <_vl53l5cx_poll_for_answer>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8001abc:	4313      	orrs	r3, r2
 8001abe:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001ac2:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	0800ee0c 	.word	0x0800ee0c
 8001ad4:	0800ee14 	.word	0x0800ee14

08001ad8 <_vl53l5cx_send_xtalk_data>:
 * @brief Inner function, not available outside this file. This function is used
 * to set the Xtalk data from generic configuration, or user's calibration.
 */

static uint8_t _vl53l5cx_send_xtalk_data(VL53L5CX_Configuration *p_dev,
		uint8_t resolution) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0ca      	sub	sp, #296	; 0x128
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	6018      	str	r0, [r3, #0]
 8001ae2:	460a      	mov	r2, r1
 8001ae4:	1cfb      	adds	r3, r7, #3
 8001ae6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = { 0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07 };
 8001aee:	4a80      	ldr	r2, [pc, #512]	; (8001cf0 <_vl53l5cx_send_xtalk_data+0x218>)
 8001af0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001af8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = { 0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08 };
 8001afc:	4a7d      	ldr	r2, [pc, #500]	; (8001cf4 <_vl53l5cx_send_xtalk_data+0x21c>)
 8001afe:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b06:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = { 0xA0, 0xFC, 0x01, 0x00 };
 8001b0a:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <_vl53l5cx_send_xtalk_data+0x220>)
 8001b0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void) memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 60a1 	add.w	r0, r3, #1288	; 0x508
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b20:	f44f 7242 	mov.w	r2, #776	; 0x308
 8001b24:	4619      	mov	r1, r3
 8001b26:	f00c fd27 	bl	800e578 <memcpy>
	VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if (resolution == (uint8_t) VL53L5CX_RESOLUTION_4X4) {
 8001b2a:	1cfb      	adds	r3, r7, #3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	f040 80b0 	bne.w	8001c94 <_vl53l5cx_send_xtalk_data+0x1bc>
		(void) memcpy(&(p_dev->temp_buffer[0x8]), res4x4, sizeof(res4x4));
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001b42:	cb03      	ldmia	r3!, {r0, r1}
 8001b44:	6010      	str	r0, [r2, #0]
 8001b46:	6051      	str	r1, [r2, #4]
		(void) memcpy(&(p_dev->temp_buffer[0x020]), dss_4x4, sizeof(dss_4x4));
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8001b50:	461a      	mov	r2, r3
 8001b52:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001b56:	cb03      	ldmia	r3!, {r0, r1}
 8001b58:	6010      	str	r0, [r2, #0]
 8001b5a:	6051      	str	r1, [r2, #4]

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001b64:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fda6 	bl	80016ba <SwapBuffer>
		(void) memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f203 513c 	addw	r1, r3, #1340	; 0x53c
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00c fcfa 	bl	800e578 <memcpy>
				sizeof(signal_grid));

		for (j = 0; j < (int8_t) 4; j++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001b8a:	e053      	b.n	8001c34 <_vl53l5cx_send_xtalk_data+0x15c>
			for (i = 0; i < (int8_t) 4; i++) {
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8001b92:	e044      	b.n	8001c1e <_vl53l5cx_send_xtalk_data+0x146>
				signal_grid[i + (4 * j)] = (signal_grid[(2 * i) + (16 * j) + 0]
 8001b94:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8001b98:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	005a      	lsls	r2, r3, #1
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
						+ signal_grid[(2 * i) + (16 * j) + 1]
 8001baa:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001bae:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	1c59      	adds	r1, r3, #1
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bc2:	441a      	add	r2, r3
						+ signal_grid[(2 * i) + (16 * j) + 8]
 8001bc4:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001bc8:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	0059      	lsls	r1, r3, #1
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bdc:	441a      	add	r2, r3
						+ signal_grid[(2 * i) + (16 * j) + 9]) / (uint32_t) 4;
 8001bde:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001be2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	f103 0109 	add.w	r1, r3, #9
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bf8:	4413      	add	r3, r2
				signal_grid[i + (4 * j)] = (signal_grid[(2 * i) + (16 * j) + 0]
 8001bfa:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001bfe:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	440a      	add	r2, r1
						+ signal_grid[(2 * i) + (16 * j) + 9]) / (uint32_t) 4;
 8001c06:	0899      	lsrs	r1, r3, #2
				signal_grid[i + (4 * j)] = (signal_grid[(2 * i) + (16 * j) + 0]
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t) 4; i++) {
 8001c10:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8001c1e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	ddb6      	ble.n	8001b94 <_vl53l5cx_send_xtalk_data+0xbc>
		for (j = 0; j < (int8_t) 4; j++) {
 8001c26:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001c34:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	dda7      	ble.n	8001b8c <_vl53l5cx_send_xtalk_data+0xb4>
			}
		}
		(void) memset(&signal_grid[0x10], 0, (uint32_t) 192);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	3340      	adds	r3, #64	; 0x40
 8001c42:	22c0      	movs	r2, #192	; 0xc0
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00c fca4 	bl	800e594 <memset>
		(void) memcpy(&(p_dev->temp_buffer[0x34]), signal_grid,
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8001c54:	f107 0108 	add.w	r1, r7, #8
 8001c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f00c fc8b 	bl	800e578 <memcpy>
				sizeof(signal_grid));
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001c6a:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fd23 	bl	80016ba <SwapBuffer>
		(void) memcpy(&(p_dev->temp_buffer[0x134]), profile_4x4,
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8001c7c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001c80:	601a      	str	r2, [r3, #0]
				sizeof(profile_4x4));
		(void) memset(&(p_dev->temp_buffer[0x078]), 0,
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00c fc80 	bl	800e594 <memset>
				(uint32_t) 4 * sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8, p_dev->temp_buffer,
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8001ca0:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001ca4:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 8001ca8:	f7ff fcae 	bl	8001608 <WrMulti>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8001cba:	1d38      	adds	r0, r7, #4
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	23ff      	movs	r3, #255	; 0xff
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2104      	movs	r1, #4
 8001ccc:	6800      	ldr	r0, [r0, #0]
 8001cce:	f7ff fd37 	bl	8001740 <_vl53l5cx_poll_for_answer>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001ce0:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	0800ee1c 	.word	0x0800ee1c
 8001cf4:	0800ee24 	.word	0x0800ee24
 8001cf8:	0001fca0 	.word	0x0001fca0

08001cfc <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(VL53L5CX_Configuration *p_dev, uint8_t *p_is_alive) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fc52 	bl	80015bc <WrByte>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f107 020e 	add.w	r2, r7, #14
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fc13 	bl	8001556 <RdByte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f107 020d 	add.w	r2, r7, #13
 8001d40:	2101      	movs	r1, #1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fc07 	bl	8001556 <RdByte>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fc2e 	bl	80015bc <WrByte>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	73fb      	strb	r3, [r7, #15]

	if ((device_id == (uint8_t) 0xF0) && (revision_id == (uint8_t) 0x02)) {
 8001d6a:	7bbb      	ldrb	r3, [r7, #14]
 8001d6c:	2bf0      	cmp	r3, #240	; 0xf0
 8001d6e:	d106      	bne.n	8001d7e <vl53l5cx_is_alive+0x82>
 8001d70:	7b7b      	ldrb	r3, [r7, #13]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d103      	bne.n	8001d7e <vl53l5cx_is_alive+0x82>
		*p_is_alive = 1;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e002      	b.n	8001d84 <vl53l5cx_is_alive+0x88>
	} else {
		*p_is_alive = 0;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <vl53l5cx_init>:

uint8_t vl53l5cx_init(VL53L5CX_Configuration *p_dev) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = { VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00 };
 8001d9c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001da0:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8001da2:	2301      	movs	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*) VL53L5CX_DEFAULT_XTALK;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4ae6      	ldr	r2, [pc, #920]	; (8002144 <vl53l5cx_init+0x3b4>)
 8001daa:	615a      	str	r2, [r3, #20]
	p_dev->default_configuration = (uint8_t*) VL53L5CX_DEFAULT_CONFIGURATION;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4ae6      	ldr	r2, [pc, #920]	; (8002148 <vl53l5cx_init+0x3b8>)
 8001db0:	611a      	str	r2, [r3, #16]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fbfe 	bl	80015bc <WrByte>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	2109      	movs	r1, #9
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fbf3 	bl	80015bc <WrByte>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	210f      	movs	r1, #15
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fbe8 	bl	80015bc <WrByte>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	210a      	movs	r1, #10
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fbdd 	bl	80015bc <WrByte>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f107 0216 	add.w	r2, r7, #22
 8001e12:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fb9d 	bl	8001556 <RdByte>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	210c      	movs	r1, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fbc5 	bl	80015bc <WrByte>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f240 1101 	movw	r1, #257	; 0x101
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fbb9 	bl	80015bc <WrByte>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fbad 	bl	80015bc <WrByte>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fba1 	bl	80015bc <WrByte>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f244 0102 	movw	r1, #16386	; 0x4002
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fb95 	bl	80015bc <WrByte>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f244 0102 	movw	r1, #16386	; 0x4002
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fb89 	bl	80015bc <WrByte>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb7d 	bl	80015bc <WrByte>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f240 1103 	movw	r1, #259	; 0x103
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fb71 	bl	80015bc <WrByte>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	210c      	movs	r1, #12
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fb66 	bl	80015bc <WrByte>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2243      	movs	r2, #67	; 0x43
 8001efe:	210f      	movs	r1, #15
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb5b 	bl	80015bc <WrByte>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2101      	movs	r1, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fc06 	bl	8001726 <WaitMs>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	210f      	movs	r1, #15
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fb46 	bl	80015bc <WrByte>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	210a      	movs	r1, #10
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fb3b 	bl	80015bc <WrByte>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2164      	movs	r1, #100	; 0x64
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fbe6 	bl	8001726 <WaitMs>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fb25 	bl	80015bc <WrByte>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	23ff      	movs	r3, #255	; 0xff
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2306      	movs	r3, #6
 8001f86:	2200      	movs	r2, #0
 8001f88:	2101      	movs	r1, #1
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fbd8 	bl	8001740 <_vl53l5cx_poll_for_answer>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	210e      	movs	r1, #14
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fb0b 	bl	80015bc <WrByte>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff faff 	bl	80015bc <WrByte>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	220d      	movs	r2, #13
 8001fcc:	2103      	movs	r1, #3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff faf4 	bl	80015bc <WrByte>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fae8 	bl	80015bc <WrByte>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2321      	movs	r3, #33	; 0x21
 8002000:	2200      	movs	r2, #0
 8002002:	2101      	movs	r1, #1
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fb9b 	bl	8001740 <_vl53l5cx_poll_for_answer>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	4313      	orrs	r3, r2
 8002012:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff facd 	bl	80015bc <WrByte>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	4313      	orrs	r3, r2
 800202a:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	210c      	movs	r1, #12
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fac2 	bl	80015bc <WrByte>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	4313      	orrs	r3, r2
 8002040:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fab6 	bl	80015bc <WrByte>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	4313      	orrs	r3, r2
 8002058:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f240 1101 	movw	r1, #257	; 0x101
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff faaa 	bl	80015bc <WrByte>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	4313      	orrs	r3, r2
 8002070:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 7181 	mov.w	r1, #258	; 0x102
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fa9e 	bl	80015bc <WrByte>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	4313      	orrs	r3, r2
 8002088:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fa92 	bl	80015bc <WrByte>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	4313      	orrs	r3, r2
 80020a0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f244 0102 	movw	r1, #16386	; 0x4002
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fa86 	bl	80015bc <WrByte>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f244 0102 	movw	r1, #16386	; 0x4002
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fa7a 	bl	80015bc <WrByte>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2203      	movs	r2, #3
 80020d6:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fa6e 	bl	80015bc <WrByte>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f240 1103 	movw	r1, #259	; 0x103
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fa62 	bl	80015bc <WrByte>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	4313      	orrs	r3, r2
 8002100:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f244 010f 	movw	r1, #16399	; 0x400f
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fa56 	bl	80015bc <WrByte>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	4313      	orrs	r3, r2
 8002118:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2243      	movs	r2, #67	; 0x43
 800211e:	f240 211a 	movw	r1, #538	; 0x21a
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fa4a 	bl	80015bc <WrByte>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	4313      	orrs	r3, r2
 8002130:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	f240 211a 	movw	r1, #538	; 0x21a
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fa3e 	bl	80015bc <WrByte>
 8002140:	e004      	b.n	800214c <vl53l5cx_init+0x3bc>
 8002142:	bf00      	nop
 8002144:	08024254 	.word	0x08024254
 8002148:	08023e88 	.word	0x08023e88
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	4313      	orrs	r3, r2
 8002154:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f240 211a 	movw	r1, #538	; 0x21a
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fa2c 	bl	80015bc <WrByte>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	4313      	orrs	r3, r2
 800216c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f240 211a 	movw	r1, #538	; 0x21a
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fa20 	bl	80015bc <WrByte>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	4313      	orrs	r3, r2
 8002184:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f240 2119 	movw	r1, #537	; 0x219
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fa14 	bl	80015bc <WrByte>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	4313      	orrs	r3, r2
 800219c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f240 211b 	movw	r1, #539	; 0x21b
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fa08 	bl	80015bc <WrByte>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f9fc 	bl	80015bc <WrByte>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	210c      	movs	r1, #12
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff f9f1 	bl	80015bc <WrByte>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f9e5 	bl	80015bc <WrByte>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2207      	movs	r2, #7
 8002200:	2120      	movs	r1, #32
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f9da 	bl	80015bc <WrByte>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	4313      	orrs	r3, r2
 8002210:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2206      	movs	r2, #6
 8002216:	2120      	movs	r1, #32
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f9cf 	bl	80015bc <WrByte>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	4313      	orrs	r3, r2
 8002226:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2209      	movs	r2, #9
 800222c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff f9c3 	bl	80015bc <WrByte>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	4313      	orrs	r3, r2
 800223e:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform), 0, (uint8_t*) &VL53L5CX_FIRMWARE[0],
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002246:	4acb      	ldr	r2, [pc, #812]	; (8002574 <vl53l5cx_init+0x7e4>)
 8002248:	2100      	movs	r1, #0
 800224a:	f7ff f9dd 	bl	8001608 <WrMulti>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	7dfb      	ldrb	r3, [r7, #23]
 8002254:	4313      	orrs	r3, r2
 8002256:	75fb      	strb	r3, [r7, #23]
			0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	220a      	movs	r2, #10
 800225c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f9ab 	bl	80015bc <WrByte>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	4313      	orrs	r3, r2
 800226e:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform), 0,
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002276:	4ac0      	ldr	r2, [pc, #768]	; (8002578 <vl53l5cx_init+0x7e8>)
 8002278:	2100      	movs	r1, #0
 800227a:	f7ff f9c5 	bl	8001608 <WrMulti>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	4313      	orrs	r3, r2
 8002286:	75fb      	strb	r3, [r7, #23]
			(uint8_t*) &VL53L5CX_FIRMWARE[0x8000], 0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	220b      	movs	r2, #11
 800228c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f993 	bl	80015bc <WrByte>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	4313      	orrs	r3, r2
 800229e:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform), 0,
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80022a6:	4ab5      	ldr	r2, [pc, #724]	; (800257c <vl53l5cx_init+0x7ec>)
 80022a8:	2100      	movs	r1, #0
 80022aa:	f7ff f9ad 	bl	8001608 <WrMulti>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	75fb      	strb	r3, [r7, #23]
			(uint8_t*) &VL53L5CX_FIRMWARE[0x10000], 0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff f97b 	bl	80015bc <WrByte>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff f96f 	bl	80015bc <WrByte>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	220d      	movs	r2, #13
 80022ec:	2103      	movs	r1, #3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f964 	bl	80015bc <WrByte>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f958 	bl	80015bc <WrByte>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	4313      	orrs	r3, r2
 8002314:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002316:	2310      	movs	r3, #16
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	2310      	movs	r3, #16
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2321      	movs	r3, #33	; 0x21
 8002320:	2200      	movs	r2, #0
 8002322:	2101      	movs	r1, #1
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff fa0b 	bl	8001740 <_vl53l5cx_poll_for_answer>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	4313      	orrs	r3, r2
 8002332:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f93d 	bl	80015bc <WrByte>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	4313      	orrs	r3, r2
 800234a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	210c      	movs	r1, #12
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f932 	bl	80015bc <WrByte>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	4313      	orrs	r3, r2
 8002360:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f926 	bl	80015bc <WrByte>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	4313      	orrs	r3, r2
 8002378:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f91a 	bl	80015bc <WrByte>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	4313      	orrs	r3, r2
 8002390:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f240 1115 	movw	r1, #277	; 0x115
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f90e 	bl	80015bc <WrByte>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2242      	movs	r2, #66	; 0x42
 80023ae:	f44f 718b 	mov.w	r1, #278	; 0x116
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f902 	bl	80015bc <WrByte>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	4313      	orrs	r3, r2
 80023c0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f240 1117 	movw	r1, #279	; 0x117
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f8f6 	bl	80015bc <WrByte>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	210b      	movs	r1, #11
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff f8eb 	bl	80015bc <WrByte>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	210c      	movs	r1, #12
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f8e0 	bl	80015bc <WrByte>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	4313      	orrs	r3, r2
 8002404:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	210b      	movs	r1, #11
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f8d5 	bl	80015bc <WrByte>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	7dfb      	ldrb	r3, [r7, #23]
 8002418:	4313      	orrs	r3, r2
 800241a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 0x00);
 800241c:	2300      	movs	r3, #0
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	23ff      	movs	r3, #255	; 0xff
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2306      	movs	r3, #6
 8002426:	2200      	movs	r2, #0
 8002428:	2101      	movs	r1, #1
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff f988 	bl	8001740 <_vl53l5cx_poll_for_answer>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	4313      	orrs	r3, r2
 8002438:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f8ba 	bl	80015bc <WrByte>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	4313      	orrs	r3, r2
 8002450:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	2328      	movs	r3, #40	; 0x28
 8002456:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <vl53l5cx_init+0x7f0>)
 8002458:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 800245c:	f7ff f8d4 	bl	8001608 <WrMulti>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	4313      	orrs	r3, r2
 8002468:	75fb      	strb	r3, [r7, #23]
			(uint8_t*) VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 800246a:	2302      	movs	r3, #2
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	23ff      	movs	r3, #255	; 0xff
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002476:	2200      	movs	r2, #0
 8002478:	2104      	movs	r1, #4
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff f960 	bl	8001740 <_vl53l5cx_poll_for_answer>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	4313      	orrs	r3, r2
 8002488:	75fb      	strb	r3, [r7, #23]
	VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800248a:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002492:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8002496:	f642 4104 	movw	r1, #11268	; 0x2c04
 800249a:	f7ff f8d4 	bl	8001646 <RdMulti>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	75fb      	strb	r3, [r7, #23]
	(void) memcpy(p_dev->offset_data, p_dev->temp_buffer,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f103 0018 	add.w	r0, r3, #24
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80024b4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80024b8:	4619      	mov	r1, r3
 80024ba:	f00c f85d 	bl	800e578 <memcpy>
	VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 80024be:	2110      	movs	r1, #16
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff f98f 	bl	80017e4 <_vl53l5cx_send_offset_data>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void) memcpy(p_dev->xtalk_data, (uint8_t*) VL53L5CX_DEFAULT_XTALK,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024d6:	4a2b      	ldr	r2, [pc, #172]	; (8002584 <vl53l5cx_init+0x7f4>)
 80024d8:	4618      	mov	r0, r3
 80024da:	4611      	mov	r1, r2
 80024dc:	f44f 7342 	mov.w	r3, #776	; 0x308
 80024e0:	461a      	mov	r2, r3
 80024e2:	f00c f849 	bl	800e578 <memcpy>
	VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 80024e6:	2110      	movs	r1, #16
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff faf5 	bl	8001ad8 <_vl53l5cx_send_xtalk_data>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34, p_dev->default_configuration,
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8002502:	f642 4134 	movw	r1, #11316	; 0x2c34
 8002506:	f7ff f87f 	bl	8001608 <WrMulti>
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	4313      	orrs	r3, r2
 8002512:	75fb      	strb	r3, [r7, #23]
			sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002514:	2303      	movs	r3, #3
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	23ff      	movs	r3, #255	; 0xff
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002520:	2201      	movs	r2, #1
 8002522:	2104      	movs	r1, #4
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff f90b 	bl	8001740 <_vl53l5cx_poll_for_answer>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	4313      	orrs	r3, r2
 8002532:	75fb      	strb	r3, [r7, #23]
	VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*) &pipe_ctrl,
 8002534:	f107 0110 	add.w	r1, r7, #16
 8002538:	2304      	movs	r3, #4
 800253a:	f64c 7278 	movw	r2, #53112	; 0xcf78
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fb7a 	bl	8002c38 <vl53l5cx_dci_write_data>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	4313      	orrs	r3, r2
 800254c:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*) &single_range,
 800254e:	f107 010c 	add.w	r1, r7, #12
 8002552:	2304      	movs	r3, #4
 8002554:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fb6d 	bl	8002c38 <vl53l5cx_dci_write_data>
 800255e:	4603      	mov	r3, r0
 8002560:	461a      	mov	r2, r3
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	4313      	orrs	r3, r2
 8002566:	75fb      	strb	r3, [r7, #23]
	VL53L5CX_DCI_SINGLE_RANGE, (uint16_t) sizeof(single_range));

	return status;
 8002568:	7dfb      	ldrb	r3, [r7, #23]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	0800ee88 	.word	0x0800ee88
 8002578:	08016e88 	.word	0x08016e88
 800257c:	0801ee88 	.word	0x0801ee88
 8002580:	0802455c 	.word	0x0802455c
 8002584:	08024254 	.word	0x08024254

08002588 <vl53l5cx_start_ranging>:
	}

	return status;
}

uint8_t vl53l5cx_start_ranging(VL53L5CX_Configuration *p_dev) {
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b09c      	sub	sp, #112	; 0x70
 800258c:	af02      	add	r7, sp, #8
 800258e:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint32_t i;
	uint32_t header_config[2] = { 0, 0 };
 8002596:	2300      	movs	r3, #0
 8002598:	653b      	str	r3, [r7, #80]	; 0x50
 800259a:	2300      	movs	r3, #0
 800259c:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = { 0x00, 0x03, 0x00, 0x00 };
 800259e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 80025a4:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f948 	bl	8002840 <vl53l5cx_get_resolution>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	p_dev->data_read_size = 0;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
	p_dev->streamcount = 255;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	22ff      	movs	r2, #255	; 0xff
 80025c8:	721a      	strb	r2, [r3, #8]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = { 0x00000007U, 0x00000000U, 0x00000000U,
 80025ca:	4b9b      	ldr	r3, [pc, #620]	; (8002838 <vl53l5cx_start_ranging+0x2b0>)
 80025cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80025d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0xC0000000U };

	/* Send addresses of possible output */
	uint32_t output[] = { VL53L5CX_START_BH,
 80025d6:	4b99      	ldr	r3, [pc, #612]	; (800283c <vl53l5cx_start_ranging+0x2b4>)
 80025d8:	f107 040c 	add.w	r4, r7, #12
 80025dc:	461d      	mov	r5, r3
 80025de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	VL53L5CX_TARGET_STATUS_BH,
	VL53L5CX_MOTION_DETECT_BH };

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t) 8;
 80025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f0:	3308      	adds	r3, #8
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t) 16;
 80025f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f6:	3310      	adds	r3, #16
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t) 32;
 80025fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fc:	3320      	adds	r3, #32
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t) 64;
 8002600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002602:	3340      	adds	r3, #64	; 0x40
 8002604:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t) 128;
 8002606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002608:	3380      	adds	r3, #128	; 0x80
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t) 256;
 800260c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t) 512;
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t) 1024;
 800261c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002622:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t) 2048;
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t) (sizeof(output) / sizeof(uint32_t)); i++) {
 800262c:	2300      	movs	r3, #0
 800262e:	667b      	str	r3, [r7, #100]	; 0x64
 8002630:	e075      	b.n	800271e <vl53l5cx_start_ranging+0x196>
		if ((output[i] == (uint8_t) 0)
 8002632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800263a:	4413      	add	r3, r2
 800263c:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d068      	beq.n	8002716 <vl53l5cx_start_ranging+0x18e>
				|| ((output_bh_enable[i / (uint32_t) 32]
 8002644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800264e:	4413      	add	r3, r2
 8002650:	f853 2c2c 	ldr.w	r2, [r3, #-44]
						& ((uint32_t) 1 << (i % (uint32_t) 32))) == (uint32_t) 0)) {
 8002654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	f003 0301 	and.w	r3, r3, #1
				|| ((output_bh_enable[i / (uint32_t) 32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d057      	beq.n	8002716 <vl53l5cx_start_ranging+0x18e>
			continue;
		}

		bh_ptr = (union Block_header*) &(output[i]);
 8002666:	f107 020c 	add.w	r2, r7, #12
 800266a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t) bh_ptr->type >= (uint8_t) 0x1)
 8002672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d03a      	beq.n	80026f6 <vl53l5cx_start_ranging+0x16e>
				&& ((uint8_t) bh_ptr->type < (uint8_t) 0x0d)) {
 8002680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d833      	bhi.n	80026f6 <vl53l5cx_start_ranging+0x16e>
			if ((bh_ptr->idx >= (uint16_t) 0x54d0)
 800268e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002690:	885b      	ldrh	r3, [r3, #2]
 8002692:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8002696:	4293      	cmp	r3, r2
 8002698:	d910      	bls.n	80026bc <vl53l5cx_start_ranging+0x134>
					&& (bh_ptr->idx < (uint16_t) (0x54d0 + 960))) {
 800269a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269c:	885b      	ldrh	r3, [r3, #2]
 800269e:	f645 028f 	movw	r2, #22671	; 0x588f
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d80a      	bhi.n	80026bc <vl53l5cx_start_ranging+0x134>
				bh_ptr->size = resolution;
 80026a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	b299      	uxth	r1, r3
 80026b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026b2:	8813      	ldrh	r3, [r2, #0]
 80026b4:	f361 130f 	bfi	r3, r1, #4, #12
 80026b8:	8013      	strh	r3, [r2, #0]
 80026ba:	e009      	b.n	80026d0 <vl53l5cx_start_ranging+0x148>
			} else {
				bh_ptr->size = (uint8_t) (resolution
 80026bc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80026c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c4:	b299      	uxth	r1, r3
 80026c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026c8:	8813      	ldrh	r3, [r2, #0]
 80026ca:	f361 130f 	bfi	r3, r1, #4, #12
 80026ce:	8013      	strh	r3, [r2, #0]
						* (uint8_t) VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	4611      	mov	r1, r2
 80026e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026e2:	8812      	ldrh	r2, [r2, #0]
 80026e4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80026e8:	b292      	uxth	r2, r2
 80026ea:	fb02 f201 	mul.w	r2, r2, r1
 80026ee:	441a      	add	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	e009      	b.n	800270a <vl53l5cx_start_ranging+0x182>
		} else {
			p_dev->data_read_size += bh_ptr->size;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026fc:	8812      	ldrh	r2, [r2, #0]
 80026fe:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002702:	b292      	uxth	r2, r2
 8002704:	441a      	add	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60da      	str	r2, [r3, #12]
		}
		p_dev->data_read_size += (uint32_t) 4;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	1d1a      	adds	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	e000      	b.n	8002718 <vl53l5cx_start_ranging+0x190>
			continue;
 8002716:	bf00      	nop
	for (i = 0; i < (uint32_t) (sizeof(output) / sizeof(uint32_t)); i++) {
 8002718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271a:	3301      	adds	r3, #1
 800271c:	667b      	str	r3, [r7, #100]	; 0x64
 800271e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002720:	2b0b      	cmp	r3, #11
 8002722:	d986      	bls.n	8002632 <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t) 20;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f103 0214 	add.w	r2, r3, #20
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*) &(output),
 8002730:	f107 010c 	add.w	r1, r7, #12
 8002734:	2330      	movs	r3, #48	; 0x30
 8002736:	f64c 5278 	movw	r2, #52600	; 0xcd78
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fa7c 	bl	8002c38 <vl53l5cx_dci_write_data>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002748:	4313      	orrs	r3, r2
 800274a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	VL53L5CX_DCI_OUTPUT_LIST, (uint16_t) sizeof(output));

	header_config[0] = p_dev->data_read_size;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t) 1;
 8002754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002756:	3301      	adds	r3, #1
 8002758:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*) &(header_config),
 800275a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800275e:	2308      	movs	r3, #8
 8002760:	f64c 5260 	movw	r2, #52576	; 0xcd60
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fa67 	bl	8002c38 <vl53l5cx_dci_write_data>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002772:	4313      	orrs	r3, r2
 8002774:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	VL53L5CX_DCI_OUTPUT_CONFIG, (uint16_t) sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*) &(output_bh_enable),
 8002778:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800277c:	2310      	movs	r3, #16
 800277e:	f64c 5268 	movw	r2, #52584	; 0xcd68
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa58 	bl	8002c38 <vl53l5cx_dci_write_data>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002790:	4313      	orrs	r3, r2
 8002792:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	VL53L5CX_DCI_OUTPUT_ENABLES, (uint16_t) sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe ff0c 	bl	80015bc <WrByte>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2205      	movs	r2, #5
 80027b6:	2109      	movs	r1, #9
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe feff 	bl	80015bc <WrByte>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fef1 	bl	80015bc <WrByte>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform),
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80027ee:	2304      	movs	r3, #4
 80027f0:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 80027f4:	f7fe ff08 	bl	8001608 <WrMulti>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002800:	4313      	orrs	r3, r2
 8002802:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	VL53L5CX_UI_CMD_END - (uint16_t) (4 - 1), (uint8_t*) cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002806:	2303      	movs	r3, #3
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	23ff      	movs	r3, #255	; 0xff
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002812:	2201      	movs	r2, #1
 8002814:	2104      	movs	r1, #4
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe ff92 	bl	8001740 <_vl53l5cx_poll_for_answer>
 800281c:	4603      	mov	r3, r0
 800281e:	461a      	mov	r2, r3
 8002820:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002824:	4313      	orrs	r3, r2
 8002826:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800282a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
}
 800282e:	4618      	mov	r0, r3
 8002830:	3768      	adds	r7, #104	; 0x68
 8002832:	46bd      	mov	sp, r7
 8002834:	bdb0      	pop	{r4, r5, r7, pc}
 8002836:	bf00      	nop
 8002838:	0800ee2c 	.word	0x0800ee2c
 800283c:	0800ee3c 	.word	0x0800ee3c

08002840 <vl53l5cx_get_resolution>:
#endif
	return status;
}

uint8_t vl53l5cx_get_resolution(VL53L5CX_Configuration *p_dev,
		uint8_t *p_resolution) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 8002854:	2308      	movs	r3, #8
 8002856:	f245 4250 	movw	r2, #21584	; 0x5450
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f962 	bl	8002b24 <vl53l5cx_dci_read_data>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	4313      	orrs	r3, r2
 8002868:	73fb      	strb	r3, [r7, #15]
	VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00] * p_dev->temp_buffer[0x01];
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 2508 	ldrb.w	r2, [r3, #1288]	; 0x508
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3509 	ldrb.w	r3, [r3, #1289]	; 0x509
 8002876:	fb12 f303 	smulbb	r3, r2, r3
 800287a:	b2da      	uxtb	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	701a      	strb	r2, [r3, #0]

	return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <vl53l5cx_set_resolution>:

uint8_t vl53l5cx_set_resolution(VL53L5CX_Configuration *p_dev,
		uint8_t resolution) {
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]

	switch (resolution) {
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	2b10      	cmp	r3, #16
 800289e:	d002      	beq.n	80028a6 <vl53l5cx_set_resolution+0x1c>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d055      	beq.n	8002950 <vl53l5cx_set_resolution+0xc6>
 80028a4:	e0a9      	b.n	80029fa <vl53l5cx_set_resolution+0x170>
	case VL53L5CX_RESOLUTION_4X4:
		status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 80028ac:	2310      	movs	r3, #16
 80028ae:	f64a 5238 	movw	r2, #44344	; 0xad38
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f936 	bl	8002b24 <vl53l5cx_dci_read_data>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	4313      	orrs	r3, r2
 80028c0:	73fb      	strb	r3, [r7, #15]
		VL53L5CX_DCI_DSS_CONFIG, 16);
		p_dev->temp_buffer[0x04] = 64;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	f883 250c 	strb.w	r2, [r3, #1292]	; 0x50c
		p_dev->temp_buffer[0x06] = 64;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
		p_dev->temp_buffer[0x09] = 4;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2204      	movs	r2, #4
 80028d6:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
		status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 80028e0:	2310      	movs	r3, #16
 80028e2:	f64a 5238 	movw	r2, #44344	; 0xad38
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f9a6 	bl	8002c38 <vl53l5cx_dci_write_data>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	73fb      	strb	r3, [r7, #15]
		VL53L5CX_DCI_DSS_CONFIG, 16);

		status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 80028fc:	2308      	movs	r3, #8
 80028fe:	f245 4250 	movw	r2, #21584	; 0x5450
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f90e 	bl	8002b24 <vl53l5cx_dci_read_data>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	4313      	orrs	r3, r2
 8002910:	73fb      	strb	r3, [r7, #15]
		VL53L5CX_DCI_ZONE_CONFIG, 8);
		p_dev->temp_buffer[0x00] = 4;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
		p_dev->temp_buffer[0x01] = 4;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2204      	movs	r2, #4
 800291e:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
		p_dev->temp_buffer[0x04] = 8;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2208      	movs	r2, #8
 8002926:	f883 250c 	strb.w	r2, [r3, #1292]	; 0x50c
		p_dev->temp_buffer[0x05] = 8;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2208      	movs	r2, #8
 800292e:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
		status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 8002938:	2308      	movs	r3, #8
 800293a:	f245 4250 	movw	r2, #21584	; 0x5450
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f97a 	bl	8002c38 <vl53l5cx_dci_write_data>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	4313      	orrs	r3, r2
 800294c:	73fb      	strb	r3, [r7, #15]
		VL53L5CX_DCI_ZONE_CONFIG, 8);
		break;
 800294e:	e057      	b.n	8002a00 <vl53l5cx_set_resolution+0x176>

	case VL53L5CX_RESOLUTION_8X8:
		status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 8002956:	2310      	movs	r3, #16
 8002958:	f64a 5238 	movw	r2, #44344	; 0xad38
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8e1 	bl	8002b24 <vl53l5cx_dci_read_data>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	4313      	orrs	r3, r2
 800296a:	73fb      	strb	r3, [r7, #15]
		VL53L5CX_DCI_DSS_CONFIG, 16);
		p_dev->temp_buffer[0x04] = 16;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2210      	movs	r2, #16
 8002970:	f883 250c 	strb.w	r2, [r3, #1292]	; 0x50c
		p_dev->temp_buffer[0x06] = 16;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2210      	movs	r2, #16
 8002978:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
		p_dev->temp_buffer[0x09] = 1;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
		status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 800298a:	2310      	movs	r3, #16
 800298c:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f951 	bl	8002c38 <vl53l5cx_dci_write_data>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	4313      	orrs	r3, r2
 800299e:	73fb      	strb	r3, [r7, #15]
		VL53L5CX_DCI_DSS_CONFIG, 16);

		status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 80029a6:	2308      	movs	r3, #8
 80029a8:	f245 4250 	movw	r2, #21584	; 0x5450
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8b9 	bl	8002b24 <vl53l5cx_dci_read_data>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	73fb      	strb	r3, [r7, #15]
		VL53L5CX_DCI_ZONE_CONFIG, 8);
		p_dev->temp_buffer[0x00] = 8;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2208      	movs	r2, #8
 80029c0:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
		p_dev->temp_buffer[0x01] = 8;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2208      	movs	r2, #8
 80029c8:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
		p_dev->temp_buffer[0x04] = 4;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2204      	movs	r2, #4
 80029d0:	f883 250c 	strb.w	r2, [r3, #1292]	; 0x50c
		p_dev->temp_buffer[0x05] = 4;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2204      	movs	r2, #4
 80029d8:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
		status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 80029e2:	2308      	movs	r3, #8
 80029e4:	f245 4250 	movw	r2, #21584	; 0x5450
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f925 	bl	8002c38 <vl53l5cx_dci_write_data>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	73fb      	strb	r3, [r7, #15]
		VL53L5CX_DCI_ZONE_CONFIG, 8);

		break;
 80029f8:	e002      	b.n	8002a00 <vl53l5cx_set_resolution+0x176>

	default:
		status = VL53L5CX_STATUS_INVALID_PARAM;
 80029fa:	237f      	movs	r3, #127	; 0x7f
 80029fc:	73fb      	strb	r3, [r7, #15]
		break;
 80029fe:	bf00      	nop
	}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7fe feed 	bl	80017e4 <_vl53l5cx_send_offset_data>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff f85d 	bl	8001ad8 <_vl53l5cx_send_xtalk_data>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461a      	mov	r2, r3
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	73fb      	strb	r3, [r7, #15]

	return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <vl53l5cx_set_ranging_frequency_hz>:

	return status;
}

uint8_t vl53l5cx_set_ranging_frequency_hz(VL53L5CX_Configuration *p_dev,
		uint8_t frequency_hz) {
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b088      	sub	sp, #32
 8002a36:	af04      	add	r7, sp, #16
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 8002a48:	2301      	movs	r3, #1
 8002a4a:	9302      	str	r3, [sp, #8]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	1cfb      	adds	r3, r7, #3
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2304      	movs	r3, #4
 8002a56:	f245 4258 	movw	r2, #21592	; 0x5458
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f98b 	bl	8002d76 <vl53l5cx_dci_replace_data>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	73fb      	strb	r3, [r7, #15]
	VL53L5CX_DCI_FREQ_HZ, 4, (uint8_t*) &frequency_hz, 1, 0x01);

	return status;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <vl53l5cx_set_ranging_mode>:

	return status;
}

uint8_t vl53l5cx_set_ranging_mode(VL53L5CX_Configuration *p_dev,
		uint8_t ranging_mode) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 8002a8e:	2308      	movs	r3, #8
 8002a90:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f845 	bl	8002b24 <vl53l5cx_dci_read_data>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	73fb      	strb	r3, [r7, #15]
	VL53L5CX_DCI_RANGING_MODE, 8);

	switch (ranging_mode) {
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d002      	beq.n	8002ab0 <vl53l5cx_set_ranging_mode+0x3c>
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d00b      	beq.n	8002ac6 <vl53l5cx_set_ranging_mode+0x52>
 8002aae:	e015      	b.n	8002adc <vl53l5cx_set_ranging_mode+0x68>
	case VL53L5CX_RANGING_MODE_CONTINUOUS:
		p_dev->temp_buffer[0x01] = 0x1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
		p_dev->temp_buffer[0x03] = 0x3;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
		single_range = 0x00;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
		break;
 8002ac4:	e00d      	b.n	8002ae2 <vl53l5cx_set_ranging_mode+0x6e>

	case VL53L5CX_RANGING_MODE_AUTONOMOUS:
		p_dev->temp_buffer[0x01] = 0x3;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
		p_dev->temp_buffer[0x03] = 0x2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
		single_range = 0x01;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
		break;
 8002ada:	e002      	b.n	8002ae2 <vl53l5cx_set_ranging_mode+0x6e>

	default:
		status = VL53L5CX_STATUS_INVALID_PARAM;
 8002adc:	237f      	movs	r3, #127	; 0x7f
 8002ade:	73fb      	strb	r3, [r7, #15]
		break;
 8002ae0:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f503 61a1 	add.w	r1, r3, #1288	; 0x508
 8002ae8:	2308      	movs	r3, #8
 8002aea:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8a2 	bl	8002c38 <vl53l5cx_dci_write_data>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	73fb      	strb	r3, [r7, #15]
	VL53L5CX_DCI_RANGING_MODE, (uint16_t) 8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*) &single_range,
 8002afe:	f107 0108 	add.w	r1, r7, #8
 8002b02:	2304      	movs	r3, #4
 8002b04:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f895 	bl	8002c38 <vl53l5cx_dci_write_data>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	73fb      	strb	r3, [r7, #15]
	VL53L5CX_DCI_SINGLE_RANGE, (uint16_t) sizeof(single_range));

	return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <vl53l5cx_dci_read_data>:

uint8_t vl53l5cx_dci_read_data(VL53L5CX_Configuration *p_dev, uint8_t *data,
		uint32_t index, uint16_t data_size) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08c      	sub	sp, #48	; 0x30
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t rd_size = (uint32_t) data_size + (uint32_t) 12;
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
 8002b3e:	4a3d      	ldr	r2, [pc, #244]	; (8002c34 <vl53l5cx_dci_read_data+0x110>)
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x02, 0x00, 0x08 };

	/* Check if tmp buffer is large enough */
	if ((data_size + (uint16_t) 12) > (uint16_t) VL53L5CX_TEMPORARY_BUFFER_SIZE) {
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	f240 5294 	movw	r2, #1428	; 0x594
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d903      	bls.n	8002b5c <vl53l5cx_dci_read_data+0x38>
		status |= VL53L5CX_STATUS_ERROR;
 8002b54:	23ff      	movs	r3, #255	; 0xff
 8002b56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002b5a:	e065      	b.n	8002c28 <vl53l5cx_dci_read_data+0x104>
	} else {
		cmd[0] = (uint8_t) (index >> 8);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t) (index & (uint32_t) 0xff);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t) ((data_size & (uint16_t) 0xff0) >> 4);
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	111b      	asrs	r3, r3, #4
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t) ((data_size & (uint16_t) 0xf) << 4);
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	75fb      	strb	r3, [r7, #23]

		/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f107 0214 	add.w	r2, r7, #20
 8002b82:	230c      	movs	r3, #12
 8002b84:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8002b88:	f7fe fd3e 	bl	8001608 <WrMulti>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				(VL53L5CX_UI_CMD_END - (uint16_t) 11), cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	23ff      	movs	r3, #255	; 0xff
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2104      	movs	r1, #4
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7fe fdc8 	bl	8001740 <_vl53l5cx_poll_for_answer>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002bbe:	68f8      	ldr	r0, [r7, #12]
				p_dev->temp_buffer, rd_size);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f642 4104 	movw	r1, #11268	; 0x2c04
 8002bcc:	f7fe fd3b 	bl	8001646 <RdMulti>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t) 12);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	330c      	adds	r3, #12
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f7fe fd64 	bl	80016ba <SwapBuffer>

		/* Copy data from FW into input structure (-4 bytes to remove header) */
		for (i = 0; i < (int16_t) data_size; i++) {
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002bf6:	e011      	b.n	8002c1c <vl53l5cx_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8002bf8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002bfc:	1d1a      	adds	r2, r3, #4
 8002bfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	440b      	add	r3, r1
 8002c06:	68f9      	ldr	r1, [r7, #12]
 8002c08:	440a      	add	r2, r1
 8002c0a:	f892 2508 	ldrb.w	r2, [r2, #1288]	; 0x508
 8002c0e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (int16_t) data_size; i++) {
 8002c10:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c20:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002c24:	429a      	cmp	r2, r3
 8002c26:	dbe7      	blt.n	8002bf8 <vl53l5cx_dci_read_data+0xd4>
		}
	}

	return status;
 8002c28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3728      	adds	r7, #40	; 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	0800ee6c 	.word	0x0800ee6c

08002c38 <vl53l5cx_dci_write_data>:

uint8_t vl53l5cx_dci_write_data(VL53L5CX_Configuration *p_dev, uint8_t *data,
		uint32_t index, uint16_t data_size) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08c      	sub	sp, #48	; 0x30
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = { 0x00, 0x00, 0x00, 0x00 };
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = { 0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002c50:	2300      	movs	r3, #0
 8002c52:	753b      	strb	r3, [r7, #20]
 8002c54:	2300      	movs	r3, #0
 8002c56:	757b      	strb	r3, [r7, #21]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	75bb      	strb	r3, [r7, #22]
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	75fb      	strb	r3, [r7, #23]
 8002c60:	2305      	movs	r3, #5
 8002c62:	763b      	strb	r3, [r7, #24]
 8002c64:	2301      	movs	r3, #1
 8002c66:	767b      	strb	r3, [r7, #25]
			(uint8_t) ((data_size + (uint16_t) 8) >> 8), (uint8_t) ((data_size
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	121b      	asrs	r3, r3, #8
 8002c6e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = { 0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002c70:	76bb      	strb	r3, [r7, #26]
			(uint8_t) ((data_size + (uint16_t) 8) >> 8), (uint8_t) ((data_size
 8002c72:	887b      	ldrh	r3, [r7, #2]
 8002c74:	b2db      	uxtb	r3, r3
					+ (uint16_t) 8) & (uint8_t) 0xFF) };
 8002c76:	3308      	adds	r3, #8
 8002c78:	b2db      	uxtb	r3, r3
	uint8_t footer[] = { 0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002c7a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t) VL53L5CX_UI_CMD_END
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8002c82:	3334      	adds	r3, #52	; 0x34
 8002c84:	847b      	strh	r3, [r7, #34]	; 0x22
			- (data_size + (uint16_t) 12) + (uint16_t) 1;

	/* Check if cmd buffer is large enough */
	if ((data_size + (uint16_t) 12) > (uint16_t) VL53L5CX_TEMPORARY_BUFFER_SIZE) {
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	f240 5294 	movw	r2, #1428	; 0x594
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d903      	bls.n	8002c98 <vl53l5cx_dci_write_data+0x60>
		status |= VL53L5CX_STATUS_ERROR;
 8002c90:	23ff      	movs	r3, #255	; 0xff
 8002c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c96:	e068      	b.n	8002d6a <vl53l5cx_dci_write_data+0x132>
	} else {
		headers[0] = (uint8_t) (index >> 8);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t) (index & (uint32_t) 0xff);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t) (((data_size & (uint16_t) 0xff0) >> 4));
 8002ca6:	887b      	ldrh	r3, [r7, #2]
 8002ca8:	111b      	asrs	r3, r3, #4
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t) ((data_size & (uint16_t) 0xf) << 4);
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	77fb      	strb	r3, [r7, #31]

		/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	68b8      	ldr	r0, [r7, #8]
 8002cbe:	f7fe fcfc 	bl	80016ba <SwapBuffer>
		for (i = (int16_t) data_size - (int16_t) 1; i >= 0; i--) {
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cca:	e012      	b.n	8002cf2 <vl53l5cx_dci_write_data+0xba>
			p_dev->temp_buffer[i + 4] = data[i];
 8002ccc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	441a      	add	r2, r3
 8002cd4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002cd8:	3304      	adds	r3, #4
 8002cda:	7811      	ldrb	r1, [r2, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
		for (i = (int16_t) data_size - (int16_t) 1; i >= 0; i--) {
 8002ce6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cf2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	dae8      	bge.n	8002ccc <vl53l5cx_dci_write_data+0x94>
		}

		/* Add headers and footer */
		(void) memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	601a      	str	r2, [r3, #0]
		(void) memcpy(&p_dev->temp_buffer[data_size + (uint16_t) 4], footer,
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	3304      	adds	r3, #4
 8002d08:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	f107 0314 	add.w	r3, r7, #20
 8002d16:	cb03      	ldmia	r3!, {r0, r1}
 8002d18:	6010      	str	r0, [r2, #0]
 8002d1a:	6051      	str	r1, [r2, #4]
				sizeof(footer));

		/* Send data to FW */
		status |= WrMulti(&(p_dev->platform), address, p_dev->temp_buffer,
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
				(uint32_t) ((uint32_t) data_size + (uint32_t) 12));
 8002d24:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform), address, p_dev->temp_buffer,
 8002d26:	330c      	adds	r3, #12
 8002d28:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002d2a:	f7fe fc6d 	bl	8001608 <WrMulti>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	23ff      	movs	r3, #255	; 0xff
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002d48:	2201      	movs	r2, #1
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7fe fcf7 	bl	8001740 <_vl53l5cx_poll_for_answer>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	4619      	mov	r1, r3
 8002d64:	68b8      	ldr	r0, [r7, #8]
 8002d66:	f7fe fca8 	bl	80016ba <SwapBuffer>
	}

	return status;
 8002d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <vl53l5cx_dci_replace_data>:

uint8_t vl53l5cx_dci_replace_data(VL53L5CX_Configuration *p_dev, uint8_t *data,
		uint32_t index, uint16_t data_size, uint8_t *new_data,
		uint16_t new_data_size, uint16_t new_data_pos) {
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fec8 	bl	8002b24 <vl53l5cx_dci_read_data>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	75fb      	strb	r3, [r7, #23]
	(void) memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8002d9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	4413      	add	r3, r2
 8002da4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002da6:	6a39      	ldr	r1, [r7, #32]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00b fbe5 	bl	800e578 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff ff3f 	bl	8002c38 <vl53l5cx_dci_write_data>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	75fb      	strb	r3, [r7, #23]

	return status;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <vl53l5cx_start_check_data_ready_async>:
#include "vl53l5cx_api.h"
#include "vl53l5cx_plugin_async.h"

uint8_t vl53l5cx_start_check_data_ready_async(VL53L5CX_Configuration *p_dev)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
	if (p_dev->state != VL53L5CX_IDLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3aa8 	ldrb.w	r3, [r3, #2728]	; 0xaa8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <vl53l5cx_start_check_data_ready_async+0x16>
	{
		return VL53L5CX_MCU_ERROR;;
 8002de0:	2342      	movs	r3, #66	; 0x42
 8002de2:	e016      	b.n	8002e12 <vl53l5cx_start_check_data_ready_async+0x44>
	}
	uint8_t status = VL53L5CX_STATUS_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
	status |= RdMultiAsync(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002df0:	2304      	movs	r3, #4
 8002df2:	2100      	movs	r1, #0
 8002df4:	f7fe fc45 	bl	8001682 <RdMultiAsync>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	73fb      	strb	r3, [r7, #15]
	if (status == 0)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <vl53l5cx_start_check_data_ready_async+0x42>
	{
		p_dev->state = VL53L5CX_READING_DATA_AVAILABLE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2aa8 	strb.w	r2, [r3, #2728]	; 0xaa8
	}
	return status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <vl53l5cx_reading_check_data_ready_async>:

uint8_t vl53l5cx_reading_check_data_ready_async(VL53L5CX_Configuration *p_dev)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
	return p_dev->state == VL53L5CX_READING_DATA_AVAILABLE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3aa8 	ldrb.w	r3, [r3, #2728]	; 0xaa8
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <vl53l5cx_finish_check_data_ready_async>:

uint8_t vl53l5cx_finish_check_data_ready_async(VL53L5CX_Configuration *p_dev,
		uint8_t *p_isReady)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
	if ((p_dev->temp_buffer[0] != p_dev->streamcount)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 2508 	ldrb.w	r2, [r3, #1288]	; 0x508
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7a1b      	ldrb	r3, [r3, #8]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d020      	beq.n	8002e98 <vl53l5cx_finish_check_data_ready_async+0x5a>
			&& (p_dev->temp_buffer[0] != (uint8_t) 255)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3508 	ldrb.w	r3, [r3, #1288]	; 0x508
 8002e5c:	2bff      	cmp	r3, #255	; 0xff
 8002e5e:	d01b      	beq.n	8002e98 <vl53l5cx_finish_check_data_ready_async+0x5a>
			&& (p_dev->temp_buffer[1] == (uint8_t) 0x5)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3509 	ldrb.w	r3, [r3, #1289]	; 0x509
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d116      	bne.n	8002e98 <vl53l5cx_finish_check_data_ready_async+0x5a>
			&& ((p_dev->temp_buffer[2] & (uint8_t) 0x5) == (uint8_t) 0x5)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 350a 	ldrb.w	r3, [r3, #1290]	; 0x50a
 8002e70:	f003 0305 	and.w	r3, r3, #5
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d10f      	bne.n	8002e98 <vl53l5cx_finish_check_data_ready_async+0x5a>
			&& ((p_dev->temp_buffer[3] & (uint8_t) 0x10) == (uint8_t) 0x10))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 350b 	ldrb.w	r3, [r3, #1291]	; 0x50b
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <vl53l5cx_finish_check_data_ready_async+0x5a>
	{
		*p_isReady = (uint8_t) 1;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
		p_dev->streamcount = p_dev->temp_buffer[0];
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 2508 	ldrb.w	r2, [r3, #1288]	; 0x508
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	721a      	strb	r2, [r3, #8]
 8002e96:	e002      	b.n	8002e9e <vl53l5cx_finish_check_data_ready_async+0x60>
	}
	else
	{
		*p_isReady = 0;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
	}
	p_dev->state = VL53L5CX_IDLE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2aa8 	strb.w	r2, [r3, #2728]	; 0xaa8
	return VL53L5CX_STATUS_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <vl53l5cx_start_get_ranging_data_async>:

uint8_t vl53l5cx_start_get_ranging_data_async(VL53L5CX_Configuration *p_dev)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	if (p_dev->state != VL53L5CX_IDLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3aa8 	ldrb.w	r3, [r3, #2728]	; 0xaa8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <vl53l5cx_start_get_ranging_data_async+0x16>
	{
		return VL53L5CX_MCU_ERROR;
 8002ec6:	2342      	movs	r3, #66	; 0x42
 8002ec8:	e017      	b.n	8002efa <vl53l5cx_start_get_ranging_data_async+0x46>
	}
	uint8_t status = VL53L5CX_STATUS_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
	status |= RdMultiAsync(&(p_dev->platform), 0x0, p_dev->temp_buffer,
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2100      	movs	r1, #0
 8002edc:	f7fe fbd1 	bl	8001682 <RdMultiAsync>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	73fb      	strb	r3, [r7, #15]
			p_dev->data_read_size);
	if (status == VL53L5CX_STATUS_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <vl53l5cx_start_get_ranging_data_async+0x44>
	{
		p_dev->state = VL53L5CX_READING_RANGING_MEASUREMENT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2aa8 	strb.w	r2, [r3, #2728]	; 0xaa8
	}
	return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <vl53l5cx_reading_get_ranging_data_async>:

uint8_t vl53l5cx_reading_get_ranging_data_async(VL53L5CX_Configuration *p_dev)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
	return VL53L5CX_READING_RANGING_MEASUREMENT == p_dev->state;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3aa8 	ldrb.w	r3, [r3, #2728]	; 0xaa8
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <vl53l5cx_finish_get_ranging_data_async>:

uint8_t vl53l5cx_finish_get_ranging_data_async(VL53L5CX_Configuration *p_dev,
		VL53L5CX_ResultsData *p_results)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	p_dev->streamcount = p_dev->temp_buffer[0];
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 2508 	ldrb.w	r2, [r3, #1288]	; 0x508
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	721a      	strb	r2, [r3, #8]
	SwapBuffer(p_dev->temp_buffer, (uint16_t) p_dev->data_read_size);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f7fe fbb5 	bl	80016ba <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t) 16; i < (uint32_t) p_dev->data_read_size; i +=
 8002f50:	2310      	movs	r3, #16
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e0f8      	b.n	8003148 <vl53l5cx_finish_get_ranging_data_async+0x220>
			(uint32_t) 4)
	{
		bh_ptr = (union Block_header*) &(p_dev->temp_buffer[i]);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t) 0x1) && (bh_ptr->type < (uint32_t) 0xd))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d915      	bls.n	8002f9c <vl53l5cx_finish_get_ranging_data_async+0x74>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d80e      	bhi.n	8002f9c <vl53l5cx_finish_get_ranging_data_async+0x74>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	fb03 f302 	mul.w	r3, r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e005      	b.n	8002fa8 <vl53l5cx_finish_get_ranging_data_async+0x80>
		}
		else
		{
			msize = bh_ptr->size;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	60fb      	str	r3, [r7, #12]
		}

		switch (bh_ptr->idx)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	885b      	ldrh	r3, [r3, #2]
 8002fac:	f24d 427c 	movw	r2, #54396	; 0xd47c
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	f000 80a5 	beq.w	8003100 <vl53l5cx_finish_get_ranging_data_async+0x1d8>
 8002fb6:	f24d 427c 	movw	r2, #54396	; 0xd47c
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	f300 80bc 	bgt.w	8003138 <vl53l5cx_finish_get_ranging_data_async+0x210>
 8002fc0:	f24d 423c 	movw	r2, #54332	; 0xd43c
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f000 808d 	beq.w	80030e4 <vl53l5cx_finish_get_ranging_data_async+0x1bc>
 8002fca:	f24d 423c 	movw	r2, #54332	; 0xd43c
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	f300 80b2 	bgt.w	8003138 <vl53l5cx_finish_get_ranging_data_async+0x210>
 8002fd4:	f24d 323c 	movw	r2, #54076	; 0xd33c
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d075      	beq.n	80030c8 <vl53l5cx_finish_get_ranging_data_async+0x1a0>
 8002fdc:	f24d 323c 	movw	r2, #54076	; 0xd33c
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	f300 80a9 	bgt.w	8003138 <vl53l5cx_finish_get_ranging_data_async+0x210>
 8002fe6:	f24d 22bc 	movw	r2, #53948	; 0xd2bc
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d05e      	beq.n	80030ac <vl53l5cx_finish_get_ranging_data_async+0x184>
 8002fee:	f24d 22bc 	movw	r2, #53948	; 0xd2bc
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	f300 80a0 	bgt.w	8003138 <vl53l5cx_finish_get_ranging_data_async+0x210>
 8002ff8:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d047      	beq.n	8003090 <vl53l5cx_finish_get_ranging_data_async+0x168>
 8003000:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 8003004:	4293      	cmp	r3, r2
 8003006:	f300 8097 	bgt.w	8003138 <vl53l5cx_finish_get_ranging_data_async+0x210>
 800300a:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 800300e:	4293      	cmp	r3, r2
 8003010:	d030      	beq.n	8003074 <vl53l5cx_finish_get_ranging_data_async+0x14c>
 8003012:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 8003016:	4293      	cmp	r3, r2
 8003018:	f300 808e 	bgt.w	8003138 <vl53l5cx_finish_get_ranging_data_async+0x210>
 800301c:	f64c 4250 	movw	r2, #52304	; 0xcc50
 8003020:	4293      	cmp	r3, r2
 8003022:	d07b      	beq.n	800311c <vl53l5cx_finish_get_ranging_data_async+0x1f4>
 8003024:	f64c 4250 	movw	r2, #52304	; 0xcc50
 8003028:	4293      	cmp	r3, r2
 800302a:	f300 8085 	bgt.w	8003138 <vl53l5cx_finish_get_ranging_data_async+0x210>
 800302e:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <vl53l5cx_finish_get_ranging_data_async+0x118>
 8003036:	f245 52d0 	movw	r2, #21968	; 0x55d0
 800303a:	4293      	cmp	r3, r2
 800303c:	d00c      	beq.n	8003058 <vl53l5cx_finish_get_ranging_data_async+0x130>
			(void) memcpy(&p_results->motion_indicator,
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
			break;
#endif
		default:
			break;
 800303e:	e07b      	b.n	8003138 <vl53l5cx_finish_get_ranging_data_async+0x210>
			(void) memcpy(p_results->ambient_per_spad,
 8003040:	6838      	ldr	r0, [r7, #0]
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3304      	adds	r3, #4
 8003046:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
			(void) memcpy(p_results->ambient_per_spad,
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4619      	mov	r1, r3
 8003052:	f00b fa91 	bl	800e578 <memcpy>
			break;
 8003056:	e070      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			(void) memcpy(p_results->nb_spads_enabled,
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f503 70a0 	add.w	r0, r3, #320	; 0x140
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3304      	adds	r3, #4
 8003062:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
			(void) memcpy(p_results->nb_spads_enabled,
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4619      	mov	r1, r3
 800306e:	f00b fa83 	bl	800e578 <memcpy>
			break;
 8003072:	e062      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			(void) memcpy(p_results->nb_target_detected,
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f503 7080 	add.w	r0, r3, #256	; 0x100
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3304      	adds	r3, #4
 800307e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
			(void) memcpy(p_results->nb_target_detected,
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4619      	mov	r1, r3
 800308a:	f00b fa75 	bl	800e578 <memcpy>
			break;
 800308e:	e054      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			(void) memcpy(p_results->signal_per_spad,
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f503 7010 	add.w	r0, r3, #576	; 0x240
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3304      	adds	r3, #4
 800309a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
			(void) memcpy(p_results->signal_per_spad,
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4619      	mov	r1, r3
 80030a6:	f00b fa67 	bl	800e578 <memcpy>
			break;
 80030aa:	e046      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			(void) memcpy(p_results->range_sigma_mm,
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f503 7050 	add.w	r0, r3, #832	; 0x340
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3304      	adds	r3, #4
 80030b6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
			(void) memcpy(p_results->range_sigma_mm,
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f00b fa59 	bl	800e578 <memcpy>
			break;
 80030c6:	e038      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			(void) memcpy(p_results->distance_mm,
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f503 7070 	add.w	r0, r3, #960	; 0x3c0
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3304      	adds	r3, #4
 80030d2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
			(void) memcpy(p_results->distance_mm,
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4619      	mov	r1, r3
 80030de:	f00b fa4b 	bl	800e578 <memcpy>
			break;
 80030e2:	e02a      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			(void) memcpy(p_results->reflectance,
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f503 6088 	add.w	r0, r3, #1088	; 0x440
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3304      	adds	r3, #4
 80030ee:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4413      	add	r3, r2
			(void) memcpy(p_results->reflectance,
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f00b fa3d 	bl	800e578 <memcpy>
			break;
 80030fe:	e01c      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			(void) memcpy(p_results->target_status,
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f503 6090 	add.w	r0, r3, #1152	; 0x480
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3304      	adds	r3, #4
 800310a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
			(void) memcpy(p_results->target_status,
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4619      	mov	r1, r3
 8003116:	f00b fa2f 	bl	800e578 <memcpy>
			break;
 800311a:	e00e      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			(void) memcpy(&p_results->motion_indicator,
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f503 6098 	add.w	r0, r3, #1216	; 0x4c0
					&(p_dev->temp_buffer[i + (uint32_t) 4]), msize);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3304      	adds	r3, #4
 8003126:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
			(void) memcpy(&p_results->motion_indicator,
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4619      	mov	r1, r3
 8003132:	f00b fa21 	bl	800e578 <memcpy>
			break;
 8003136:	e000      	b.n	800313a <vl53l5cx_finish_get_ranging_data_async+0x212>
			break;
 8003138:	bf00      	nop
		}
		i += msize;
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
	for (i = (uint32_t) 16; i < (uint32_t) p_dev->data_read_size; i +=
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3304      	adds	r3, #4
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	429a      	cmp	r2, r3
 8003150:	f4ff af01 	bcc.w	8002f56 <vl53l5cx_finish_get_ranging_data_async+0x2e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for (i = 0; i < (uint32_t) VL53L5CX_RESOLUTION_8X8; i++)
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e00b      	b.n	8003172 <vl53l5cx_finish_get_ranging_data_async+0x24a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t) 2048;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003162:	0ad9      	lsrs	r1, r3, #11
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < (uint32_t) VL53L5CX_RESOLUTION_8X8; i++)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3301      	adds	r3, #1
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b3f      	cmp	r3, #63	; 0x3f
 8003176:	d9f0      	bls.n	800315a <vl53l5cx_finish_get_ranging_data_async+0x232>
	}
#endif

	for (i = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	e03b      	b.n	80031f6 <vl53l5cx_finish_get_ranging_data_async+0x2ce>
			i
					< (uint32_t) (VL53L5CX_RESOLUTION_8X8
							* VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
 8003186:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da00      	bge.n	8003190 <vl53l5cx_finish_get_ranging_data_async+0x268>
 800318e:	3303      	adds	r3, #3
 8003190:	109b      	asrs	r3, r3, #2
 8003192:	b219      	sxth	r1, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
 800319c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (p_results->distance_mm[i] < 0)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
 80031a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da06      	bge.n	80031be <vl53l5cx_finish_get_ranging_data_async+0x296>
		{
			p_results->distance_mm[i] = 0;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
 80031b8:	2100      	movs	r1, #0
 80031ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t) 128;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 80031c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80031ca:	09db      	lsrs	r3, r3, #7
 80031cc:	b299      	uxth	r1, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 80031d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t) 2048;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	3290      	adds	r2, #144	; 0x90
 80031e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e4:	0ad9      	lsrs	r1, r3, #11
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	3290      	adds	r2, #144	; 0x90
 80031ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							* VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3301      	adds	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
	for (i = 0;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b3f      	cmp	r3, #63	; 0x3f
 80031fa:	d9c0      	bls.n	800317e <vl53l5cx_finish_get_ranging_data_async+0x256>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for (i = 0; i < (uint32_t) VL53L5CX_RESOLUTION_8X8; i++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e01b      	b.n	800323a <vl53l5cx_finish_get_ranging_data_async+0x312>
	{
		if (p_results->nb_target_detected[i] == (uint8_t) 0)
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	4413      	add	r3, r2
 8003208:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d110      	bne.n	8003234 <vl53l5cx_finish_get_ranging_data_async+0x30c>
		{
			for (j = 0; j < (uint32_t)
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e00a      	b.n	800322e <vl53l5cx_finish_get_ranging_data_async+0x306>
			VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status[((uint32_t) VL53L5CX_NB_TARGET_PER_ZONE
						* (uint32_t) i) + j] = (uint8_t) 255;
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
			VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	3301      	adds	r3, #1
 800322c:	613b      	str	r3, [r7, #16]
			for (j = 0; j < (uint32_t)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f1      	beq.n	8003218 <vl53l5cx_finish_get_ranging_data_async+0x2f0>
	for (i = 0; i < (uint32_t) VL53L5CX_RESOLUTION_8X8; i++)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b3f      	cmp	r3, #63	; 0x3f
 800323e:	d9e0      	bls.n	8003202 <vl53l5cx_finish_get_ranging_data_async+0x2da>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for (i = 0; i < (uint32_t) 32; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e014      	b.n	8003270 <vl53l5cx_finish_get_ranging_data_async+0x348>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t) 65535;
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f503 7399 	add.w	r3, r3, #306	; 0x132
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <vl53l5cx_finish_get_ranging_data_async+0x360>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0bda      	lsrs	r2, r3, #15
 800325c:	6839      	ldr	r1, [r7, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	605a      	str	r2, [r3, #4]
	for (i = 0; i < (uint32_t) 32; i++)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b1f      	cmp	r3, #31
 8003274:	d9e7      	bls.n	8003246 <vl53l5cx_finish_get_ranging_data_async+0x31e>
	}
#endif

#endif
	p_dev->state = VL53L5CX_IDLE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2aa8 	strb.w	r2, [r3, #2728]	; 0xaa8
	return VL53L5CX_STATUS_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	80008001 	.word	0x80008001

0800328c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003292:	2003      	movs	r0, #3
 8003294:	f000 f9a0 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003298:	f007 faa6 	bl	800a7e8 <HAL_RCC_GetSysClockFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <HAL_Init+0x68>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	4913      	ldr	r1, [pc, #76]	; (80032f8 <HAL_Init+0x6c>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_Init+0x68>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_Init+0x6c>)
 80032c0:	5cd3      	ldrb	r3, [r2, r3]
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_Init+0x70>)
 80032ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032d0:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <HAL_Init+0x74>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032d6:	2000      	movs	r0, #0
 80032d8:	f000 f814 	bl	8003304 <HAL_InitTick>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e002      	b.n	80032ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032e6:	f7fd fd99 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	58024400 	.word	0x58024400
 80032f8:	0800ee78 	.word	0x0800ee78
 80032fc:	24000004 	.word	0x24000004
 8003300:	24000000 	.word	0x24000000

08003304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_InitTick+0x60>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e021      	b.n	800335c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_InitTick+0x64>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <HAL_InitTick+0x60>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003326:	fbb3 f3f1 	udiv	r3, r3, r1
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f985 	bl	800363e <HAL_SYSTICK_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00e      	b.n	800335c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d80a      	bhi.n	800335a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003344:	2200      	movs	r2, #0
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800334c:	f000 f94f 	bl	80035ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <HAL_InitTick+0x68>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	2400000c 	.word	0x2400000c
 8003368:	24000000 	.word	0x24000000
 800336c:	24000008 	.word	0x24000008

08003370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x20>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x24>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4413      	add	r3, r2
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_IncTick+0x24>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	2400000c 	.word	0x2400000c
 8003394:	24001330 	.word	0x24001330

08003398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return uwTick;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_GetTick+0x14>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	24001330 	.word	0x24001330

080033b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff ffee 	bl	8003398 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c8:	d005      	beq.n	80033d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_Delay+0x44>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033d6:	bf00      	nop
 80033d8:	f7ff ffde 	bl	8003398 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8f7      	bhi.n	80033d8 <HAL_Delay+0x28>
  {
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2400000c 	.word	0x2400000c

080033f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <HAL_GetREVID+0x14>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0c1b      	lsrs	r3, r3, #16
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	5c001000 	.word	0x5c001000

08003410 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003420:	4904      	ldr	r1, [pc, #16]	; (8003434 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	58000400 	.word	0x58000400

08003438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <__NVIC_SetPriorityGrouping+0x40>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003454:	4013      	ands	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	4313      	orrs	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	; (8003478 <__NVIC_SetPriorityGrouping+0x40>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00
 800347c:	05fa0000 	.word	0x05fa0000

08003480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <__NVIC_GetPriorityGrouping+0x18>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 0307 	and.w	r3, r3, #7
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	db0b      	blt.n	80034c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	4907      	ldr	r1, [pc, #28]	; (80034d4 <__NVIC_EnableIRQ+0x38>)
 80034b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2001      	movs	r0, #1
 80034be:	fa00 f202 	lsl.w	r2, r0, r2
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000e100 	.word	0xe000e100

080034d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	db0a      	blt.n	8003502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	490c      	ldr	r1, [pc, #48]	; (8003524 <__NVIC_SetPriority+0x4c>)
 80034f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	440b      	add	r3, r1
 80034fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003500:	e00a      	b.n	8003518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <__NVIC_SetPriority+0x50>)
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3b04      	subs	r3, #4
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	440b      	add	r3, r1
 8003516:	761a      	strb	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000e100 	.word	0xe000e100
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f1c3 0307 	rsb	r3, r3, #7
 8003546:	2b04      	cmp	r3, #4
 8003548:	bf28      	it	cs
 800354a:	2304      	movcs	r3, #4
 800354c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3304      	adds	r3, #4
 8003552:	2b06      	cmp	r3, #6
 8003554:	d902      	bls.n	800355c <NVIC_EncodePriority+0x30>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3b03      	subs	r3, #3
 800355a:	e000      	b.n	800355e <NVIC_EncodePriority+0x32>
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	401a      	ands	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43d9      	mvns	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	4313      	orrs	r3, r2
         );
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	; 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a4:	d301      	bcc.n	80035aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00f      	b.n	80035ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <SysTick_Config+0x40>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b2:	210f      	movs	r1, #15
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b8:	f7ff ff8e 	bl	80034d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <SysTick_Config+0x40>)
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <SysTick_Config+0x40>)
 80035c4:	2207      	movs	r2, #7
 80035c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	e000e010 	.word	0xe000e010

080035d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff29 	bl	8003438 <__NVIC_SetPriorityGrouping>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035fc:	f7ff ff40 	bl	8003480 <__NVIC_GetPriorityGrouping>
 8003600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff ff90 	bl	800352c <NVIC_EncodePriority>
 800360c:	4602      	mov	r2, r0
 800360e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff5f 	bl	80034d8 <__NVIC_SetPriority>
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff33 	bl	800349c <__NVIC_EnableIRQ>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ffa4 	bl	8003594 <SysTick_Config>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003660:	f7ff fe9a 	bl	8003398 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e316      	b.n	8003c9e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a66      	ldr	r2, [pc, #408]	; (8003810 <HAL_DMA_Init+0x1b8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d04a      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a65      	ldr	r2, [pc, #404]	; (8003814 <HAL_DMA_Init+0x1bc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d045      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a63      	ldr	r2, [pc, #396]	; (8003818 <HAL_DMA_Init+0x1c0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d040      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a62      	ldr	r2, [pc, #392]	; (800381c <HAL_DMA_Init+0x1c4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d03b      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a60      	ldr	r2, [pc, #384]	; (8003820 <HAL_DMA_Init+0x1c8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d036      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5f      	ldr	r2, [pc, #380]	; (8003824 <HAL_DMA_Init+0x1cc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d031      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a5d      	ldr	r2, [pc, #372]	; (8003828 <HAL_DMA_Init+0x1d0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d02c      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a5c      	ldr	r2, [pc, #368]	; (800382c <HAL_DMA_Init+0x1d4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d027      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5a      	ldr	r2, [pc, #360]	; (8003830 <HAL_DMA_Init+0x1d8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d022      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a59      	ldr	r2, [pc, #356]	; (8003834 <HAL_DMA_Init+0x1dc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01d      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a57      	ldr	r2, [pc, #348]	; (8003838 <HAL_DMA_Init+0x1e0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d018      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a56      	ldr	r2, [pc, #344]	; (800383c <HAL_DMA_Init+0x1e4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_DMA_Init+0x1e8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a53      	ldr	r2, [pc, #332]	; (8003844 <HAL_DMA_Init+0x1ec>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a51      	ldr	r2, [pc, #324]	; (8003848 <HAL_DMA_Init+0x1f0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_DMA_Init+0xb8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a50      	ldr	r2, [pc, #320]	; (800384c <HAL_DMA_Init+0x1f4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_DMA_Init+0xbc>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_DMA_Init+0xbe>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 813b 	beq.w	8003992 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a37      	ldr	r2, [pc, #220]	; (8003810 <HAL_DMA_Init+0x1b8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d04a      	beq.n	80037cc <HAL_DMA_Init+0x174>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a36      	ldr	r2, [pc, #216]	; (8003814 <HAL_DMA_Init+0x1bc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d045      	beq.n	80037cc <HAL_DMA_Init+0x174>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_DMA_Init+0x1c0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d040      	beq.n	80037cc <HAL_DMA_Init+0x174>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a33      	ldr	r2, [pc, #204]	; (800381c <HAL_DMA_Init+0x1c4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d03b      	beq.n	80037cc <HAL_DMA_Init+0x174>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a31      	ldr	r2, [pc, #196]	; (8003820 <HAL_DMA_Init+0x1c8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d036      	beq.n	80037cc <HAL_DMA_Init+0x174>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a30      	ldr	r2, [pc, #192]	; (8003824 <HAL_DMA_Init+0x1cc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d031      	beq.n	80037cc <HAL_DMA_Init+0x174>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <HAL_DMA_Init+0x1d0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d02c      	beq.n	80037cc <HAL_DMA_Init+0x174>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2d      	ldr	r2, [pc, #180]	; (800382c <HAL_DMA_Init+0x1d4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d027      	beq.n	80037cc <HAL_DMA_Init+0x174>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2b      	ldr	r2, [pc, #172]	; (8003830 <HAL_DMA_Init+0x1d8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d022      	beq.n	80037cc <HAL_DMA_Init+0x174>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2a      	ldr	r2, [pc, #168]	; (8003834 <HAL_DMA_Init+0x1dc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d01d      	beq.n	80037cc <HAL_DMA_Init+0x174>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a28      	ldr	r2, [pc, #160]	; (8003838 <HAL_DMA_Init+0x1e0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d018      	beq.n	80037cc <HAL_DMA_Init+0x174>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_DMA_Init+0x1e4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_DMA_Init+0x174>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a25      	ldr	r2, [pc, #148]	; (8003840 <HAL_DMA_Init+0x1e8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_DMA_Init+0x174>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a24      	ldr	r2, [pc, #144]	; (8003844 <HAL_DMA_Init+0x1ec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_DMA_Init+0x174>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_DMA_Init+0x1f0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_DMA_Init+0x174>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_DMA_Init+0x1f4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d108      	bne.n	80037de <HAL_DMA_Init+0x186>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e007      	b.n	80037ee <HAL_DMA_Init+0x196>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037ee:	e02f      	b.n	8003850 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037f0:	f7ff fdd2 	bl	8003398 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d928      	bls.n	8003850 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2203      	movs	r2, #3
 8003808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e246      	b.n	8003c9e <HAL_DMA_Init+0x646>
 8003810:	40020010 	.word	0x40020010
 8003814:	40020028 	.word	0x40020028
 8003818:	40020040 	.word	0x40020040
 800381c:	40020058 	.word	0x40020058
 8003820:	40020070 	.word	0x40020070
 8003824:	40020088 	.word	0x40020088
 8003828:	400200a0 	.word	0x400200a0
 800382c:	400200b8 	.word	0x400200b8
 8003830:	40020410 	.word	0x40020410
 8003834:	40020428 	.word	0x40020428
 8003838:	40020440 	.word	0x40020440
 800383c:	40020458 	.word	0x40020458
 8003840:	40020470 	.word	0x40020470
 8003844:	40020488 	.word	0x40020488
 8003848:	400204a0 	.word	0x400204a0
 800384c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1c8      	bne.n	80037f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4b83      	ldr	r3, [pc, #524]	; (8003a78 <HAL_DMA_Init+0x420>)
 800386a:	4013      	ands	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003876:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003882:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d107      	bne.n	80038b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	4313      	orrs	r3, r2
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80038b4:	4b71      	ldr	r3, [pc, #452]	; (8003a7c <HAL_DMA_Init+0x424>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b71      	ldr	r3, [pc, #452]	; (8003a80 <HAL_DMA_Init+0x428>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c0:	d328      	bcc.n	8003914 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b28      	cmp	r3, #40	; 0x28
 80038c8:	d903      	bls.n	80038d2 <HAL_DMA_Init+0x27a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b2e      	cmp	r3, #46	; 0x2e
 80038d0:	d917      	bls.n	8003902 <HAL_DMA_Init+0x2aa>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b3e      	cmp	r3, #62	; 0x3e
 80038d8:	d903      	bls.n	80038e2 <HAL_DMA_Init+0x28a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b42      	cmp	r3, #66	; 0x42
 80038e0:	d90f      	bls.n	8003902 <HAL_DMA_Init+0x2aa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b46      	cmp	r3, #70	; 0x46
 80038e8:	d903      	bls.n	80038f2 <HAL_DMA_Init+0x29a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b48      	cmp	r3, #72	; 0x48
 80038f0:	d907      	bls.n	8003902 <HAL_DMA_Init+0x2aa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b4e      	cmp	r3, #78	; 0x4e
 80038f8:	d905      	bls.n	8003906 <HAL_DMA_Init+0x2ae>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b52      	cmp	r3, #82	; 0x52
 8003900:	d801      	bhi.n	8003906 <HAL_DMA_Init+0x2ae>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_DMA_Init+0x2b0>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003912:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f023 0307 	bic.w	r3, r3, #7
 800392a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	2b04      	cmp	r3, #4
 800393c:	d117      	bne.n	800396e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00e      	beq.n	800396e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f002 fb3f 	bl	8005fd4 <DMA_CheckFifoParam>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2240      	movs	r2, #64	; 0x40
 8003960:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e197      	b.n	8003c9e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f002 fa7a 	bl	8005e70 <DMA_CalcBaseAndBitshift>
 800397c:	4603      	mov	r3, r0
 800397e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	223f      	movs	r2, #63	; 0x3f
 800398a:	409a      	lsls	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	e0cd      	b.n	8003b2e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a3b      	ldr	r2, [pc, #236]	; (8003a84 <HAL_DMA_Init+0x42c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_Init+0x38a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <HAL_DMA_Init+0x430>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01d      	beq.n	80039e2 <HAL_DMA_Init+0x38a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <HAL_DMA_Init+0x434>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d018      	beq.n	80039e2 <HAL_DMA_Init+0x38a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a36      	ldr	r2, [pc, #216]	; (8003a90 <HAL_DMA_Init+0x438>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_DMA_Init+0x38a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a35      	ldr	r2, [pc, #212]	; (8003a94 <HAL_DMA_Init+0x43c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_DMA_Init+0x38a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <HAL_DMA_Init+0x440>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_DMA_Init+0x38a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a32      	ldr	r2, [pc, #200]	; (8003a9c <HAL_DMA_Init+0x444>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_DMA_Init+0x38a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_DMA_Init+0x448>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_DMA_Init+0x38e>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_DMA_Init+0x390>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8097 	beq.w	8003b1c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_DMA_Init+0x42c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d021      	beq.n	8003a3c <HAL_DMA_Init+0x3e4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_DMA_Init+0x430>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01c      	beq.n	8003a3c <HAL_DMA_Init+0x3e4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_DMA_Init+0x434>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d017      	beq.n	8003a3c <HAL_DMA_Init+0x3e4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_DMA_Init+0x438>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d012      	beq.n	8003a3c <HAL_DMA_Init+0x3e4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <HAL_DMA_Init+0x43c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00d      	beq.n	8003a3c <HAL_DMA_Init+0x3e4>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_DMA_Init+0x440>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d008      	beq.n	8003a3c <HAL_DMA_Init+0x3e4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_DMA_Init+0x444>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <HAL_DMA_Init+0x3e4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_DMA_Init+0x448>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_DMA_Init+0x44c>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d020      	beq.n	8003aa8 <HAL_DMA_Init+0x450>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d102      	bne.n	8003a74 <HAL_DMA_Init+0x41c>
 8003a6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a72:	e01a      	b.n	8003aaa <HAL_DMA_Init+0x452>
 8003a74:	2300      	movs	r3, #0
 8003a76:	e018      	b.n	8003aaa <HAL_DMA_Init+0x452>
 8003a78:	fe10803f 	.word	0xfe10803f
 8003a7c:	5c001000 	.word	0x5c001000
 8003a80:	ffff0000 	.word	0xffff0000
 8003a84:	58025408 	.word	0x58025408
 8003a88:	5802541c 	.word	0x5802541c
 8003a8c:	58025430 	.word	0x58025430
 8003a90:	58025444 	.word	0x58025444
 8003a94:	58025458 	.word	0x58025458
 8003a98:	5802546c 	.word	0x5802546c
 8003a9c:	58025480 	.word	0x58025480
 8003aa0:	58025494 	.word	0x58025494
 8003aa4:	fffe000f 	.word	0xfffe000f
 8003aa8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68d2      	ldr	r2, [r2, #12]
 8003aae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ab0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ab8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ac0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ac8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ad8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b6e      	ldr	r3, [pc, #440]	; (8003ca8 <HAL_DMA_Init+0x650>)
 8003af0:	4413      	add	r3, r2
 8003af2:	4a6e      	ldr	r2, [pc, #440]	; (8003cac <HAL_DMA_Init+0x654>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	009a      	lsls	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f002 f9b5 	bl	8005e70 <DMA_CalcBaseAndBitshift>
 8003b06:	4603      	mov	r3, r0
 8003b08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	2201      	movs	r2, #1
 8003b14:	409a      	lsls	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	e008      	b.n	8003b2e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2240      	movs	r2, #64	; 0x40
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2203      	movs	r2, #3
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0b7      	b.n	8003c9e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5f      	ldr	r2, [pc, #380]	; (8003cb0 <HAL_DMA_Init+0x658>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d072      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5d      	ldr	r2, [pc, #372]	; (8003cb4 <HAL_DMA_Init+0x65c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d06d      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5c      	ldr	r2, [pc, #368]	; (8003cb8 <HAL_DMA_Init+0x660>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d068      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5a      	ldr	r2, [pc, #360]	; (8003cbc <HAL_DMA_Init+0x664>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d063      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a59      	ldr	r2, [pc, #356]	; (8003cc0 <HAL_DMA_Init+0x668>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d05e      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a57      	ldr	r2, [pc, #348]	; (8003cc4 <HAL_DMA_Init+0x66c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d059      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a56      	ldr	r2, [pc, #344]	; (8003cc8 <HAL_DMA_Init+0x670>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d054      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a54      	ldr	r2, [pc, #336]	; (8003ccc <HAL_DMA_Init+0x674>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d04f      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a53      	ldr	r2, [pc, #332]	; (8003cd0 <HAL_DMA_Init+0x678>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04a      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a51      	ldr	r2, [pc, #324]	; (8003cd4 <HAL_DMA_Init+0x67c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d045      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a50      	ldr	r2, [pc, #320]	; (8003cd8 <HAL_DMA_Init+0x680>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d040      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <HAL_DMA_Init+0x684>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d03b      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a4d      	ldr	r2, [pc, #308]	; (8003ce0 <HAL_DMA_Init+0x688>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d036      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a4b      	ldr	r2, [pc, #300]	; (8003ce4 <HAL_DMA_Init+0x68c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a4a      	ldr	r2, [pc, #296]	; (8003ce8 <HAL_DMA_Init+0x690>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d02c      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a48      	ldr	r2, [pc, #288]	; (8003cec <HAL_DMA_Init+0x694>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d027      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a47      	ldr	r2, [pc, #284]	; (8003cf0 <HAL_DMA_Init+0x698>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a45      	ldr	r2, [pc, #276]	; (8003cf4 <HAL_DMA_Init+0x69c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a44      	ldr	r2, [pc, #272]	; (8003cf8 <HAL_DMA_Init+0x6a0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a42      	ldr	r2, [pc, #264]	; (8003cfc <HAL_DMA_Init+0x6a4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a41      	ldr	r2, [pc, #260]	; (8003d00 <HAL_DMA_Init+0x6a8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <HAL_DMA_Init+0x6ac>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a3e      	ldr	r2, [pc, #248]	; (8003d08 <HAL_DMA_Init+0x6b0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_DMA_Init+0x5c6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a3c      	ldr	r2, [pc, #240]	; (8003d0c <HAL_DMA_Init+0x6b4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA_Init+0x5ca>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_DMA_Init+0x5cc>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d032      	beq.n	8003c8e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f002 fa4f 	bl	80060cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b80      	cmp	r3, #128	; 0x80
 8003c34:	d102      	bne.n	8003c3c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d010      	beq.n	8003c7c <HAL_DMA_Init+0x624>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d80c      	bhi.n	8003c7c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f002 facc 	bl	8006200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	e008      	b.n	8003c8e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	a7fdabf8 	.word	0xa7fdabf8
 8003cac:	cccccccd 	.word	0xcccccccd
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
 8003cf0:	58025408 	.word	0x58025408
 8003cf4:	5802541c 	.word	0x5802541c
 8003cf8:	58025430 	.word	0x58025430
 8003cfc:	58025444 	.word	0x58025444
 8003d00:	58025458 	.word	0x58025458
 8003d04:	5802546c 	.word	0x5802546c
 8003d08:	58025480 	.word	0x58025480
 8003d0c:	58025494 	.word	0x58025494

08003d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e226      	b.n	800417a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_DMA_Start_IT+0x2a>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e21f      	b.n	800417a <HAL_DMA_Start_IT+0x46a>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	f040 820a 	bne.w	8004164 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a68      	ldr	r2, [pc, #416]	; (8003f04 <HAL_DMA_Start_IT+0x1f4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d04a      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a66      	ldr	r2, [pc, #408]	; (8003f08 <HAL_DMA_Start_IT+0x1f8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d045      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a65      	ldr	r2, [pc, #404]	; (8003f0c <HAL_DMA_Start_IT+0x1fc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d040      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a63      	ldr	r2, [pc, #396]	; (8003f10 <HAL_DMA_Start_IT+0x200>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d03b      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a62      	ldr	r2, [pc, #392]	; (8003f14 <HAL_DMA_Start_IT+0x204>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d036      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a60      	ldr	r2, [pc, #384]	; (8003f18 <HAL_DMA_Start_IT+0x208>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d031      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5f      	ldr	r2, [pc, #380]	; (8003f1c <HAL_DMA_Start_IT+0x20c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d02c      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a5d      	ldr	r2, [pc, #372]	; (8003f20 <HAL_DMA_Start_IT+0x210>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d027      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a5c      	ldr	r2, [pc, #368]	; (8003f24 <HAL_DMA_Start_IT+0x214>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d022      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a5a      	ldr	r2, [pc, #360]	; (8003f28 <HAL_DMA_Start_IT+0x218>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01d      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a59      	ldr	r2, [pc, #356]	; (8003f2c <HAL_DMA_Start_IT+0x21c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d018      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a57      	ldr	r2, [pc, #348]	; (8003f30 <HAL_DMA_Start_IT+0x220>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a56      	ldr	r2, [pc, #344]	; (8003f34 <HAL_DMA_Start_IT+0x224>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00e      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a54      	ldr	r2, [pc, #336]	; (8003f38 <HAL_DMA_Start_IT+0x228>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d009      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a53      	ldr	r2, [pc, #332]	; (8003f3c <HAL_DMA_Start_IT+0x22c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a51      	ldr	r2, [pc, #324]	; (8003f40 <HAL_DMA_Start_IT+0x230>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <HAL_DMA_Start_IT+0x100>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e007      	b.n	8003e20 <HAL_DMA_Start_IT+0x110>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f001 fe76 	bl	8005b18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a34      	ldr	r2, [pc, #208]	; (8003f04 <HAL_DMA_Start_IT+0x1f4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d04a      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a33      	ldr	r2, [pc, #204]	; (8003f08 <HAL_DMA_Start_IT+0x1f8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d045      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a31      	ldr	r2, [pc, #196]	; (8003f0c <HAL_DMA_Start_IT+0x1fc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d040      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a30      	ldr	r2, [pc, #192]	; (8003f10 <HAL_DMA_Start_IT+0x200>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d03b      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2e      	ldr	r2, [pc, #184]	; (8003f14 <HAL_DMA_Start_IT+0x204>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d036      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2d      	ldr	r2, [pc, #180]	; (8003f18 <HAL_DMA_Start_IT+0x208>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d031      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2b      	ldr	r2, [pc, #172]	; (8003f1c <HAL_DMA_Start_IT+0x20c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02c      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2a      	ldr	r2, [pc, #168]	; (8003f20 <HAL_DMA_Start_IT+0x210>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d027      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <HAL_DMA_Start_IT+0x214>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d022      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <HAL_DMA_Start_IT+0x218>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d01d      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a25      	ldr	r2, [pc, #148]	; (8003f2c <HAL_DMA_Start_IT+0x21c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <HAL_DMA_Start_IT+0x220>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <HAL_DMA_Start_IT+0x224>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_DMA_Start_IT+0x228>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <HAL_DMA_Start_IT+0x22c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_DMA_Start_IT+0x1bc>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <HAL_DMA_Start_IT+0x230>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <HAL_DMA_Start_IT+0x1c0>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_DMA_Start_IT+0x1c2>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 021e 	bic.w	r2, r3, #30
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0216 	orr.w	r2, r2, #22
 8003ee8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d03e      	beq.n	8003f70 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0208 	orr.w	r2, r2, #8
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e035      	b.n	8003f70 <HAL_DMA_Start_IT+0x260>
 8003f04:	40020010 	.word	0x40020010
 8003f08:	40020028 	.word	0x40020028
 8003f0c:	40020040 	.word	0x40020040
 8003f10:	40020058 	.word	0x40020058
 8003f14:	40020070 	.word	0x40020070
 8003f18:	40020088 	.word	0x40020088
 8003f1c:	400200a0 	.word	0x400200a0
 8003f20:	400200b8 	.word	0x400200b8
 8003f24:	40020410 	.word	0x40020410
 8003f28:	40020428 	.word	0x40020428
 8003f2c:	40020440 	.word	0x40020440
 8003f30:	40020458 	.word	0x40020458
 8003f34:	40020470 	.word	0x40020470
 8003f38:	40020488 	.word	0x40020488
 8003f3c:	400204a0 	.word	0x400204a0
 8003f40:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 020e 	bic.w	r2, r3, #14
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 020a 	orr.w	r2, r2, #10
 8003f56:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0204 	orr.w	r2, r2, #4
 8003f6e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a83      	ldr	r2, [pc, #524]	; (8004184 <HAL_DMA_Start_IT+0x474>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d072      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a82      	ldr	r2, [pc, #520]	; (8004188 <HAL_DMA_Start_IT+0x478>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d06d      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a80      	ldr	r2, [pc, #512]	; (800418c <HAL_DMA_Start_IT+0x47c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d068      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a7f      	ldr	r2, [pc, #508]	; (8004190 <HAL_DMA_Start_IT+0x480>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d063      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a7d      	ldr	r2, [pc, #500]	; (8004194 <HAL_DMA_Start_IT+0x484>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d05e      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7c      	ldr	r2, [pc, #496]	; (8004198 <HAL_DMA_Start_IT+0x488>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d059      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a7a      	ldr	r2, [pc, #488]	; (800419c <HAL_DMA_Start_IT+0x48c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d054      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a79      	ldr	r2, [pc, #484]	; (80041a0 <HAL_DMA_Start_IT+0x490>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d04f      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a77      	ldr	r2, [pc, #476]	; (80041a4 <HAL_DMA_Start_IT+0x494>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d04a      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a76      	ldr	r2, [pc, #472]	; (80041a8 <HAL_DMA_Start_IT+0x498>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d045      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a74      	ldr	r2, [pc, #464]	; (80041ac <HAL_DMA_Start_IT+0x49c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d040      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a73      	ldr	r2, [pc, #460]	; (80041b0 <HAL_DMA_Start_IT+0x4a0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d03b      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a71      	ldr	r2, [pc, #452]	; (80041b4 <HAL_DMA_Start_IT+0x4a4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d036      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a70      	ldr	r2, [pc, #448]	; (80041b8 <HAL_DMA_Start_IT+0x4a8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d031      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6e      	ldr	r2, [pc, #440]	; (80041bc <HAL_DMA_Start_IT+0x4ac>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02c      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6d      	ldr	r2, [pc, #436]	; (80041c0 <HAL_DMA_Start_IT+0x4b0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d027      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6b      	ldr	r2, [pc, #428]	; (80041c4 <HAL_DMA_Start_IT+0x4b4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d022      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a6a      	ldr	r2, [pc, #424]	; (80041c8 <HAL_DMA_Start_IT+0x4b8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d01d      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a68      	ldr	r2, [pc, #416]	; (80041cc <HAL_DMA_Start_IT+0x4bc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d018      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a67      	ldr	r2, [pc, #412]	; (80041d0 <HAL_DMA_Start_IT+0x4c0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a65      	ldr	r2, [pc, #404]	; (80041d4 <HAL_DMA_Start_IT+0x4c4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a64      	ldr	r2, [pc, #400]	; (80041d8 <HAL_DMA_Start_IT+0x4c8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a62      	ldr	r2, [pc, #392]	; (80041dc <HAL_DMA_Start_IT+0x4cc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_DMA_Start_IT+0x350>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a61      	ldr	r2, [pc, #388]	; (80041e0 <HAL_DMA_Start_IT+0x4d0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_DMA_Start_IT+0x354>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_DMA_Start_IT+0x356>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01a      	beq.n	80040a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004086:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a37      	ldr	r2, [pc, #220]	; (8004184 <HAL_DMA_Start_IT+0x474>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d04a      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a36      	ldr	r2, [pc, #216]	; (8004188 <HAL_DMA_Start_IT+0x478>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d045      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a34      	ldr	r2, [pc, #208]	; (800418c <HAL_DMA_Start_IT+0x47c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d040      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a33      	ldr	r2, [pc, #204]	; (8004190 <HAL_DMA_Start_IT+0x480>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d03b      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a31      	ldr	r2, [pc, #196]	; (8004194 <HAL_DMA_Start_IT+0x484>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d036      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a30      	ldr	r2, [pc, #192]	; (8004198 <HAL_DMA_Start_IT+0x488>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d031      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2e      	ldr	r2, [pc, #184]	; (800419c <HAL_DMA_Start_IT+0x48c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d02c      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2d      	ldr	r2, [pc, #180]	; (80041a0 <HAL_DMA_Start_IT+0x490>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d027      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2b      	ldr	r2, [pc, #172]	; (80041a4 <HAL_DMA_Start_IT+0x494>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d022      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <HAL_DMA_Start_IT+0x498>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d01d      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a28      	ldr	r2, [pc, #160]	; (80041ac <HAL_DMA_Start_IT+0x49c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a27      	ldr	r2, [pc, #156]	; (80041b0 <HAL_DMA_Start_IT+0x4a0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <HAL_DMA_Start_IT+0x4a4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <HAL_DMA_Start_IT+0x4a8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a22      	ldr	r2, [pc, #136]	; (80041bc <HAL_DMA_Start_IT+0x4ac>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_DMA_Start_IT+0x430>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <HAL_DMA_Start_IT+0x4b0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <HAL_DMA_Start_IT+0x442>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e012      	b.n	8004178 <HAL_DMA_Start_IT+0x468>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e009      	b.n	8004178 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800416a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40020010 	.word	0x40020010
 8004188:	40020028 	.word	0x40020028
 800418c:	40020040 	.word	0x40020040
 8004190:	40020058 	.word	0x40020058
 8004194:	40020070 	.word	0x40020070
 8004198:	40020088 	.word	0x40020088
 800419c:	400200a0 	.word	0x400200a0
 80041a0:	400200b8 	.word	0x400200b8
 80041a4:	40020410 	.word	0x40020410
 80041a8:	40020428 	.word	0x40020428
 80041ac:	40020440 	.word	0x40020440
 80041b0:	40020458 	.word	0x40020458
 80041b4:	40020470 	.word	0x40020470
 80041b8:	40020488 	.word	0x40020488
 80041bc:	400204a0 	.word	0x400204a0
 80041c0:	400204b8 	.word	0x400204b8
 80041c4:	58025408 	.word	0x58025408
 80041c8:	5802541c 	.word	0x5802541c
 80041cc:	58025430 	.word	0x58025430
 80041d0:	58025444 	.word	0x58025444
 80041d4:	58025458 	.word	0x58025458
 80041d8:	5802546c 	.word	0x5802546c
 80041dc:	58025480 	.word	0x58025480
 80041e0:	58025494 	.word	0x58025494

080041e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff f8d4 	bl	8003398 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e2dc      	b.n	80047b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d008      	beq.n	800421a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2280      	movs	r2, #128	; 0x80
 800420c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e2cd      	b.n	80047b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a76      	ldr	r2, [pc, #472]	; (80043f8 <HAL_DMA_Abort+0x214>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d04a      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a74      	ldr	r2, [pc, #464]	; (80043fc <HAL_DMA_Abort+0x218>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d045      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a73      	ldr	r2, [pc, #460]	; (8004400 <HAL_DMA_Abort+0x21c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d040      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a71      	ldr	r2, [pc, #452]	; (8004404 <HAL_DMA_Abort+0x220>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d03b      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a70      	ldr	r2, [pc, #448]	; (8004408 <HAL_DMA_Abort+0x224>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d036      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6e      	ldr	r2, [pc, #440]	; (800440c <HAL_DMA_Abort+0x228>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d031      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6d      	ldr	r2, [pc, #436]	; (8004410 <HAL_DMA_Abort+0x22c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d02c      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a6b      	ldr	r2, [pc, #428]	; (8004414 <HAL_DMA_Abort+0x230>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d027      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6a      	ldr	r2, [pc, #424]	; (8004418 <HAL_DMA_Abort+0x234>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d022      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a68      	ldr	r2, [pc, #416]	; (800441c <HAL_DMA_Abort+0x238>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01d      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a67      	ldr	r2, [pc, #412]	; (8004420 <HAL_DMA_Abort+0x23c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d018      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a65      	ldr	r2, [pc, #404]	; (8004424 <HAL_DMA_Abort+0x240>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a64      	ldr	r2, [pc, #400]	; (8004428 <HAL_DMA_Abort+0x244>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a62      	ldr	r2, [pc, #392]	; (800442c <HAL_DMA_Abort+0x248>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a61      	ldr	r2, [pc, #388]	; (8004430 <HAL_DMA_Abort+0x24c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_DMA_Abort+0xd6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a5f      	ldr	r2, [pc, #380]	; (8004434 <HAL_DMA_Abort+0x250>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <HAL_DMA_Abort+0xda>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_DMA_Abort+0xdc>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 021e 	bic.w	r2, r2, #30
 80042d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e00a      	b.n	8004302 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020e 	bic.w	r2, r2, #14
 80042fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <HAL_DMA_Abort+0x214>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d072      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3a      	ldr	r2, [pc, #232]	; (80043fc <HAL_DMA_Abort+0x218>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d06d      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a39      	ldr	r2, [pc, #228]	; (8004400 <HAL_DMA_Abort+0x21c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d068      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a37      	ldr	r2, [pc, #220]	; (8004404 <HAL_DMA_Abort+0x220>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d063      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a36      	ldr	r2, [pc, #216]	; (8004408 <HAL_DMA_Abort+0x224>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d05e      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a34      	ldr	r2, [pc, #208]	; (800440c <HAL_DMA_Abort+0x228>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d059      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a33      	ldr	r2, [pc, #204]	; (8004410 <HAL_DMA_Abort+0x22c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d054      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a31      	ldr	r2, [pc, #196]	; (8004414 <HAL_DMA_Abort+0x230>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d04f      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a30      	ldr	r2, [pc, #192]	; (8004418 <HAL_DMA_Abort+0x234>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d04a      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2e      	ldr	r2, [pc, #184]	; (800441c <HAL_DMA_Abort+0x238>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d045      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2d      	ldr	r2, [pc, #180]	; (8004420 <HAL_DMA_Abort+0x23c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d040      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2b      	ldr	r2, [pc, #172]	; (8004424 <HAL_DMA_Abort+0x240>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d03b      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <HAL_DMA_Abort+0x244>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d036      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a28      	ldr	r2, [pc, #160]	; (800442c <HAL_DMA_Abort+0x248>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d031      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a27      	ldr	r2, [pc, #156]	; (8004430 <HAL_DMA_Abort+0x24c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d02c      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a25      	ldr	r2, [pc, #148]	; (8004434 <HAL_DMA_Abort+0x250>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d027      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a24      	ldr	r2, [pc, #144]	; (8004438 <HAL_DMA_Abort+0x254>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d022      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a22      	ldr	r2, [pc, #136]	; (800443c <HAL_DMA_Abort+0x258>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01d      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a21      	ldr	r2, [pc, #132]	; (8004440 <HAL_DMA_Abort+0x25c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d018      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <HAL_DMA_Abort+0x260>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <HAL_DMA_Abort+0x264>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1c      	ldr	r2, [pc, #112]	; (800444c <HAL_DMA_Abort+0x268>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_DMA_Abort+0x26c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_DMA_Abort+0x20e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_DMA_Abort+0x270>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d132      	bne.n	8004458 <HAL_DMA_Abort+0x274>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e031      	b.n	800445a <HAL_DMA_Abort+0x276>
 80043f6:	bf00      	nop
 80043f8:	40020010 	.word	0x40020010
 80043fc:	40020028 	.word	0x40020028
 8004400:	40020040 	.word	0x40020040
 8004404:	40020058 	.word	0x40020058
 8004408:	40020070 	.word	0x40020070
 800440c:	40020088 	.word	0x40020088
 8004410:	400200a0 	.word	0x400200a0
 8004414:	400200b8 	.word	0x400200b8
 8004418:	40020410 	.word	0x40020410
 800441c:	40020428 	.word	0x40020428
 8004420:	40020440 	.word	0x40020440
 8004424:	40020458 	.word	0x40020458
 8004428:	40020470 	.word	0x40020470
 800442c:	40020488 	.word	0x40020488
 8004430:	400204a0 	.word	0x400204a0
 8004434:	400204b8 	.word	0x400204b8
 8004438:	58025408 	.word	0x58025408
 800443c:	5802541c 	.word	0x5802541c
 8004440:	58025430 	.word	0x58025430
 8004444:	58025444 	.word	0x58025444
 8004448:	58025458 	.word	0x58025458
 800444c:	5802546c 	.word	0x5802546c
 8004450:	58025480 	.word	0x58025480
 8004454:	58025494 	.word	0x58025494
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800446c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6d      	ldr	r2, [pc, #436]	; (8004628 <HAL_DMA_Abort+0x444>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d04a      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a6b      	ldr	r2, [pc, #428]	; (800462c <HAL_DMA_Abort+0x448>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d045      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a6a      	ldr	r2, [pc, #424]	; (8004630 <HAL_DMA_Abort+0x44c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d040      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a68      	ldr	r2, [pc, #416]	; (8004634 <HAL_DMA_Abort+0x450>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d03b      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a67      	ldr	r2, [pc, #412]	; (8004638 <HAL_DMA_Abort+0x454>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d036      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a65      	ldr	r2, [pc, #404]	; (800463c <HAL_DMA_Abort+0x458>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d031      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a64      	ldr	r2, [pc, #400]	; (8004640 <HAL_DMA_Abort+0x45c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d02c      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a62      	ldr	r2, [pc, #392]	; (8004644 <HAL_DMA_Abort+0x460>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d027      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a61      	ldr	r2, [pc, #388]	; (8004648 <HAL_DMA_Abort+0x464>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5f      	ldr	r2, [pc, #380]	; (800464c <HAL_DMA_Abort+0x468>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5e      	ldr	r2, [pc, #376]	; (8004650 <HAL_DMA_Abort+0x46c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a5c      	ldr	r2, [pc, #368]	; (8004654 <HAL_DMA_Abort+0x470>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a5b      	ldr	r2, [pc, #364]	; (8004658 <HAL_DMA_Abort+0x474>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a59      	ldr	r2, [pc, #356]	; (800465c <HAL_DMA_Abort+0x478>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a58      	ldr	r2, [pc, #352]	; (8004660 <HAL_DMA_Abort+0x47c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_DMA_Abort+0x32a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a56      	ldr	r2, [pc, #344]	; (8004664 <HAL_DMA_Abort+0x480>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <HAL_DMA_Abort+0x33c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e007      	b.n	8004530 <HAL_DMA_Abort+0x34c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004530:	e013      	b.n	800455a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004532:	f7fe ff31 	bl	8003398 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b05      	cmp	r3, #5
 800453e:	d90c      	bls.n	800455a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e12d      	b.n	80047b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2f      	ldr	r2, [pc, #188]	; (8004628 <HAL_DMA_Abort+0x444>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d04a      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2d      	ldr	r2, [pc, #180]	; (800462c <HAL_DMA_Abort+0x448>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d045      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <HAL_DMA_Abort+0x44c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2a      	ldr	r2, [pc, #168]	; (8004634 <HAL_DMA_Abort+0x450>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d03b      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a29      	ldr	r2, [pc, #164]	; (8004638 <HAL_DMA_Abort+0x454>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d036      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <HAL_DMA_Abort+0x458>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d031      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a26      	ldr	r2, [pc, #152]	; (8004640 <HAL_DMA_Abort+0x45c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d02c      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a24      	ldr	r2, [pc, #144]	; (8004644 <HAL_DMA_Abort+0x460>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d027      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a23      	ldr	r2, [pc, #140]	; (8004648 <HAL_DMA_Abort+0x464>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d022      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a21      	ldr	r2, [pc, #132]	; (800464c <HAL_DMA_Abort+0x468>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01d      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a20      	ldr	r2, [pc, #128]	; (8004650 <HAL_DMA_Abort+0x46c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <HAL_DMA_Abort+0x470>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <HAL_DMA_Abort+0x474>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1b      	ldr	r2, [pc, #108]	; (800465c <HAL_DMA_Abort+0x478>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1a      	ldr	r2, [pc, #104]	; (8004660 <HAL_DMA_Abort+0x47c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_DMA_Abort+0x422>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a18      	ldr	r2, [pc, #96]	; (8004664 <HAL_DMA_Abort+0x480>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_DMA_Abort+0x426>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_DMA_Abort+0x428>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d02b      	beq.n	8004668 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	223f      	movs	r2, #63	; 0x3f
 8004620:	409a      	lsls	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	609a      	str	r2, [r3, #8]
 8004626:	e02a      	b.n	800467e <HAL_DMA_Abort+0x49a>
 8004628:	40020010 	.word	0x40020010
 800462c:	40020028 	.word	0x40020028
 8004630:	40020040 	.word	0x40020040
 8004634:	40020058 	.word	0x40020058
 8004638:	40020070 	.word	0x40020070
 800463c:	40020088 	.word	0x40020088
 8004640:	400200a0 	.word	0x400200a0
 8004644:	400200b8 	.word	0x400200b8
 8004648:	40020410 	.word	0x40020410
 800464c:	40020428 	.word	0x40020428
 8004650:	40020440 	.word	0x40020440
 8004654:	40020458 	.word	0x40020458
 8004658:	40020470 	.word	0x40020470
 800465c:	40020488 	.word	0x40020488
 8004660:	400204a0 	.word	0x400204a0
 8004664:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2201      	movs	r2, #1
 8004678:	409a      	lsls	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a4f      	ldr	r2, [pc, #316]	; (80047c0 <HAL_DMA_Abort+0x5dc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d072      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a4d      	ldr	r2, [pc, #308]	; (80047c4 <HAL_DMA_Abort+0x5e0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d06d      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a4c      	ldr	r2, [pc, #304]	; (80047c8 <HAL_DMA_Abort+0x5e4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d068      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <HAL_DMA_Abort+0x5e8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d063      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a49      	ldr	r2, [pc, #292]	; (80047d0 <HAL_DMA_Abort+0x5ec>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d05e      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a47      	ldr	r2, [pc, #284]	; (80047d4 <HAL_DMA_Abort+0x5f0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d059      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a46      	ldr	r2, [pc, #280]	; (80047d8 <HAL_DMA_Abort+0x5f4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d054      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a44      	ldr	r2, [pc, #272]	; (80047dc <HAL_DMA_Abort+0x5f8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04f      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a43      	ldr	r2, [pc, #268]	; (80047e0 <HAL_DMA_Abort+0x5fc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d04a      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a41      	ldr	r2, [pc, #260]	; (80047e4 <HAL_DMA_Abort+0x600>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d045      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a40      	ldr	r2, [pc, #256]	; (80047e8 <HAL_DMA_Abort+0x604>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d040      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a3e      	ldr	r2, [pc, #248]	; (80047ec <HAL_DMA_Abort+0x608>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d03b      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3d      	ldr	r2, [pc, #244]	; (80047f0 <HAL_DMA_Abort+0x60c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d036      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a3b      	ldr	r2, [pc, #236]	; (80047f4 <HAL_DMA_Abort+0x610>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d031      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a3a      	ldr	r2, [pc, #232]	; (80047f8 <HAL_DMA_Abort+0x614>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d02c      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a38      	ldr	r2, [pc, #224]	; (80047fc <HAL_DMA_Abort+0x618>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d027      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a37      	ldr	r2, [pc, #220]	; (8004800 <HAL_DMA_Abort+0x61c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d022      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a35      	ldr	r2, [pc, #212]	; (8004804 <HAL_DMA_Abort+0x620>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01d      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a34      	ldr	r2, [pc, #208]	; (8004808 <HAL_DMA_Abort+0x624>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d018      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a32      	ldr	r2, [pc, #200]	; (800480c <HAL_DMA_Abort+0x628>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a31      	ldr	r2, [pc, #196]	; (8004810 <HAL_DMA_Abort+0x62c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a2f      	ldr	r2, [pc, #188]	; (8004814 <HAL_DMA_Abort+0x630>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a2e      	ldr	r2, [pc, #184]	; (8004818 <HAL_DMA_Abort+0x634>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_DMA_Abort+0x58a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a2c      	ldr	r2, [pc, #176]	; (800481c <HAL_DMA_Abort+0x638>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_DMA_Abort+0x58e>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_DMA_Abort+0x590>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d015      	beq.n	80047a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004780:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00c      	beq.n	80047a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004798:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8
 8004800:	58025408 	.word	0x58025408
 8004804:	5802541c 	.word	0x5802541c
 8004808:	58025430 	.word	0x58025430
 800480c:	58025444 	.word	0x58025444
 8004810:	58025458 	.word	0x58025458
 8004814:	5802546c 	.word	0x5802546c
 8004818:	58025480 	.word	0x58025480
 800481c:	58025494 	.word	0x58025494

08004820 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e205      	b.n	8004c3e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d004      	beq.n	8004848 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e1fa      	b.n	8004c3e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a8c      	ldr	r2, [pc, #560]	; (8004a80 <HAL_DMA_Abort_IT+0x260>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d04a      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a8b      	ldr	r2, [pc, #556]	; (8004a84 <HAL_DMA_Abort_IT+0x264>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d045      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a89      	ldr	r2, [pc, #548]	; (8004a88 <HAL_DMA_Abort_IT+0x268>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d040      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a88      	ldr	r2, [pc, #544]	; (8004a8c <HAL_DMA_Abort_IT+0x26c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d03b      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a86      	ldr	r2, [pc, #536]	; (8004a90 <HAL_DMA_Abort_IT+0x270>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d036      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a85      	ldr	r2, [pc, #532]	; (8004a94 <HAL_DMA_Abort_IT+0x274>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d031      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a83      	ldr	r2, [pc, #524]	; (8004a98 <HAL_DMA_Abort_IT+0x278>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02c      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a82      	ldr	r2, [pc, #520]	; (8004a9c <HAL_DMA_Abort_IT+0x27c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d027      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a80      	ldr	r2, [pc, #512]	; (8004aa0 <HAL_DMA_Abort_IT+0x280>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d022      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a7f      	ldr	r2, [pc, #508]	; (8004aa4 <HAL_DMA_Abort_IT+0x284>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d01d      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a7d      	ldr	r2, [pc, #500]	; (8004aa8 <HAL_DMA_Abort_IT+0x288>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d018      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7c      	ldr	r2, [pc, #496]	; (8004aac <HAL_DMA_Abort_IT+0x28c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7a      	ldr	r2, [pc, #488]	; (8004ab0 <HAL_DMA_Abort_IT+0x290>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a79      	ldr	r2, [pc, #484]	; (8004ab4 <HAL_DMA_Abort_IT+0x294>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a77      	ldr	r2, [pc, #476]	; (8004ab8 <HAL_DMA_Abort_IT+0x298>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xc8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a76      	ldr	r2, [pc, #472]	; (8004abc <HAL_DMA_Abort_IT+0x29c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_DMA_Abort_IT+0xcc>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <HAL_DMA_Abort_IT+0xce>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d065      	beq.n	80049be <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2204      	movs	r2, #4
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a60      	ldr	r2, [pc, #384]	; (8004a80 <HAL_DMA_Abort_IT+0x260>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d04a      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a5e      	ldr	r2, [pc, #376]	; (8004a84 <HAL_DMA_Abort_IT+0x264>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d045      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a5d      	ldr	r2, [pc, #372]	; (8004a88 <HAL_DMA_Abort_IT+0x268>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d040      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a5b      	ldr	r2, [pc, #364]	; (8004a8c <HAL_DMA_Abort_IT+0x26c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d03b      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a5a      	ldr	r2, [pc, #360]	; (8004a90 <HAL_DMA_Abort_IT+0x270>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d036      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <HAL_DMA_Abort_IT+0x274>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d031      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a57      	ldr	r2, [pc, #348]	; (8004a98 <HAL_DMA_Abort_IT+0x278>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d02c      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a55      	ldr	r2, [pc, #340]	; (8004a9c <HAL_DMA_Abort_IT+0x27c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d027      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a54      	ldr	r2, [pc, #336]	; (8004aa0 <HAL_DMA_Abort_IT+0x280>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d022      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a52      	ldr	r2, [pc, #328]	; (8004aa4 <HAL_DMA_Abort_IT+0x284>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01d      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a51      	ldr	r2, [pc, #324]	; (8004aa8 <HAL_DMA_Abort_IT+0x288>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d018      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a4f      	ldr	r2, [pc, #316]	; (8004aac <HAL_DMA_Abort_IT+0x28c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a4e      	ldr	r2, [pc, #312]	; (8004ab0 <HAL_DMA_Abort_IT+0x290>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a4c      	ldr	r2, [pc, #304]	; (8004ab4 <HAL_DMA_Abort_IT+0x294>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a4b      	ldr	r2, [pc, #300]	; (8004ab8 <HAL_DMA_Abort_IT+0x298>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_DMA_Abort_IT+0x17a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a49      	ldr	r2, [pc, #292]	; (8004abc <HAL_DMA_Abort_IT+0x29c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <HAL_DMA_Abort_IT+0x18c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e147      	b.n	8004c3c <HAL_DMA_Abort_IT+0x41c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e13e      	b.n	8004c3c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 020e 	bic.w	r2, r2, #14
 80049cc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2b      	ldr	r2, [pc, #172]	; (8004a80 <HAL_DMA_Abort_IT+0x260>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d04a      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <HAL_DMA_Abort_IT+0x264>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d045      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <HAL_DMA_Abort_IT+0x268>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d040      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <HAL_DMA_Abort_IT+0x26c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d03b      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a25      	ldr	r2, [pc, #148]	; (8004a90 <HAL_DMA_Abort_IT+0x270>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d036      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <HAL_DMA_Abort_IT+0x274>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d031      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <HAL_DMA_Abort_IT+0x278>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d02c      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <HAL_DMA_Abort_IT+0x27c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d027      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1f      	ldr	r2, [pc, #124]	; (8004aa0 <HAL_DMA_Abort_IT+0x280>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d022      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <HAL_DMA_Abort_IT+0x284>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01d      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <HAL_DMA_Abort_IT+0x288>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d018      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1a      	ldr	r2, [pc, #104]	; (8004aac <HAL_DMA_Abort_IT+0x28c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <HAL_DMA_Abort_IT+0x290>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00e      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_DMA_Abort_IT+0x294>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_DMA_Abort_IT+0x298>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x24e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <HAL_DMA_Abort_IT+0x29c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d128      	bne.n	8004ac0 <HAL_DMA_Abort_IT+0x2a0>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e027      	b.n	8004ad0 <HAL_DMA_Abort_IT+0x2b0>
 8004a80:	40020010 	.word	0x40020010
 8004a84:	40020028 	.word	0x40020028
 8004a88:	40020040 	.word	0x40020040
 8004a8c:	40020058 	.word	0x40020058
 8004a90:	40020070 	.word	0x40020070
 8004a94:	40020088 	.word	0x40020088
 8004a98:	400200a0 	.word	0x400200a0
 8004a9c:	400200b8 	.word	0x400200b8
 8004aa0:	40020410 	.word	0x40020410
 8004aa4:	40020428 	.word	0x40020428
 8004aa8:	40020440 	.word	0x40020440
 8004aac:	40020458 	.word	0x40020458
 8004ab0:	40020470 	.word	0x40020470
 8004ab4:	40020488 	.word	0x40020488
 8004ab8:	400204a0 	.word	0x400204a0
 8004abc:	400204b8 	.word	0x400204b8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5c      	ldr	r2, [pc, #368]	; (8004c48 <HAL_DMA_Abort_IT+0x428>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d072      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <HAL_DMA_Abort_IT+0x42c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d06d      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a59      	ldr	r2, [pc, #356]	; (8004c50 <HAL_DMA_Abort_IT+0x430>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d068      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a58      	ldr	r2, [pc, #352]	; (8004c54 <HAL_DMA_Abort_IT+0x434>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d063      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a56      	ldr	r2, [pc, #344]	; (8004c58 <HAL_DMA_Abort_IT+0x438>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d05e      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a55      	ldr	r2, [pc, #340]	; (8004c5c <HAL_DMA_Abort_IT+0x43c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d059      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a53      	ldr	r2, [pc, #332]	; (8004c60 <HAL_DMA_Abort_IT+0x440>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d054      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a52      	ldr	r2, [pc, #328]	; (8004c64 <HAL_DMA_Abort_IT+0x444>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d04f      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a50      	ldr	r2, [pc, #320]	; (8004c68 <HAL_DMA_Abort_IT+0x448>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d04a      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4f      	ldr	r2, [pc, #316]	; (8004c6c <HAL_DMA_Abort_IT+0x44c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d045      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a4d      	ldr	r2, [pc, #308]	; (8004c70 <HAL_DMA_Abort_IT+0x450>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d040      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a4c      	ldr	r2, [pc, #304]	; (8004c74 <HAL_DMA_Abort_IT+0x454>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d03b      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a4a      	ldr	r2, [pc, #296]	; (8004c78 <HAL_DMA_Abort_IT+0x458>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d036      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a49      	ldr	r2, [pc, #292]	; (8004c7c <HAL_DMA_Abort_IT+0x45c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d031      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a47      	ldr	r2, [pc, #284]	; (8004c80 <HAL_DMA_Abort_IT+0x460>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d02c      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a46      	ldr	r2, [pc, #280]	; (8004c84 <HAL_DMA_Abort_IT+0x464>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d027      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a44      	ldr	r2, [pc, #272]	; (8004c88 <HAL_DMA_Abort_IT+0x468>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a43      	ldr	r2, [pc, #268]	; (8004c8c <HAL_DMA_Abort_IT+0x46c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d01d      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a41      	ldr	r2, [pc, #260]	; (8004c90 <HAL_DMA_Abort_IT+0x470>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a40      	ldr	r2, [pc, #256]	; (8004c94 <HAL_DMA_Abort_IT+0x474>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3e      	ldr	r2, [pc, #248]	; (8004c98 <HAL_DMA_Abort_IT+0x478>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a3d      	ldr	r2, [pc, #244]	; (8004c9c <HAL_DMA_Abort_IT+0x47c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3b      	ldr	r2, [pc, #236]	; (8004ca0 <HAL_DMA_Abort_IT+0x480>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x3a0>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3a      	ldr	r2, [pc, #232]	; (8004ca4 <HAL_DMA_Abort_IT+0x484>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d101      	bne.n	8004bc4 <HAL_DMA_Abort_IT+0x3a4>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <HAL_DMA_Abort_IT+0x3a6>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d028      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	2201      	movs	r2, #1
 8004bea:	409a      	lsls	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bf8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c10:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c1a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40020010 	.word	0x40020010
 8004c4c:	40020028 	.word	0x40020028
 8004c50:	40020040 	.word	0x40020040
 8004c54:	40020058 	.word	0x40020058
 8004c58:	40020070 	.word	0x40020070
 8004c5c:	40020088 	.word	0x40020088
 8004c60:	400200a0 	.word	0x400200a0
 8004c64:	400200b8 	.word	0x400200b8
 8004c68:	40020410 	.word	0x40020410
 8004c6c:	40020428 	.word	0x40020428
 8004c70:	40020440 	.word	0x40020440
 8004c74:	40020458 	.word	0x40020458
 8004c78:	40020470 	.word	0x40020470
 8004c7c:	40020488 	.word	0x40020488
 8004c80:	400204a0 	.word	0x400204a0
 8004c84:	400204b8 	.word	0x400204b8
 8004c88:	58025408 	.word	0x58025408
 8004c8c:	5802541c 	.word	0x5802541c
 8004c90:	58025430 	.word	0x58025430
 8004c94:	58025444 	.word	0x58025444
 8004c98:	58025458 	.word	0x58025458
 8004c9c:	5802546c 	.word	0x5802546c
 8004ca0:	58025480 	.word	0x58025480
 8004ca4:	58025494 	.word	0x58025494

08004ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cb4:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <HAL_DMA_IRQHandler+0x1ac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a67      	ldr	r2, [pc, #412]	; (8004e58 <HAL_DMA_IRQHandler+0x1b0>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	0a9b      	lsrs	r3, r3, #10
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a5f      	ldr	r2, [pc, #380]	; (8004e5c <HAL_DMA_IRQHandler+0x1b4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d04a      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a5d      	ldr	r2, [pc, #372]	; (8004e60 <HAL_DMA_IRQHandler+0x1b8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d045      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a5c      	ldr	r2, [pc, #368]	; (8004e64 <HAL_DMA_IRQHandler+0x1bc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d040      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a5a      	ldr	r2, [pc, #360]	; (8004e68 <HAL_DMA_IRQHandler+0x1c0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d03b      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a59      	ldr	r2, [pc, #356]	; (8004e6c <HAL_DMA_IRQHandler+0x1c4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d036      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a57      	ldr	r2, [pc, #348]	; (8004e70 <HAL_DMA_IRQHandler+0x1c8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d031      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a56      	ldr	r2, [pc, #344]	; (8004e74 <HAL_DMA_IRQHandler+0x1cc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d02c      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a54      	ldr	r2, [pc, #336]	; (8004e78 <HAL_DMA_IRQHandler+0x1d0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d027      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a53      	ldr	r2, [pc, #332]	; (8004e7c <HAL_DMA_IRQHandler+0x1d4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a51      	ldr	r2, [pc, #324]	; (8004e80 <HAL_DMA_IRQHandler+0x1d8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01d      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a50      	ldr	r2, [pc, #320]	; (8004e84 <HAL_DMA_IRQHandler+0x1dc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d018      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a4e      	ldr	r2, [pc, #312]	; (8004e88 <HAL_DMA_IRQHandler+0x1e0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4d      	ldr	r2, [pc, #308]	; (8004e8c <HAL_DMA_IRQHandler+0x1e4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a4b      	ldr	r2, [pc, #300]	; (8004e90 <HAL_DMA_IRQHandler+0x1e8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <HAL_DMA_IRQHandler+0x1ec>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a48      	ldr	r2, [pc, #288]	; (8004e98 <HAL_DMA_IRQHandler+0x1f0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_DMA_IRQHandler+0xd6>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <HAL_DMA_IRQHandler+0xd8>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 842b 	beq.w	80055dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2208      	movs	r2, #8
 8004d90:	409a      	lsls	r2, r3
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80a2 	beq.w	8004ee0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2e      	ldr	r2, [pc, #184]	; (8004e5c <HAL_DMA_IRQHandler+0x1b4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d04a      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2d      	ldr	r2, [pc, #180]	; (8004e60 <HAL_DMA_IRQHandler+0x1b8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d045      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2b      	ldr	r2, [pc, #172]	; (8004e64 <HAL_DMA_IRQHandler+0x1bc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d040      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <HAL_DMA_IRQHandler+0x1c0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d03b      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a28      	ldr	r2, [pc, #160]	; (8004e6c <HAL_DMA_IRQHandler+0x1c4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d036      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a27      	ldr	r2, [pc, #156]	; (8004e70 <HAL_DMA_IRQHandler+0x1c8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d031      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <HAL_DMA_IRQHandler+0x1cc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d02c      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <HAL_DMA_IRQHandler+0x1d0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d027      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <HAL_DMA_IRQHandler+0x1d4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d022      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <HAL_DMA_IRQHandler+0x1d8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d01d      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <HAL_DMA_IRQHandler+0x1dc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <HAL_DMA_IRQHandler+0x1e0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <HAL_DMA_IRQHandler+0x1e4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <HAL_DMA_IRQHandler+0x1e8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_DMA_IRQHandler+0x1ec>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_DMA_IRQHandler+0x1f0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d12f      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x1f4>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e02e      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x208>
 8004e52:	bf00      	nop
 8004e54:	24000000 	.word	0x24000000
 8004e58:	1b4e81b5 	.word	0x1b4e81b5
 8004e5c:	40020010 	.word	0x40020010
 8004e60:	40020028 	.word	0x40020028
 8004e64:	40020040 	.word	0x40020040
 8004e68:	40020058 	.word	0x40020058
 8004e6c:	40020070 	.word	0x40020070
 8004e70:	40020088 	.word	0x40020088
 8004e74:	400200a0 	.word	0x400200a0
 8004e78:	400200b8 	.word	0x400200b8
 8004e7c:	40020410 	.word	0x40020410
 8004e80:	40020428 	.word	0x40020428
 8004e84:	40020440 	.word	0x40020440
 8004e88:	40020458 	.word	0x40020458
 8004e8c:	40020470 	.word	0x40020470
 8004e90:	40020488 	.word	0x40020488
 8004e94:	400204a0 	.word	0x400204a0
 8004e98:	400204b8 	.word	0x400204b8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0204 	bic.w	r2, r2, #4
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2208      	movs	r2, #8
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	fa22 f303 	lsr.w	r3, r2, r3
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d06e      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a69      	ldr	r2, [pc, #420]	; (80050a0 <HAL_DMA_IRQHandler+0x3f8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d04a      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a67      	ldr	r2, [pc, #412]	; (80050a4 <HAL_DMA_IRQHandler+0x3fc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d045      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a66      	ldr	r2, [pc, #408]	; (80050a8 <HAL_DMA_IRQHandler+0x400>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d040      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a64      	ldr	r2, [pc, #400]	; (80050ac <HAL_DMA_IRQHandler+0x404>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d03b      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a63      	ldr	r2, [pc, #396]	; (80050b0 <HAL_DMA_IRQHandler+0x408>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d036      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a61      	ldr	r2, [pc, #388]	; (80050b4 <HAL_DMA_IRQHandler+0x40c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d031      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a60      	ldr	r2, [pc, #384]	; (80050b8 <HAL_DMA_IRQHandler+0x410>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d02c      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a5e      	ldr	r2, [pc, #376]	; (80050bc <HAL_DMA_IRQHandler+0x414>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d027      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a5d      	ldr	r2, [pc, #372]	; (80050c0 <HAL_DMA_IRQHandler+0x418>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5b      	ldr	r2, [pc, #364]	; (80050c4 <HAL_DMA_IRQHandler+0x41c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01d      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5a      	ldr	r2, [pc, #360]	; (80050c8 <HAL_DMA_IRQHandler+0x420>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a58      	ldr	r2, [pc, #352]	; (80050cc <HAL_DMA_IRQHandler+0x424>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a57      	ldr	r2, [pc, #348]	; (80050d0 <HAL_DMA_IRQHandler+0x428>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a55      	ldr	r2, [pc, #340]	; (80050d4 <HAL_DMA_IRQHandler+0x42c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <HAL_DMA_IRQHandler+0x430>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a52      	ldr	r2, [pc, #328]	; (80050dc <HAL_DMA_IRQHandler+0x434>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10a      	bne.n	8004fac <HAL_DMA_IRQHandler+0x304>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e003      	b.n	8004fb4 <HAL_DMA_IRQHandler+0x30c>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f043 0202 	orr.w	r2, r3, #2
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2204      	movs	r2, #4
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 808f 	beq.w	8005108 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2c      	ldr	r2, [pc, #176]	; (80050a0 <HAL_DMA_IRQHandler+0x3f8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d04a      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2a      	ldr	r2, [pc, #168]	; (80050a4 <HAL_DMA_IRQHandler+0x3fc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d045      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <HAL_DMA_IRQHandler+0x400>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d040      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <HAL_DMA_IRQHandler+0x404>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d03b      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_DMA_IRQHandler+0x408>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d036      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a24      	ldr	r2, [pc, #144]	; (80050b4 <HAL_DMA_IRQHandler+0x40c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d031      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <HAL_DMA_IRQHandler+0x410>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d02c      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a21      	ldr	r2, [pc, #132]	; (80050bc <HAL_DMA_IRQHandler+0x414>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d027      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a20      	ldr	r2, [pc, #128]	; (80050c0 <HAL_DMA_IRQHandler+0x418>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d022      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <HAL_DMA_IRQHandler+0x41c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01d      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_DMA_IRQHandler+0x420>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d018      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <HAL_DMA_IRQHandler+0x424>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1a      	ldr	r2, [pc, #104]	; (80050d0 <HAL_DMA_IRQHandler+0x428>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <HAL_DMA_IRQHandler+0x42c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <HAL_DMA_IRQHandler+0x430>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_DMA_IRQHandler+0x434>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d12a      	bne.n	80050e0 <HAL_DMA_IRQHandler+0x438>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e023      	b.n	80050e8 <HAL_DMA_IRQHandler+0x440>
 80050a0:	40020010 	.word	0x40020010
 80050a4:	40020028 	.word	0x40020028
 80050a8:	40020040 	.word	0x40020040
 80050ac:	40020058 	.word	0x40020058
 80050b0:	40020070 	.word	0x40020070
 80050b4:	40020088 	.word	0x40020088
 80050b8:	400200a0 	.word	0x400200a0
 80050bc:	400200b8 	.word	0x400200b8
 80050c0:	40020410 	.word	0x40020410
 80050c4:	40020428 	.word	0x40020428
 80050c8:	40020440 	.word	0x40020440
 80050cc:	40020458 	.word	0x40020458
 80050d0:	40020470 	.word	0x40020470
 80050d4:	40020488 	.word	0x40020488
 80050d8:	400204a0 	.word	0x400204a0
 80050dc:	400204b8 	.word	0x400204b8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00d      	beq.n	8005108 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	2204      	movs	r2, #4
 80050f6:	409a      	lsls	r2, r3
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f043 0204 	orr.w	r2, r3, #4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	2210      	movs	r2, #16
 8005112:	409a      	lsls	r2, r3
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80a6 	beq.w	800526a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a85      	ldr	r2, [pc, #532]	; (8005338 <HAL_DMA_IRQHandler+0x690>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d04a      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a83      	ldr	r2, [pc, #524]	; (800533c <HAL_DMA_IRQHandler+0x694>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d045      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a82      	ldr	r2, [pc, #520]	; (8005340 <HAL_DMA_IRQHandler+0x698>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d040      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a80      	ldr	r2, [pc, #512]	; (8005344 <HAL_DMA_IRQHandler+0x69c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d03b      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7f      	ldr	r2, [pc, #508]	; (8005348 <HAL_DMA_IRQHandler+0x6a0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d036      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7d      	ldr	r2, [pc, #500]	; (800534c <HAL_DMA_IRQHandler+0x6a4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7c      	ldr	r2, [pc, #496]	; (8005350 <HAL_DMA_IRQHandler+0x6a8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d02c      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a7a      	ldr	r2, [pc, #488]	; (8005354 <HAL_DMA_IRQHandler+0x6ac>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d027      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a79      	ldr	r2, [pc, #484]	; (8005358 <HAL_DMA_IRQHandler+0x6b0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d022      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a77      	ldr	r2, [pc, #476]	; (800535c <HAL_DMA_IRQHandler+0x6b4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a76      	ldr	r2, [pc, #472]	; (8005360 <HAL_DMA_IRQHandler+0x6b8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d018      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a74      	ldr	r2, [pc, #464]	; (8005364 <HAL_DMA_IRQHandler+0x6bc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a73      	ldr	r2, [pc, #460]	; (8005368 <HAL_DMA_IRQHandler+0x6c0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a71      	ldr	r2, [pc, #452]	; (800536c <HAL_DMA_IRQHandler+0x6c4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a70      	ldr	r2, [pc, #448]	; (8005370 <HAL_DMA_IRQHandler+0x6c8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6e      	ldr	r2, [pc, #440]	; (8005374 <HAL_DMA_IRQHandler+0x6cc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10a      	bne.n	80051d4 <HAL_DMA_IRQHandler+0x52c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	e009      	b.n	80051e8 <HAL_DMA_IRQHandler+0x540>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d03e      	beq.n	800526a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2210      	movs	r2, #16
 80051f6:	409a      	lsls	r2, r3
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d108      	bne.n	800522a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d024      	beq.n	800526a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
 8005228:	e01f      	b.n	800526a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01b      	beq.n	800526a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
 800523a:	e016      	b.n	800526a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d107      	bne.n	800525a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0208 	bic.w	r2, r2, #8
 8005258:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2220      	movs	r2, #32
 8005274:	409a      	lsls	r2, r3
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8110 	beq.w	80054a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <HAL_DMA_IRQHandler+0x690>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d04a      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2b      	ldr	r2, [pc, #172]	; (800533c <HAL_DMA_IRQHandler+0x694>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d045      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a29      	ldr	r2, [pc, #164]	; (8005340 <HAL_DMA_IRQHandler+0x698>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d040      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a28      	ldr	r2, [pc, #160]	; (8005344 <HAL_DMA_IRQHandler+0x69c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d03b      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a26      	ldr	r2, [pc, #152]	; (8005348 <HAL_DMA_IRQHandler+0x6a0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d036      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a25      	ldr	r2, [pc, #148]	; (800534c <HAL_DMA_IRQHandler+0x6a4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d031      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a23      	ldr	r2, [pc, #140]	; (8005350 <HAL_DMA_IRQHandler+0x6a8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a22      	ldr	r2, [pc, #136]	; (8005354 <HAL_DMA_IRQHandler+0x6ac>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d027      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a20      	ldr	r2, [pc, #128]	; (8005358 <HAL_DMA_IRQHandler+0x6b0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1f      	ldr	r2, [pc, #124]	; (800535c <HAL_DMA_IRQHandler+0x6b4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d01d      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_DMA_IRQHandler+0x6b8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_DMA_IRQHandler+0x6bc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <HAL_DMA_IRQHandler+0x6c0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_DMA_IRQHandler+0x6c4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a17      	ldr	r2, [pc, #92]	; (8005370 <HAL_DMA_IRQHandler+0x6c8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_DMA_IRQHandler+0x6cc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d12b      	bne.n	8005378 <HAL_DMA_IRQHandler+0x6d0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e02a      	b.n	800538c <HAL_DMA_IRQHandler+0x6e4>
 8005336:	bf00      	nop
 8005338:	40020010 	.word	0x40020010
 800533c:	40020028 	.word	0x40020028
 8005340:	40020040 	.word	0x40020040
 8005344:	40020058 	.word	0x40020058
 8005348:	40020070 	.word	0x40020070
 800534c:	40020088 	.word	0x40020088
 8005350:	400200a0 	.word	0x400200a0
 8005354:	400200b8 	.word	0x400200b8
 8005358:	40020410 	.word	0x40020410
 800535c:	40020428 	.word	0x40020428
 8005360:	40020440 	.word	0x40020440
 8005364:	40020458 	.word	0x40020458
 8005368:	40020470 	.word	0x40020470
 800536c:	40020488 	.word	0x40020488
 8005370:	400204a0 	.word	0x400204a0
 8005374:	400204b8 	.word	0x400204b8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8087 	beq.w	80054a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2220      	movs	r2, #32
 800539c:	409a      	lsls	r2, r3
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d139      	bne.n	8005422 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0216 	bic.w	r2, r2, #22
 80053bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <HAL_DMA_IRQHandler+0x736>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0208 	bic.w	r2, r2, #8
 80053ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	223f      	movs	r2, #63	; 0x3f
 80053f8:	409a      	lsls	r2, r3
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 834a 	beq.w	8005aac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
          }
          return;
 8005420:	e344      	b.n	8005aac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d018      	beq.n	8005462 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d108      	bne.n	8005450 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	2b00      	cmp	r3, #0
 8005444:	d02c      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	4798      	blx	r3
 800544e:	e027      	b.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d023      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
 8005460:	e01e      	b.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10f      	bne.n	8005490 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0210 	bic.w	r2, r2, #16
 800547e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8306 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8088 	beq.w	80055c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2204      	movs	r2, #4
 80054bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7a      	ldr	r2, [pc, #488]	; (80056b0 <HAL_DMA_IRQHandler+0xa08>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a79      	ldr	r2, [pc, #484]	; (80056b4 <HAL_DMA_IRQHandler+0xa0c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a77      	ldr	r2, [pc, #476]	; (80056b8 <HAL_DMA_IRQHandler+0xa10>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a76      	ldr	r2, [pc, #472]	; (80056bc <HAL_DMA_IRQHandler+0xa14>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a74      	ldr	r2, [pc, #464]	; (80056c0 <HAL_DMA_IRQHandler+0xa18>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a73      	ldr	r2, [pc, #460]	; (80056c4 <HAL_DMA_IRQHandler+0xa1c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a71      	ldr	r2, [pc, #452]	; (80056c8 <HAL_DMA_IRQHandler+0xa20>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a70      	ldr	r2, [pc, #448]	; (80056cc <HAL_DMA_IRQHandler+0xa24>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a6e      	ldr	r2, [pc, #440]	; (80056d0 <HAL_DMA_IRQHandler+0xa28>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6d      	ldr	r2, [pc, #436]	; (80056d4 <HAL_DMA_IRQHandler+0xa2c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6b      	ldr	r2, [pc, #428]	; (80056d8 <HAL_DMA_IRQHandler+0xa30>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6a      	ldr	r2, [pc, #424]	; (80056dc <HAL_DMA_IRQHandler+0xa34>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a68      	ldr	r2, [pc, #416]	; (80056e0 <HAL_DMA_IRQHandler+0xa38>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a67      	ldr	r2, [pc, #412]	; (80056e4 <HAL_DMA_IRQHandler+0xa3c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a65      	ldr	r2, [pc, #404]	; (80056e8 <HAL_DMA_IRQHandler+0xa40>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a64      	ldr	r2, [pc, #400]	; (80056ec <HAL_DMA_IRQHandler+0xa44>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <HAL_DMA_IRQHandler+0x8ca>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e007      	b.n	8005582 <HAL_DMA_IRQHandler+0x8da>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558a:	429a      	cmp	r2, r3
 800558c:	d307      	bcc.n	800559e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f2      	bne.n	8005582 <HAL_DMA_IRQHandler+0x8da>
 800559c:	e000      	b.n	80055a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800559e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2203      	movs	r2, #3
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80055b6:	e003      	b.n	80055c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8272 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
 80055da:	e26c      	b.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a43      	ldr	r2, [pc, #268]	; (80056f0 <HAL_DMA_IRQHandler+0xa48>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d022      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a42      	ldr	r2, [pc, #264]	; (80056f4 <HAL_DMA_IRQHandler+0xa4c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d01d      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <HAL_DMA_IRQHandler+0xa50>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a3f      	ldr	r2, [pc, #252]	; (80056fc <HAL_DMA_IRQHandler+0xa54>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a3d      	ldr	r2, [pc, #244]	; (8005700 <HAL_DMA_IRQHandler+0xa58>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a3c      	ldr	r2, [pc, #240]	; (8005704 <HAL_DMA_IRQHandler+0xa5c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3a      	ldr	r2, [pc, #232]	; (8005708 <HAL_DMA_IRQHandler+0xa60>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a39      	ldr	r2, [pc, #228]	; (800570c <HAL_DMA_IRQHandler+0xa64>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <HAL_DMA_IRQHandler+0x988>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_DMA_IRQHandler+0x98a>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 823f 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2204      	movs	r2, #4
 800564a:	409a      	lsls	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80cd 	beq.w	80057f0 <HAL_DMA_IRQHandler+0xb48>
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80c7 	beq.w	80057f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2204      	movs	r2, #4
 800566c:	409a      	lsls	r2, r3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d049      	beq.n	8005710 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8210 	beq.w	8005ab0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005698:	e20a      	b.n	8005ab0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8206 	beq.w	8005ab0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ac:	e200      	b.n	8005ab0 <HAL_DMA_IRQHandler+0xe08>
 80056ae:	bf00      	nop
 80056b0:	40020010 	.word	0x40020010
 80056b4:	40020028 	.word	0x40020028
 80056b8:	40020040 	.word	0x40020040
 80056bc:	40020058 	.word	0x40020058
 80056c0:	40020070 	.word	0x40020070
 80056c4:	40020088 	.word	0x40020088
 80056c8:	400200a0 	.word	0x400200a0
 80056cc:	400200b8 	.word	0x400200b8
 80056d0:	40020410 	.word	0x40020410
 80056d4:	40020428 	.word	0x40020428
 80056d8:	40020440 	.word	0x40020440
 80056dc:	40020458 	.word	0x40020458
 80056e0:	40020470 	.word	0x40020470
 80056e4:	40020488 	.word	0x40020488
 80056e8:	400204a0 	.word	0x400204a0
 80056ec:	400204b8 	.word	0x400204b8
 80056f0:	58025408 	.word	0x58025408
 80056f4:	5802541c 	.word	0x5802541c
 80056f8:	58025430 	.word	0x58025430
 80056fc:	58025444 	.word	0x58025444
 8005700:	58025458 	.word	0x58025458
 8005704:	5802546c 	.word	0x5802546c
 8005708:	58025480 	.word	0x58025480
 800570c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d160      	bne.n	80057dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a8c      	ldr	r2, [pc, #560]	; (8005950 <HAL_DMA_IRQHandler+0xca8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d04a      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a8a      	ldr	r2, [pc, #552]	; (8005954 <HAL_DMA_IRQHandler+0xcac>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d045      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a89      	ldr	r2, [pc, #548]	; (8005958 <HAL_DMA_IRQHandler+0xcb0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d040      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a87      	ldr	r2, [pc, #540]	; (800595c <HAL_DMA_IRQHandler+0xcb4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d03b      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a86      	ldr	r2, [pc, #536]	; (8005960 <HAL_DMA_IRQHandler+0xcb8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d036      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a84      	ldr	r2, [pc, #528]	; (8005964 <HAL_DMA_IRQHandler+0xcbc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d031      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a83      	ldr	r2, [pc, #524]	; (8005968 <HAL_DMA_IRQHandler+0xcc0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d02c      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a81      	ldr	r2, [pc, #516]	; (800596c <HAL_DMA_IRQHandler+0xcc4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d027      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a80      	ldr	r2, [pc, #512]	; (8005970 <HAL_DMA_IRQHandler+0xcc8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d022      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a7e      	ldr	r2, [pc, #504]	; (8005974 <HAL_DMA_IRQHandler+0xccc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01d      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a7d      	ldr	r2, [pc, #500]	; (8005978 <HAL_DMA_IRQHandler+0xcd0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d018      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a7b      	ldr	r2, [pc, #492]	; (800597c <HAL_DMA_IRQHandler+0xcd4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a7a      	ldr	r2, [pc, #488]	; (8005980 <HAL_DMA_IRQHandler+0xcd8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a78      	ldr	r2, [pc, #480]	; (8005984 <HAL_DMA_IRQHandler+0xcdc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a77      	ldr	r2, [pc, #476]	; (8005988 <HAL_DMA_IRQHandler+0xce0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a75      	ldr	r2, [pc, #468]	; (800598c <HAL_DMA_IRQHandler+0xce4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d108      	bne.n	80057cc <HAL_DMA_IRQHandler+0xb24>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0208 	bic.w	r2, r2, #8
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e007      	b.n	80057dc <HAL_DMA_IRQHandler+0xb34>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8165 	beq.w	8005ab0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ee:	e15f      	b.n	8005ab0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	2202      	movs	r2, #2
 80057fa:	409a      	lsls	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80c5 	beq.w	8005990 <HAL_DMA_IRQHandler+0xce8>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80bf 	beq.w	8005990 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2202      	movs	r2, #2
 800581c:	409a      	lsls	r2, r3
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d018      	beq.n	800585e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 813a 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005848:	e134      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8130 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800585c:	e12a      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d168      	bne.n	800593a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a38      	ldr	r2, [pc, #224]	; (8005950 <HAL_DMA_IRQHandler+0xca8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d04a      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a37      	ldr	r2, [pc, #220]	; (8005954 <HAL_DMA_IRQHandler+0xcac>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d045      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a35      	ldr	r2, [pc, #212]	; (8005958 <HAL_DMA_IRQHandler+0xcb0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d040      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a34      	ldr	r2, [pc, #208]	; (800595c <HAL_DMA_IRQHandler+0xcb4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d03b      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a32      	ldr	r2, [pc, #200]	; (8005960 <HAL_DMA_IRQHandler+0xcb8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d036      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a31      	ldr	r2, [pc, #196]	; (8005964 <HAL_DMA_IRQHandler+0xcbc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d031      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <HAL_DMA_IRQHandler+0xcc0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02c      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2e      	ldr	r2, [pc, #184]	; (800596c <HAL_DMA_IRQHandler+0xcc4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d027      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <HAL_DMA_IRQHandler+0xcc8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d022      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <HAL_DMA_IRQHandler+0xccc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d01d      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a29      	ldr	r2, [pc, #164]	; (8005978 <HAL_DMA_IRQHandler+0xcd0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d018      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a28      	ldr	r2, [pc, #160]	; (800597c <HAL_DMA_IRQHandler+0xcd4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a26      	ldr	r2, [pc, #152]	; (8005980 <HAL_DMA_IRQHandler+0xcd8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00e      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a25      	ldr	r2, [pc, #148]	; (8005984 <HAL_DMA_IRQHandler+0xcdc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d009      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a23      	ldr	r2, [pc, #140]	; (8005988 <HAL_DMA_IRQHandler+0xce0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_DMA_IRQHandler+0xc60>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a22      	ldr	r2, [pc, #136]	; (800598c <HAL_DMA_IRQHandler+0xce4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d108      	bne.n	800591a <HAL_DMA_IRQHandler+0xc72>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0214 	bic.w	r2, r2, #20
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e007      	b.n	800592a <HAL_DMA_IRQHandler+0xc82>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 020a 	bic.w	r2, r2, #10
 8005928:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 80b8 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800594c:	e0b2      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
 800594e:	bf00      	nop
 8005950:	40020010 	.word	0x40020010
 8005954:	40020028 	.word	0x40020028
 8005958:	40020040 	.word	0x40020040
 800595c:	40020058 	.word	0x40020058
 8005960:	40020070 	.word	0x40020070
 8005964:	40020088 	.word	0x40020088
 8005968:	400200a0 	.word	0x400200a0
 800596c:	400200b8 	.word	0x400200b8
 8005970:	40020410 	.word	0x40020410
 8005974:	40020428 	.word	0x40020428
 8005978:	40020440 	.word	0x40020440
 800597c:	40020458 	.word	0x40020458
 8005980:	40020470 	.word	0x40020470
 8005984:	40020488 	.word	0x40020488
 8005988:	400204a0 	.word	0x400204a0
 800598c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	2208      	movs	r2, #8
 800599a:	409a      	lsls	r2, r3
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8088 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8082 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a41      	ldr	r2, [pc, #260]	; (8005abc <HAL_DMA_IRQHandler+0xe14>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d04a      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a3f      	ldr	r2, [pc, #252]	; (8005ac0 <HAL_DMA_IRQHandler+0xe18>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d045      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a3e      	ldr	r2, [pc, #248]	; (8005ac4 <HAL_DMA_IRQHandler+0xe1c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d040      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <HAL_DMA_IRQHandler+0xe20>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d03b      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3b      	ldr	r2, [pc, #236]	; (8005acc <HAL_DMA_IRQHandler+0xe24>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d036      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a39      	ldr	r2, [pc, #228]	; (8005ad0 <HAL_DMA_IRQHandler+0xe28>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d031      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a38      	ldr	r2, [pc, #224]	; (8005ad4 <HAL_DMA_IRQHandler+0xe2c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d02c      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a36      	ldr	r2, [pc, #216]	; (8005ad8 <HAL_DMA_IRQHandler+0xe30>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d027      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a35      	ldr	r2, [pc, #212]	; (8005adc <HAL_DMA_IRQHandler+0xe34>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a33      	ldr	r2, [pc, #204]	; (8005ae0 <HAL_DMA_IRQHandler+0xe38>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01d      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a32      	ldr	r2, [pc, #200]	; (8005ae4 <HAL_DMA_IRQHandler+0xe3c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a30      	ldr	r2, [pc, #192]	; (8005ae8 <HAL_DMA_IRQHandler+0xe40>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <HAL_DMA_IRQHandler+0xe44>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	; (8005af0 <HAL_DMA_IRQHandler+0xe48>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	; (8005af4 <HAL_DMA_IRQHandler+0xe4c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <HAL_DMA_IRQHandler+0xe50>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <HAL_DMA_IRQHandler+0xdbc>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 021c 	bic.w	r2, r2, #28
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	e007      	b.n	8005a74 <HAL_DMA_IRQHandler+0xdcc>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 020e 	bic.w	r2, r2, #14
 8005a72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
 8005aaa:	e004      	b.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005aac:	bf00      	nop
 8005aae:	e002      	b.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab0:	bf00      	nop
 8005ab2:	e000      	b.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ab6:	3728      	adds	r7, #40	; 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40020010 	.word	0x40020010
 8005ac0:	40020028 	.word	0x40020028
 8005ac4:	40020040 	.word	0x40020040
 8005ac8:	40020058 	.word	0x40020058
 8005acc:	40020070 	.word	0x40020070
 8005ad0:	40020088 	.word	0x40020088
 8005ad4:	400200a0 	.word	0x400200a0
 8005ad8:	400200b8 	.word	0x400200b8
 8005adc:	40020410 	.word	0x40020410
 8005ae0:	40020428 	.word	0x40020428
 8005ae4:	40020440 	.word	0x40020440
 8005ae8:	40020458 	.word	0x40020458
 8005aec:	40020470 	.word	0x40020470
 8005af0:	40020488 	.word	0x40020488
 8005af4:	400204a0 	.word	0x400204a0
 8005af8:	400204b8 	.word	0x400204b8

08005afc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b0a:	b2db      	uxtb	r3, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a84      	ldr	r2, [pc, #528]	; (8005d48 <DMA_SetConfig+0x230>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d072      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a82      	ldr	r2, [pc, #520]	; (8005d4c <DMA_SetConfig+0x234>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d06d      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a81      	ldr	r2, [pc, #516]	; (8005d50 <DMA_SetConfig+0x238>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d068      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a7f      	ldr	r2, [pc, #508]	; (8005d54 <DMA_SetConfig+0x23c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d063      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a7e      	ldr	r2, [pc, #504]	; (8005d58 <DMA_SetConfig+0x240>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d05e      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a7c      	ldr	r2, [pc, #496]	; (8005d5c <DMA_SetConfig+0x244>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d059      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a7b      	ldr	r2, [pc, #492]	; (8005d60 <DMA_SetConfig+0x248>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d054      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a79      	ldr	r2, [pc, #484]	; (8005d64 <DMA_SetConfig+0x24c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d04f      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a78      	ldr	r2, [pc, #480]	; (8005d68 <DMA_SetConfig+0x250>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a76      	ldr	r2, [pc, #472]	; (8005d6c <DMA_SetConfig+0x254>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a75      	ldr	r2, [pc, #468]	; (8005d70 <DMA_SetConfig+0x258>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a73      	ldr	r2, [pc, #460]	; (8005d74 <DMA_SetConfig+0x25c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a72      	ldr	r2, [pc, #456]	; (8005d78 <DMA_SetConfig+0x260>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a70      	ldr	r2, [pc, #448]	; (8005d7c <DMA_SetConfig+0x264>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a6f      	ldr	r2, [pc, #444]	; (8005d80 <DMA_SetConfig+0x268>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6d      	ldr	r2, [pc, #436]	; (8005d84 <DMA_SetConfig+0x26c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a6c      	ldr	r2, [pc, #432]	; (8005d88 <DMA_SetConfig+0x270>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a6a      	ldr	r2, [pc, #424]	; (8005d8c <DMA_SetConfig+0x274>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a69      	ldr	r2, [pc, #420]	; (8005d90 <DMA_SetConfig+0x278>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a67      	ldr	r2, [pc, #412]	; (8005d94 <DMA_SetConfig+0x27c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a66      	ldr	r2, [pc, #408]	; (8005d98 <DMA_SetConfig+0x280>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a64      	ldr	r2, [pc, #400]	; (8005d9c <DMA_SetConfig+0x284>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a63      	ldr	r2, [pc, #396]	; (8005da0 <DMA_SetConfig+0x288>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <DMA_SetConfig+0x10a>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a61      	ldr	r2, [pc, #388]	; (8005da4 <DMA_SetConfig+0x28c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <DMA_SetConfig+0x10e>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <DMA_SetConfig+0x110>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00d      	beq.n	8005c48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a3e      	ldr	r2, [pc, #248]	; (8005d48 <DMA_SetConfig+0x230>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d04a      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3d      	ldr	r2, [pc, #244]	; (8005d4c <DMA_SetConfig+0x234>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d045      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a3b      	ldr	r2, [pc, #236]	; (8005d50 <DMA_SetConfig+0x238>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d040      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3a      	ldr	r2, [pc, #232]	; (8005d54 <DMA_SetConfig+0x23c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d03b      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a38      	ldr	r2, [pc, #224]	; (8005d58 <DMA_SetConfig+0x240>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d036      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a37      	ldr	r2, [pc, #220]	; (8005d5c <DMA_SetConfig+0x244>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d031      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a35      	ldr	r2, [pc, #212]	; (8005d60 <DMA_SetConfig+0x248>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d02c      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a34      	ldr	r2, [pc, #208]	; (8005d64 <DMA_SetConfig+0x24c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d027      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a32      	ldr	r2, [pc, #200]	; (8005d68 <DMA_SetConfig+0x250>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d022      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a31      	ldr	r2, [pc, #196]	; (8005d6c <DMA_SetConfig+0x254>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d01d      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a2f      	ldr	r2, [pc, #188]	; (8005d70 <DMA_SetConfig+0x258>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d018      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2e      	ldr	r2, [pc, #184]	; (8005d74 <DMA_SetConfig+0x25c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	; (8005d78 <DMA_SetConfig+0x260>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00e      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <DMA_SetConfig+0x264>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d009      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <DMA_SetConfig+0x268>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <DMA_SetConfig+0x1d0>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a28      	ldr	r2, [pc, #160]	; (8005d84 <DMA_SetConfig+0x26c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d101      	bne.n	8005cec <DMA_SetConfig+0x1d4>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <DMA_SetConfig+0x1d6>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d05a      	beq.n	8005da8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	223f      	movs	r2, #63	; 0x3f
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d108      	bne.n	8005d34 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d32:	e087      	b.n	8005e44 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	60da      	str	r2, [r3, #12]
}
 8005d44:	e07e      	b.n	8005e44 <DMA_SetConfig+0x32c>
 8005d46:	bf00      	nop
 8005d48:	40020010 	.word	0x40020010
 8005d4c:	40020028 	.word	0x40020028
 8005d50:	40020040 	.word	0x40020040
 8005d54:	40020058 	.word	0x40020058
 8005d58:	40020070 	.word	0x40020070
 8005d5c:	40020088 	.word	0x40020088
 8005d60:	400200a0 	.word	0x400200a0
 8005d64:	400200b8 	.word	0x400200b8
 8005d68:	40020410 	.word	0x40020410
 8005d6c:	40020428 	.word	0x40020428
 8005d70:	40020440 	.word	0x40020440
 8005d74:	40020458 	.word	0x40020458
 8005d78:	40020470 	.word	0x40020470
 8005d7c:	40020488 	.word	0x40020488
 8005d80:	400204a0 	.word	0x400204a0
 8005d84:	400204b8 	.word	0x400204b8
 8005d88:	58025408 	.word	0x58025408
 8005d8c:	5802541c 	.word	0x5802541c
 8005d90:	58025430 	.word	0x58025430
 8005d94:	58025444 	.word	0x58025444
 8005d98:	58025458 	.word	0x58025458
 8005d9c:	5802546c 	.word	0x5802546c
 8005da0:	58025480 	.word	0x58025480
 8005da4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a28      	ldr	r2, [pc, #160]	; (8005e50 <DMA_SetConfig+0x338>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d022      	beq.n	8005df8 <DMA_SetConfig+0x2e0>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a27      	ldr	r2, [pc, #156]	; (8005e54 <DMA_SetConfig+0x33c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d01d      	beq.n	8005df8 <DMA_SetConfig+0x2e0>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a25      	ldr	r2, [pc, #148]	; (8005e58 <DMA_SetConfig+0x340>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d018      	beq.n	8005df8 <DMA_SetConfig+0x2e0>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a24      	ldr	r2, [pc, #144]	; (8005e5c <DMA_SetConfig+0x344>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <DMA_SetConfig+0x2e0>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <DMA_SetConfig+0x348>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00e      	beq.n	8005df8 <DMA_SetConfig+0x2e0>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <DMA_SetConfig+0x34c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <DMA_SetConfig+0x2e0>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <DMA_SetConfig+0x350>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <DMA_SetConfig+0x2e0>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <DMA_SetConfig+0x354>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d101      	bne.n	8005dfc <DMA_SetConfig+0x2e4>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <DMA_SetConfig+0x2e6>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d020      	beq.n	8005e44 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d108      	bne.n	8005e34 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	60da      	str	r2, [r3, #12]
}
 8005e32:	e007      	b.n	8005e44 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	60da      	str	r2, [r3, #12]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	58025408 	.word	0x58025408
 8005e54:	5802541c 	.word	0x5802541c
 8005e58:	58025430 	.word	0x58025430
 8005e5c:	58025444 	.word	0x58025444
 8005e60:	58025458 	.word	0x58025458
 8005e64:	5802546c 	.word	0x5802546c
 8005e68:	58025480 	.word	0x58025480
 8005e6c:	58025494 	.word	0x58025494

08005e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a42      	ldr	r2, [pc, #264]	; (8005f88 <DMA_CalcBaseAndBitshift+0x118>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d04a      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a41      	ldr	r2, [pc, #260]	; (8005f8c <DMA_CalcBaseAndBitshift+0x11c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d045      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a3f      	ldr	r2, [pc, #252]	; (8005f90 <DMA_CalcBaseAndBitshift+0x120>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d040      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3e      	ldr	r2, [pc, #248]	; (8005f94 <DMA_CalcBaseAndBitshift+0x124>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d03b      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a3c      	ldr	r2, [pc, #240]	; (8005f98 <DMA_CalcBaseAndBitshift+0x128>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d036      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3b      	ldr	r2, [pc, #236]	; (8005f9c <DMA_CalcBaseAndBitshift+0x12c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d031      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a39      	ldr	r2, [pc, #228]	; (8005fa0 <DMA_CalcBaseAndBitshift+0x130>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d02c      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a38      	ldr	r2, [pc, #224]	; (8005fa4 <DMA_CalcBaseAndBitshift+0x134>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d027      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a36      	ldr	r2, [pc, #216]	; (8005fa8 <DMA_CalcBaseAndBitshift+0x138>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a35      	ldr	r2, [pc, #212]	; (8005fac <DMA_CalcBaseAndBitshift+0x13c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d01d      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a33      	ldr	r2, [pc, #204]	; (8005fb0 <DMA_CalcBaseAndBitshift+0x140>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a32      	ldr	r2, [pc, #200]	; (8005fb4 <DMA_CalcBaseAndBitshift+0x144>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a30      	ldr	r2, [pc, #192]	; (8005fb8 <DMA_CalcBaseAndBitshift+0x148>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2f      	ldr	r2, [pc, #188]	; (8005fbc <DMA_CalcBaseAndBitshift+0x14c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2d      	ldr	r2, [pc, #180]	; (8005fc0 <DMA_CalcBaseAndBitshift+0x150>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2c      	ldr	r2, [pc, #176]	; (8005fc4 <DMA_CalcBaseAndBitshift+0x154>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d101      	bne.n	8005f1c <DMA_CalcBaseAndBitshift+0xac>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <DMA_CalcBaseAndBitshift+0xae>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d024      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	3b10      	subs	r3, #16
 8005f2a:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <DMA_CalcBaseAndBitshift+0x158>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	4a24      	ldr	r2, [pc, #144]	; (8005fcc <DMA_CalcBaseAndBitshift+0x15c>)
 8005f3c:	5cd3      	ldrb	r3, [r2, r3]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d908      	bls.n	8005f5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b1f      	ldr	r3, [pc, #124]	; (8005fd0 <DMA_CalcBaseAndBitshift+0x160>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	659a      	str	r2, [r3, #88]	; 0x58
 8005f5a:	e00d      	b.n	8005f78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <DMA_CalcBaseAndBitshift+0x160>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6593      	str	r3, [r2, #88]	; 0x58
 8005f6a:	e005      	b.n	8005f78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40020010 	.word	0x40020010
 8005f8c:	40020028 	.word	0x40020028
 8005f90:	40020040 	.word	0x40020040
 8005f94:	40020058 	.word	0x40020058
 8005f98:	40020070 	.word	0x40020070
 8005f9c:	40020088 	.word	0x40020088
 8005fa0:	400200a0 	.word	0x400200a0
 8005fa4:	400200b8 	.word	0x400200b8
 8005fa8:	40020410 	.word	0x40020410
 8005fac:	40020428 	.word	0x40020428
 8005fb0:	40020440 	.word	0x40020440
 8005fb4:	40020458 	.word	0x40020458
 8005fb8:	40020470 	.word	0x40020470
 8005fbc:	40020488 	.word	0x40020488
 8005fc0:	400204a0 	.word	0x400204a0
 8005fc4:	400204b8 	.word	0x400204b8
 8005fc8:	aaaaaaab 	.word	0xaaaaaaab
 8005fcc:	08024584 	.word	0x08024584
 8005fd0:	fffffc00 	.word	0xfffffc00

08005fd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d120      	bne.n	800602a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d858      	bhi.n	80060a2 <DMA_CheckFifoParam+0xce>
 8005ff0:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <DMA_CheckFifoParam+0x24>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	0800601b 	.word	0x0800601b
 8006000:	08006009 	.word	0x08006009
 8006004:	080060a3 	.word	0x080060a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d048      	beq.n	80060a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006018:	e045      	b.n	80060a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006022:	d142      	bne.n	80060aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006028:	e03f      	b.n	80060aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006032:	d123      	bne.n	800607c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	2b03      	cmp	r3, #3
 800603a:	d838      	bhi.n	80060ae <DMA_CheckFifoParam+0xda>
 800603c:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <DMA_CheckFifoParam+0x70>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006055 	.word	0x08006055
 8006048:	0800605b 	.word	0x0800605b
 800604c:	08006055 	.word	0x08006055
 8006050:	0800606d 	.word	0x0800606d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
        break;
 8006058:	e030      	b.n	80060bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d025      	beq.n	80060b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800606a:	e022      	b.n	80060b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006074:	d11f      	bne.n	80060b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800607a:	e01c      	b.n	80060b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	2b02      	cmp	r3, #2
 8006082:	d902      	bls.n	800608a <DMA_CheckFifoParam+0xb6>
 8006084:	2b03      	cmp	r3, #3
 8006086:	d003      	beq.n	8006090 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006088:	e018      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
        break;
 800608e:	e015      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00e      	beq.n	80060ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
    break;
 80060a0:	e00b      	b.n	80060ba <DMA_CheckFifoParam+0xe6>
        break;
 80060a2:	bf00      	nop
 80060a4:	e00a      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060a6:	bf00      	nop
 80060a8:	e008      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060aa:	bf00      	nop
 80060ac:	e006      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060ae:	bf00      	nop
 80060b0:	e004      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
    break;
 80060ba:	bf00      	nop
    }
  }

  return status;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop

080060cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a38      	ldr	r2, [pc, #224]	; (80061c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a36      	ldr	r2, [pc, #216]	; (80061c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01d      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a35      	ldr	r2, [pc, #212]	; (80061c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a33      	ldr	r2, [pc, #204]	; (80061cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a32      	ldr	r2, [pc, #200]	; (80061d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a30      	ldr	r2, [pc, #192]	; (80061d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2f      	ldr	r2, [pc, #188]	; (80061d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a2d      	ldr	r2, [pc, #180]	; (80061dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d101      	bne.n	800612e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800612e:	2300      	movs	r3, #0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01a      	beq.n	800616a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	3b08      	subs	r3, #8
 800613c:	4a28      	ldr	r2, [pc, #160]	; (80061e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4b26      	ldr	r3, [pc, #152]	; (80061e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a24      	ldr	r2, [pc, #144]	; (80061e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006158:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2201      	movs	r2, #1
 8006162:	409a      	lsls	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006168:	e024      	b.n	80061b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	3b10      	subs	r3, #16
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4a1c      	ldr	r2, [pc, #112]	; (80061f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d806      	bhi.n	8006192 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d902      	bls.n	8006192 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3308      	adds	r3, #8
 8006190:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	461a      	mov	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a16      	ldr	r2, [pc, #88]	; (80061fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80061a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2201      	movs	r2, #1
 80061ae:	409a      	lsls	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	58025408 	.word	0x58025408
 80061c4:	5802541c 	.word	0x5802541c
 80061c8:	58025430 	.word	0x58025430
 80061cc:	58025444 	.word	0x58025444
 80061d0:	58025458 	.word	0x58025458
 80061d4:	5802546c 	.word	0x5802546c
 80061d8:	58025480 	.word	0x58025480
 80061dc:	58025494 	.word	0x58025494
 80061e0:	cccccccd 	.word	0xcccccccd
 80061e4:	16009600 	.word	0x16009600
 80061e8:	58025880 	.word	0x58025880
 80061ec:	aaaaaaab 	.word	0xaaaaaaab
 80061f0:	400204b8 	.word	0x400204b8
 80061f4:	4002040f 	.word	0x4002040f
 80061f8:	10008200 	.word	0x10008200
 80061fc:	40020880 	.word	0x40020880

08006200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d04a      	beq.n	80062ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d847      	bhi.n	80062ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a25      	ldr	r2, [pc, #148]	; (80062b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d022      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a24      	ldr	r2, [pc, #144]	; (80062bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d01d      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a21      	ldr	r2, [pc, #132]	; (80062c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1f      	ldr	r2, [pc, #124]	; (80062c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1e      	ldr	r2, [pc, #120]	; (80062cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1c      	ldr	r2, [pc, #112]	; (80062d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d101      	bne.n	8006270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a15      	ldr	r2, [pc, #84]	; (80062dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006288:	671a      	str	r2, [r3, #112]	; 0x70
 800628a:	e009      	b.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800629e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	2201      	movs	r2, #1
 80062a6:	409a      	lsls	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	58025408 	.word	0x58025408
 80062bc:	5802541c 	.word	0x5802541c
 80062c0:	58025430 	.word	0x58025430
 80062c4:	58025444 	.word	0x58025444
 80062c8:	58025458 	.word	0x58025458
 80062cc:	5802546c 	.word	0x5802546c
 80062d0:	58025480 	.word	0x58025480
 80062d4:	58025494 	.word	0x58025494
 80062d8:	1600963f 	.word	0x1600963f
 80062dc:	58025940 	.word	0x58025940
 80062e0:	1000823f 	.word	0x1000823f
 80062e4:	40020940 	.word	0x40020940

080062e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e0c6      	b.n	8006488 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fa fda4 	bl	8000e50 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2223      	movs	r2, #35	; 0x23
 800630c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800630e:	4b60      	ldr	r3, [pc, #384]	; (8006490 <HAL_ETH_Init+0x1a8>)
 8006310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006314:	4a5e      	ldr	r2, [pc, #376]	; (8006490 <HAL_ETH_Init+0x1a8>)
 8006316:	f043 0302 	orr.w	r3, r3, #2
 800631a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800631e:	4b5c      	ldr	r3, [pc, #368]	; (8006490 <HAL_ETH_Init+0x1a8>)
 8006320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	7a1b      	ldrb	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d103      	bne.n	800633c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006334:	2000      	movs	r0, #0
 8006336:	f7fd f86b 	bl	8003410 <HAL_SYSCFG_ETHInterfaceSelect>
 800633a:	e003      	b.n	8006344 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800633c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006340:	f7fd f866 	bl	8003410 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800635c:	f7fd f81c 	bl	8003398 <HAL_GetTick>
 8006360:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006362:	e00f      	b.n	8006384 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8006364:	f7fd f818 	bl	8003398 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006372:	d907      	bls.n	8006384 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2204      	movs	r2, #4
 8006378:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	22e0      	movs	r2, #224	; 0xe0
 800637e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e081      	b.n	8006488 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e6      	bne.n	8006364 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fac0 	bl	800691c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800639c:	f004 fb9e 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 80063a0:	4603      	mov	r3, r0
 80063a2:	4a3c      	ldr	r2, [pc, #240]	; (8006494 <HAL_ETH_Init+0x1ac>)
 80063a4:	fba2 2303 	umull	r2, r3, r2, r3
 80063a8:	0c9a      	lsrs	r2, r3, #18
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3a01      	subs	r2, #1
 80063b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fa13 	bl	80067e0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80063d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80063d4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	22e0      	movs	r2, #224	; 0xe0
 80063ec:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e04a      	b.n	8006488 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80063fa:	4413      	add	r3, r2
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b26      	ldr	r3, [pc, #152]	; (8006498 <HAL_ETH_Init+0x1b0>)
 8006400:	4013      	ands	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6952      	ldr	r2, [r2, #20]
 8006406:	0052      	lsls	r2, r2, #1
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	6809      	ldr	r1, [r1, #0]
 800640c:	431a      	orrs	r2, r3
 800640e:	f241 1308 	movw	r3, #4360	; 0x1108
 8006412:	440b      	add	r3, r1
 8006414:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fad8 	bl	80069cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fb1c 	bl	8006a5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	3305      	adds	r3, #5
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	021a      	lsls	r2, r3, #8
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	3303      	adds	r3, #3
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	061a      	lsls	r2, r3, #24
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	3302      	adds	r3, #2
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	3301      	adds	r3, #1
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006460:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800646e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006470:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2210      	movs	r2, #16
 800647e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2210      	movs	r2, #16
 8006484:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	58024400 	.word	0x58024400
 8006494:	431bde83 	.word	0x431bde83
 8006498:	ffff8001 	.word	0xffff8001

0800649c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80064ae:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	791b      	ldrb	r3, [r3, #4]
 80064b4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80064b6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	7b1b      	ldrb	r3, [r3, #12]
 80064bc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80064be:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	7b5b      	ldrb	r3, [r3, #13]
 80064c4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80064c6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	7b9b      	ldrb	r3, [r3, #14]
 80064cc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80064ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	7bdb      	ldrb	r3, [r3, #15]
 80064d4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80064d6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	7c12      	ldrb	r2, [r2, #16]
 80064dc:	2a00      	cmp	r2, #0
 80064de:	d102      	bne.n	80064e6 <ETH_SetMACConfig+0x4a>
 80064e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80064e4:	e000      	b.n	80064e8 <ETH_SetMACConfig+0x4c>
 80064e6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80064e8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	7c52      	ldrb	r2, [r2, #17]
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	d102      	bne.n	80064f8 <ETH_SetMACConfig+0x5c>
 80064f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064f6:	e000      	b.n	80064fa <ETH_SetMACConfig+0x5e>
 80064f8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80064fa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	7c9b      	ldrb	r3, [r3, #18]
 8006500:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006502:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006508:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800650e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	7f1b      	ldrb	r3, [r3, #28]
 8006514:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8006516:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	7f5b      	ldrb	r3, [r3, #29]
 800651c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800651e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	7f92      	ldrb	r2, [r2, #30]
 8006524:	2a00      	cmp	r2, #0
 8006526:	d102      	bne.n	800652e <ETH_SetMACConfig+0x92>
 8006528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800652c:	e000      	b.n	8006530 <ETH_SetMACConfig+0x94>
 800652e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006530:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	7fdb      	ldrb	r3, [r3, #31]
 8006536:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8006538:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006540:	2a00      	cmp	r2, #0
 8006542:	d102      	bne.n	800654a <ETH_SetMACConfig+0xae>
 8006544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006548:	e000      	b.n	800654c <ETH_SetMACConfig+0xb0>
 800654a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800654c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8006552:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800655a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800655c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	4b56      	ldr	r3, [pc, #344]	; (80066c8 <ETH_SetMACConfig+0x22c>)
 800656e:	4013      	ands	r3, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	68f9      	ldr	r1, [r7, #12]
 8006576:	430b      	orrs	r3, r1
 8006578:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006586:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006588:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006590:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006592:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800659a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800659c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	d102      	bne.n	80065ae <ETH_SetMACConfig+0x112>
 80065a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065ac:	e000      	b.n	80065b0 <ETH_SetMACConfig+0x114>
 80065ae:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80065b0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	4b42      	ldr	r3, [pc, #264]	; (80066cc <ETH_SetMACConfig+0x230>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	68f9      	ldr	r1, [r7, #12]
 80065ca:	430b      	orrs	r3, r1
 80065cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <ETH_SetMACConfig+0x234>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	68f9      	ldr	r1, [r7, #12]
 80065ee:	430b      	orrs	r3, r1
 80065f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80065f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80065fe:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006606:	2a00      	cmp	r2, #0
 8006608:	d101      	bne.n	800660e <ETH_SetMACConfig+0x172>
 800660a:	2280      	movs	r2, #128	; 0x80
 800660c:	e000      	b.n	8006610 <ETH_SetMACConfig+0x174>
 800660e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006610:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006616:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006622:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006626:	4013      	ands	r3, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	68f9      	ldr	r1, [r7, #12]
 800662e:	430b      	orrs	r3, r1
 8006630:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006638:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006640:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f023 0103 	bic.w	r1, r3, #3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	430a      	orrs	r2, r1
 800665a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006666:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006682:	2a00      	cmp	r2, #0
 8006684:	d101      	bne.n	800668a <ETH_SetMACConfig+0x1ee>
 8006686:	2240      	movs	r2, #64	; 0x40
 8006688:	e000      	b.n	800668c <ETH_SetMACConfig+0x1f0>
 800668a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800668c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006694:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006696:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800669e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80066ac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80066bc:	bf00      	nop
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	00048083 	.word	0x00048083
 80066cc:	c0f88000 	.word	0xc0f88000
 80066d0:	fffffef0 	.word	0xfffffef0

080066d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4b38      	ldr	r3, [pc, #224]	; (80067cc <ETH_SetDMAConfig+0xf8>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	6809      	ldr	r1, [r1, #0]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80066fa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	791b      	ldrb	r3, [r3, #4]
 8006700:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006706:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	7b1b      	ldrb	r3, [r3, #12]
 800670c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	f241 0304 	movw	r3, #4100	; 0x1004
 800671a:	4413      	add	r3, r2
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <ETH_SetDMAConfig+0xfc>)
 8006720:	4013      	ands	r3, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6811      	ldr	r1, [r2, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	431a      	orrs	r2, r3
 800672a:	f241 0304 	movw	r3, #4100	; 0x1004
 800672e:	440b      	add	r3, r1
 8006730:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	7b5b      	ldrb	r3, [r3, #13]
 8006736:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b22      	ldr	r3, [pc, #136]	; (80067d4 <ETH_SetDMAConfig+0x100>)
 800674c:	4013      	ands	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6811      	ldr	r1, [r2, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	431a      	orrs	r2, r3
 8006756:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800675a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	7d1b      	ldrb	r3, [r3, #20]
 8006764:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006766:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	7f5b      	ldrb	r3, [r3, #29]
 800676c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	f241 1304 	movw	r3, #4356	; 0x1104
 800677a:	4413      	add	r3, r2
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <ETH_SetDMAConfig+0x104>)
 8006780:	4013      	ands	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6811      	ldr	r1, [r2, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	431a      	orrs	r2, r3
 800678a:	f241 1304 	movw	r3, #4356	; 0x1104
 800678e:	440b      	add	r3, r1
 8006790:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	7f1b      	ldrb	r3, [r3, #28]
 8006796:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	f241 1308 	movw	r3, #4360	; 0x1108
 80067a8:	4413      	add	r3, r2
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <ETH_SetDMAConfig+0x108>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6811      	ldr	r1, [r2, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80067bc:	440b      	add	r3, r1
 80067be:	601a      	str	r2, [r3, #0]
}
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	ffff87fd 	.word	0xffff87fd
 80067d0:	ffff2ffe 	.word	0xffff2ffe
 80067d4:	fffec000 	.word	0xfffec000
 80067d8:	ffc0efef 	.word	0xffc0efef
 80067dc:	7fc0ffff 	.word	0x7fc0ffff

080067e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b0a4      	sub	sp, #144	; 0x90
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80067ee:	2300      	movs	r3, #0
 80067f0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006810:	2300      	movs	r3, #0
 8006812:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800681c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006820:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006822:	2300      	movs	r3, #0
 8006824:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006828:	2300      	movs	r3, #0
 800682a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800682c:	2300      	movs	r3, #0
 800682e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006832:	2300      	movs	r3, #0
 8006834:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006838:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800683c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800683e:	2300      	movs	r3, #0
 8006840:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006844:	2300      	movs	r3, #0
 8006846:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800684e:	2300      	movs	r3, #0
 8006850:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006854:	2300      	movs	r3, #0
 8006856:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800685a:	2300      	movs	r3, #0
 800685c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800685e:	2300      	movs	r3, #0
 8006860:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006862:	2300      	movs	r3, #0
 8006864:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006866:	2300      	movs	r3, #0
 8006868:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800686c:	2300      	movs	r3, #0
 800686e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006878:	2320      	movs	r3, #32
 800687a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006884:	2300      	movs	r3, #0
 8006886:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800688a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006894:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006896:	2300      	movs	r3, #0
 8006898:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800689c:	2302      	movs	r3, #2
 800689e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80068ba:	2300      	movs	r3, #0
 80068bc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80068c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fde6 	bl	800649c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80068d4:	2301      	movs	r3, #1
 80068d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80068d8:	2300      	movs	r3, #0
 80068da:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80068e2:	2300      	movs	r3, #0
 80068e4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80068ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80068ee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80068f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80068f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8006900:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006906:	f107 0308 	add.w	r3, r7, #8
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff fee1 	bl	80066d4 <ETH_SetDMAConfig>
}
 8006912:	bf00      	nop
 8006914:	3790      	adds	r7, #144	; 0x90
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800692c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006934:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006936:	f004 f8d1 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 800693a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4a1e      	ldr	r2, [pc, #120]	; (80069b8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d908      	bls.n	8006956 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d804      	bhi.n	8006956 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e027      	b.n	80069a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a18      	ldr	r2, [pc, #96]	; (80069bc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d908      	bls.n	8006970 <ETH_MAC_MDIO_ClkConfig+0x54>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4a17      	ldr	r2, [pc, #92]	; (80069c0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d204      	bcs.n	8006970 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e01a      	b.n	80069a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4a13      	ldr	r2, [pc, #76]	; (80069c0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d303      	bcc.n	8006980 <ETH_MAC_MDIO_ClkConfig+0x64>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d911      	bls.n	80069a4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4a10      	ldr	r2, [pc, #64]	; (80069c4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d908      	bls.n	800699a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4a0f      	ldr	r2, [pc, #60]	; (80069c8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d804      	bhi.n	800699a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e005      	b.n	80069a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e000      	b.n	80069a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80069a4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	01312cff 	.word	0x01312cff
 80069bc:	02160ebf 	.word	0x02160ebf
 80069c0:	03938700 	.word	0x03938700
 80069c4:	05f5e0ff 	.word	0x05f5e0ff
 80069c8:	08f0d17f 	.word	0x08f0d17f

080069cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e01d      	b.n	8006a16 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68d9      	ldr	r1, [r3, #12]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4613      	mov	r3, r2
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	4413      	add	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	440b      	add	r3, r1
 80069ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2200      	movs	r2, #0
 80069f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2200      	movs	r2, #0
 8006a02:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	3206      	adds	r2, #6
 8006a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d9de      	bls.n	80069da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	f241 132c 	movw	r3, #4396	; 0x112c
 8006a2a:	4413      	add	r3, r2
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68d9      	ldr	r1, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	f241 1314 	movw	r3, #4372	; 0x1114
 8006a3c:	4413      	add	r3, r2
 8006a3e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006a4c:	601a      	str	r2, [r3, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e024      	b.n	8006ab2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6919      	ldr	r1, [r3, #16]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	440b      	add	r3, r1
 8006a78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3310      	adds	r3, #16
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d9d7      	bls.n	8006a68 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	f241 1330 	movw	r3, #4400	; 0x1130
 8006ade:	4413      	add	r3, r2
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6919      	ldr	r1, [r3, #16]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f241 131c 	movw	r3, #4380	; 0x111c
 8006af0:	4413      	add	r3, r2
 8006af2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	f241 1328 	movw	r3, #4392	; 0x1128
 8006b04:	4413      	add	r3, r2
 8006b06:	6019      	str	r1, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b089      	sub	sp, #36	; 0x24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b22:	4b89      	ldr	r3, [pc, #548]	; (8006d48 <HAL_GPIO_Init+0x234>)
 8006b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b26:	e194      	b.n	8006e52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	fa01 f303 	lsl.w	r3, r1, r3
 8006b34:	4013      	ands	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8186 	beq.w	8006e4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d005      	beq.n	8006b58 <HAL_GPIO_Init+0x44>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d130      	bne.n	8006bba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	2203      	movs	r2, #3
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b8e:	2201      	movs	r2, #1
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	fa02 f303 	lsl.w	r3, r2, r3
 8006b96:	43db      	mvns	r3, r3
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	f003 0201 	and.w	r2, r3, #1
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d017      	beq.n	8006bf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	43db      	mvns	r3, r3
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d123      	bne.n	8006c4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	08da      	lsrs	r2, r3, #3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3208      	adds	r2, #8
 8006c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	220f      	movs	r2, #15
 8006c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	4013      	ands	r3, r2
 8006c24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	08da      	lsrs	r2, r3, #3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3208      	adds	r2, #8
 8006c44:	69b9      	ldr	r1, [r7, #24]
 8006c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	2203      	movs	r2, #3
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f003 0203 	and.w	r2, r3, #3
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 80e0 	beq.w	8006e4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c8c:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <HAL_GPIO_Init+0x238>)
 8006c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c92:	4a2e      	ldr	r2, [pc, #184]	; (8006d4c <HAL_GPIO_Init+0x238>)
 8006c94:	f043 0302 	orr.w	r3, r3, #2
 8006c98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006c9c:	4b2b      	ldr	r3, [pc, #172]	; (8006d4c <HAL_GPIO_Init+0x238>)
 8006c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006caa:	4a29      	ldr	r2, [pc, #164]	; (8006d50 <HAL_GPIO_Init+0x23c>)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	089b      	lsrs	r3, r3, #2
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	220f      	movs	r2, #15
 8006cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a20      	ldr	r2, [pc, #128]	; (8006d54 <HAL_GPIO_Init+0x240>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d052      	beq.n	8006d7c <HAL_GPIO_Init+0x268>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	; (8006d58 <HAL_GPIO_Init+0x244>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d031      	beq.n	8006d42 <HAL_GPIO_Init+0x22e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <HAL_GPIO_Init+0x248>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d02b      	beq.n	8006d3e <HAL_GPIO_Init+0x22a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	; (8006d60 <HAL_GPIO_Init+0x24c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d025      	beq.n	8006d3a <HAL_GPIO_Init+0x226>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a1c      	ldr	r2, [pc, #112]	; (8006d64 <HAL_GPIO_Init+0x250>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d01f      	beq.n	8006d36 <HAL_GPIO_Init+0x222>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a1b      	ldr	r2, [pc, #108]	; (8006d68 <HAL_GPIO_Init+0x254>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d019      	beq.n	8006d32 <HAL_GPIO_Init+0x21e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a1a      	ldr	r2, [pc, #104]	; (8006d6c <HAL_GPIO_Init+0x258>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <HAL_GPIO_Init+0x21a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <HAL_GPIO_Init+0x25c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00d      	beq.n	8006d2a <HAL_GPIO_Init+0x216>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <HAL_GPIO_Init+0x260>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d007      	beq.n	8006d26 <HAL_GPIO_Init+0x212>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <HAL_GPIO_Init+0x264>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d101      	bne.n	8006d22 <HAL_GPIO_Init+0x20e>
 8006d1e:	2309      	movs	r3, #9
 8006d20:	e02d      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d22:	230a      	movs	r3, #10
 8006d24:	e02b      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d26:	2308      	movs	r3, #8
 8006d28:	e029      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d2a:	2307      	movs	r3, #7
 8006d2c:	e027      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d2e:	2306      	movs	r3, #6
 8006d30:	e025      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d32:	2305      	movs	r3, #5
 8006d34:	e023      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d36:	2304      	movs	r3, #4
 8006d38:	e021      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e01f      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e01d      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e01b      	b.n	8006d7e <HAL_GPIO_Init+0x26a>
 8006d46:	bf00      	nop
 8006d48:	58000080 	.word	0x58000080
 8006d4c:	58024400 	.word	0x58024400
 8006d50:	58000400 	.word	0x58000400
 8006d54:	58020000 	.word	0x58020000
 8006d58:	58020400 	.word	0x58020400
 8006d5c:	58020800 	.word	0x58020800
 8006d60:	58020c00 	.word	0x58020c00
 8006d64:	58021000 	.word	0x58021000
 8006d68:	58021400 	.word	0x58021400
 8006d6c:	58021800 	.word	0x58021800
 8006d70:	58021c00 	.word	0x58021c00
 8006d74:	58022000 	.word	0x58022000
 8006d78:	58022400 	.word	0x58022400
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	f002 0203 	and.w	r2, r2, #3
 8006d84:	0092      	lsls	r2, r2, #2
 8006d86:	4093      	lsls	r3, r2
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d8e:	4938      	ldr	r1, [pc, #224]	; (8006e70 <HAL_GPIO_Init+0x35c>)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	089b      	lsrs	r3, r3, #2
 8006d94:	3302      	adds	r3, #2
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	43db      	mvns	r3, r3
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4013      	ands	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	43db      	mvns	r3, r3
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	4013      	ands	r3, r2
 8006e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f47f ae63 	bne.w	8006b28 <HAL_GPIO_Init+0x14>
  }
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	3724      	adds	r7, #36	; 0x24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	58000400 	.word	0x58000400

08006e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	807b      	strh	r3, [r7, #2]
 8006e80:	4613      	mov	r3, r2
 8006e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e84:	787b      	ldrb	r3, [r7, #1]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e8a:	887a      	ldrh	r2, [r7, #2]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006e90:	e003      	b.n	8006e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006e92:	887b      	ldrh	r3, [r7, #2]
 8006e94:	041a      	lsls	r2, r3, #16
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	619a      	str	r2, [r3, #24]
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <HAL_HSEM_FastTake+0x2c>)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3320      	adds	r3, #32
 8006eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eba:	4a07      	ldr	r2, [pc, #28]	; (8006ed8 <HAL_HSEM_FastTake+0x30>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d101      	bne.n	8006ec4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	e000      	b.n	8006ec6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	58026400 	.word	0x58026400
 8006ed8:	80000300 	.word	0x80000300

08006edc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006ee6:	4906      	ldr	r1, [pc, #24]	; (8006f00 <HAL_HSEM_Release+0x24>)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	58026400 	.word	0x58026400

08006f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e07f      	b.n	8007016 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fa f85e 	bl	8000fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2224      	movs	r2, #36	; 0x24
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d107      	bne.n	8006f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f7a:	609a      	str	r2, [r3, #8]
 8006f7c:	e006      	b.n	8006f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d104      	bne.n	8006f9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6859      	ldr	r1, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <HAL_I2C_Init+0x11c>)
 8006faa:	430b      	orrs	r3, r1
 8006fac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69d9      	ldr	r1, [r3, #28]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	02008000 	.word	0x02008000

08007024 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af02      	add	r7, sp, #8
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	607a      	str	r2, [r7, #4]
 800702e:	461a      	mov	r2, r3
 8007030:	460b      	mov	r3, r1
 8007032:	817b      	strh	r3, [r7, #10]
 8007034:	4613      	mov	r3, r2
 8007036:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b20      	cmp	r3, #32
 8007042:	f040 80da 	bne.w	80071fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_I2C_Master_Transmit+0x30>
 8007050:	2302      	movs	r3, #2
 8007052:	e0d3      	b.n	80071fc <HAL_I2C_Master_Transmit+0x1d8>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800705c:	f7fc f99c 	bl	8003398 <HAL_GetTick>
 8007060:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2319      	movs	r3, #25
 8007068:	2201      	movs	r2, #1
 800706a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f002 f877 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e0be      	b.n	80071fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2221      	movs	r2, #33	; 0x21
 8007082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2210      	movs	r2, #16
 800708a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	893a      	ldrh	r2, [r7, #8]
 800709e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2bff      	cmp	r3, #255	; 0xff
 80070ae:	d90e      	bls.n	80070ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	22ff      	movs	r2, #255	; 0xff
 80070b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	8979      	ldrh	r1, [r7, #10]
 80070be:	4b51      	ldr	r3, [pc, #324]	; (8007204 <HAL_I2C_Master_Transmit+0x1e0>)
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f002 fa6e 	bl	80095a8 <I2C_TransferConfig>
 80070cc:	e06c      	b.n	80071a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	8979      	ldrh	r1, [r7, #10]
 80070e0:	4b48      	ldr	r3, [pc, #288]	; (8007204 <HAL_I2C_Master_Transmit+0x1e0>)
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f002 fa5d 	bl	80095a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80070ee:	e05b      	b.n	80071a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	6a39      	ldr	r1, [r7, #32]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f002 f874 	bl	80091e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e07b      	b.n	80071fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d034      	beq.n	80071a8 <HAL_I2C_Master_Transmit+0x184>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d130      	bne.n	80071a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	2200      	movs	r2, #0
 800714e:	2180      	movs	r1, #128	; 0x80
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f002 f806 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e04d      	b.n	80071fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	2bff      	cmp	r3, #255	; 0xff
 8007168:	d90e      	bls.n	8007188 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	22ff      	movs	r2, #255	; 0xff
 800716e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007174:	b2da      	uxtb	r2, r3
 8007176:	8979      	ldrh	r1, [r7, #10]
 8007178:	2300      	movs	r3, #0
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f002 fa11 	bl	80095a8 <I2C_TransferConfig>
 8007186:	e00f      	b.n	80071a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007196:	b2da      	uxtb	r2, r3
 8007198:	8979      	ldrh	r1, [r7, #10]
 800719a:	2300      	movs	r3, #0
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f002 fa00 	bl	80095a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d19e      	bne.n	80070f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	6a39      	ldr	r1, [r7, #32]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f002 f853 	bl	8009262 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e01a      	b.n	80071fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2220      	movs	r2, #32
 80071cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6859      	ldr	r1, [r3, #4]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <HAL_I2C_Master_Transmit+0x1e4>)
 80071da:	400b      	ands	r3, r1
 80071dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80071fa:	2302      	movs	r3, #2
  }
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	80002000 	.word	0x80002000
 8007208:	fe00e800 	.word	0xfe00e800

0800720c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af02      	add	r7, sp, #8
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	461a      	mov	r2, r3
 8007218:	460b      	mov	r3, r1
 800721a:	817b      	strh	r3, [r7, #10]
 800721c:	4613      	mov	r3, r2
 800721e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b20      	cmp	r3, #32
 800722a:	f040 80db 	bne.w	80073e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_I2C_Master_Receive+0x30>
 8007238:	2302      	movs	r3, #2
 800723a:	e0d4      	b.n	80073e6 <HAL_I2C_Master_Receive+0x1da>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007244:	f7fc f8a8 	bl	8003398 <HAL_GetTick>
 8007248:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	2319      	movs	r3, #25
 8007250:	2201      	movs	r2, #1
 8007252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f001 ff83 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e0bf      	b.n	80073e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2222      	movs	r2, #34	; 0x22
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2210      	movs	r2, #16
 8007272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	893a      	ldrh	r2, [r7, #8]
 8007286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007292:	b29b      	uxth	r3, r3
 8007294:	2bff      	cmp	r3, #255	; 0xff
 8007296:	d90e      	bls.n	80072b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	22ff      	movs	r2, #255	; 0xff
 800729c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	8979      	ldrh	r1, [r7, #10]
 80072a6:	4b52      	ldr	r3, [pc, #328]	; (80073f0 <HAL_I2C_Master_Receive+0x1e4>)
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f002 f97a 	bl	80095a8 <I2C_TransferConfig>
 80072b4:	e06d      	b.n	8007392 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	8979      	ldrh	r1, [r7, #10]
 80072c8:	4b49      	ldr	r3, [pc, #292]	; (80073f0 <HAL_I2C_Master_Receive+0x1e4>)
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f002 f969 	bl	80095a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80072d6:	e05c      	b.n	8007392 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	6a39      	ldr	r1, [r7, #32]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f001 fffd 	bl	80092dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e07c      	b.n	80073e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d034      	beq.n	8007392 <HAL_I2C_Master_Receive+0x186>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732c:	2b00      	cmp	r3, #0
 800732e:	d130      	bne.n	8007392 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	2200      	movs	r2, #0
 8007338:	2180      	movs	r1, #128	; 0x80
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f001 ff11 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e04d      	b.n	80073e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734e:	b29b      	uxth	r3, r3
 8007350:	2bff      	cmp	r3, #255	; 0xff
 8007352:	d90e      	bls.n	8007372 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	22ff      	movs	r2, #255	; 0xff
 8007358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	b2da      	uxtb	r2, r3
 8007360:	8979      	ldrh	r1, [r7, #10]
 8007362:	2300      	movs	r3, #0
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f002 f91c 	bl	80095a8 <I2C_TransferConfig>
 8007370:	e00f      	b.n	8007392 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007380:	b2da      	uxtb	r2, r3
 8007382:	8979      	ldrh	r1, [r7, #10]
 8007384:	2300      	movs	r3, #0
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f002 f90b 	bl	80095a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d19d      	bne.n	80072d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	6a39      	ldr	r1, [r7, #32]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f001 ff5e 	bl	8009262 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e01a      	b.n	80073e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2220      	movs	r2, #32
 80073b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6859      	ldr	r1, [r3, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <HAL_I2C_Master_Receive+0x1e8>)
 80073c4:	400b      	ands	r3, r1
 80073c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e000      	b.n	80073e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80073e4:	2302      	movs	r3, #2
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	80002400 	.word	0x80002400
 80073f4:	fe00e800 	.word	0xfe00e800

080073f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	4608      	mov	r0, r1
 8007402:	4611      	mov	r1, r2
 8007404:	461a      	mov	r2, r3
 8007406:	4603      	mov	r3, r0
 8007408:	817b      	strh	r3, [r7, #10]
 800740a:	460b      	mov	r3, r1
 800740c:	813b      	strh	r3, [r7, #8]
 800740e:	4613      	mov	r3, r2
 8007410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b20      	cmp	r3, #32
 800741c:	f040 80f9 	bne.w	8007612 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_I2C_Mem_Write+0x34>
 8007426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007432:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0ed      	b.n	8007614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_I2C_Mem_Write+0x4e>
 8007442:	2302      	movs	r3, #2
 8007444:	e0e6      	b.n	8007614 <HAL_I2C_Mem_Write+0x21c>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800744e:	f7fb ffa3 	bl	8003398 <HAL_GetTick>
 8007452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	2319      	movs	r3, #25
 800745a:	2201      	movs	r2, #1
 800745c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f001 fe7e 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e0d1      	b.n	8007614 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2221      	movs	r2, #33	; 0x21
 8007474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2240      	movs	r2, #64	; 0x40
 800747c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a3a      	ldr	r2, [r7, #32]
 800748a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007498:	88f8      	ldrh	r0, [r7, #6]
 800749a:	893a      	ldrh	r2, [r7, #8]
 800749c:	8979      	ldrh	r1, [r7, #10]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	4603      	mov	r3, r0
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 f841 	bl	8008530 <I2C_RequestMemoryWrite>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0a9      	b.n	8007614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2bff      	cmp	r3, #255	; 0xff
 80074c8:	d90e      	bls.n	80074e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	22ff      	movs	r2, #255	; 0xff
 80074ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	8979      	ldrh	r1, [r7, #10]
 80074d8:	2300      	movs	r3, #0
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f002 f861 	bl	80095a8 <I2C_TransferConfig>
 80074e6:	e00f      	b.n	8007508 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	8979      	ldrh	r1, [r7, #10]
 80074fa:	2300      	movs	r3, #0
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f002 f850 	bl	80095a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f001 fe68 	bl	80091e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e07b      	b.n	8007614 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d034      	beq.n	80075c0 <HAL_I2C_Mem_Write+0x1c8>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755a:	2b00      	cmp	r3, #0
 800755c:	d130      	bne.n	80075c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	2200      	movs	r2, #0
 8007566:	2180      	movs	r1, #128	; 0x80
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f001 fdfa 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e04d      	b.n	8007614 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	2bff      	cmp	r3, #255	; 0xff
 8007580:	d90e      	bls.n	80075a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	22ff      	movs	r2, #255	; 0xff
 8007586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758c:	b2da      	uxtb	r2, r3
 800758e:	8979      	ldrh	r1, [r7, #10]
 8007590:	2300      	movs	r3, #0
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f002 f805 	bl	80095a8 <I2C_TransferConfig>
 800759e:	e00f      	b.n	80075c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	8979      	ldrh	r1, [r7, #10]
 80075b2:	2300      	movs	r3, #0
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f001 fff4 	bl	80095a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d19e      	bne.n	8007508 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 fe47 	bl	8009262 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e01a      	b.n	8007614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2220      	movs	r2, #32
 80075e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6859      	ldr	r1, [r3, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <HAL_I2C_Mem_Write+0x224>)
 80075f2:	400b      	ands	r3, r1
 80075f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	e000      	b.n	8007614 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007612:	2302      	movs	r3, #2
  }
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	fe00e800 	.word	0xfe00e800

08007620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	4608      	mov	r0, r1
 800762a:	4611      	mov	r1, r2
 800762c:	461a      	mov	r2, r3
 800762e:	4603      	mov	r3, r0
 8007630:	817b      	strh	r3, [r7, #10]
 8007632:	460b      	mov	r3, r1
 8007634:	813b      	strh	r3, [r7, #8]
 8007636:	4613      	mov	r3, r2
 8007638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b20      	cmp	r3, #32
 8007644:	f040 80fd 	bne.w	8007842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <HAL_I2C_Mem_Read+0x34>
 800764e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	d105      	bne.n	8007660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800765a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0f1      	b.n	8007844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_I2C_Mem_Read+0x4e>
 800766a:	2302      	movs	r3, #2
 800766c:	e0ea      	b.n	8007844 <HAL_I2C_Mem_Read+0x224>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007676:	f7fb fe8f 	bl	8003398 <HAL_GetTick>
 800767a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	2319      	movs	r3, #25
 8007682:	2201      	movs	r2, #1
 8007684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f001 fd6a 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e0d5      	b.n	8007844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2222      	movs	r2, #34	; 0x22
 800769c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2240      	movs	r2, #64	; 0x40
 80076a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a3a      	ldr	r2, [r7, #32]
 80076b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076c0:	88f8      	ldrh	r0, [r7, #6]
 80076c2:	893a      	ldrh	r2, [r7, #8]
 80076c4:	8979      	ldrh	r1, [r7, #10]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	4603      	mov	r3, r0
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 ff81 	bl	80085d8 <I2C_RequestMemoryRead>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e0ad      	b.n	8007844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2bff      	cmp	r3, #255	; 0xff
 80076f0:	d90e      	bls.n	8007710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	22ff      	movs	r2, #255	; 0xff
 80076f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	8979      	ldrh	r1, [r7, #10]
 8007700:	4b52      	ldr	r3, [pc, #328]	; (800784c <HAL_I2C_Mem_Read+0x22c>)
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f001 ff4d 	bl	80095a8 <I2C_TransferConfig>
 800770e:	e00f      	b.n	8007730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771e:	b2da      	uxtb	r2, r3
 8007720:	8979      	ldrh	r1, [r7, #10]
 8007722:	4b4a      	ldr	r3, [pc, #296]	; (800784c <HAL_I2C_Mem_Read+0x22c>)
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f001 ff3c 	bl	80095a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	2200      	movs	r2, #0
 8007738:	2104      	movs	r1, #4
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f001 fd11 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e07c      	b.n	8007844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d034      	beq.n	80077f0 <HAL_I2C_Mem_Read+0x1d0>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	d130      	bne.n	80077f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	2200      	movs	r2, #0
 8007796:	2180      	movs	r1, #128	; 0x80
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f001 fce2 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e04d      	b.n	8007844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2bff      	cmp	r3, #255	; 0xff
 80077b0:	d90e      	bls.n	80077d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	22ff      	movs	r2, #255	; 0xff
 80077b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	8979      	ldrh	r1, [r7, #10]
 80077c0:	2300      	movs	r3, #0
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f001 feed 	bl	80095a8 <I2C_TransferConfig>
 80077ce:	e00f      	b.n	80077f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	8979      	ldrh	r1, [r7, #10]
 80077e2:	2300      	movs	r3, #0
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f001 fedc 	bl	80095a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d19a      	bne.n	8007730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 fd2f 	bl	8009262 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e01a      	b.n	8007844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2220      	movs	r2, #32
 8007814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6859      	ldr	r1, [r3, #4]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <HAL_I2C_Mem_Read+0x230>)
 8007822:	400b      	ands	r3, r1
 8007824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	e000      	b.n	8007844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007842:	2302      	movs	r3, #2
  }
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	80002400 	.word	0x80002400
 8007850:	fe00e800 	.word	0xfe00e800

08007854 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4603      	mov	r3, r0
 8007864:	817b      	strh	r3, [r7, #10]
 8007866:	460b      	mov	r3, r1
 8007868:	813b      	strh	r3, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b20      	cmp	r3, #32
 8007878:	d176      	bne.n	8007968 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_I2C_Mem_Read_IT+0x32>
 8007880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e06b      	b.n	800796a <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800789c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078a0:	d101      	bne.n	80078a6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80078a2:	2302      	movs	r3, #2
 80078a4:	e061      	b.n	800796a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_I2C_Mem_Read_IT+0x60>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e05a      	b.n	800796a <HAL_I2C_Mem_Read_IT+0x116>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078bc:	f7fb fd6c 	bl	8003398 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2222      	movs	r2, #34	; 0x22
 80078c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2240      	movs	r2, #64	; 0x40
 80078ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a3a      	ldr	r2, [r7, #32]
 80078dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4a23      	ldr	r2, [pc, #140]	; (8007974 <HAL_I2C_Mem_Read_IT+0x120>)
 80078e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4a22      	ldr	r2, [pc, #136]	; (8007978 <HAL_I2C_Mem_Read_IT+0x124>)
 80078ee:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2bff      	cmp	r3, #255	; 0xff
 80078f8:	d906      	bls.n	8007908 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	22ff      	movs	r2, #255	; 0xff
 80078fe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e007      	b.n	8007918 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007916:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007918:	88f8      	ldrh	r0, [r7, #6]
 800791a:	893a      	ldrh	r2, [r7, #8]
 800791c:	8979      	ldrh	r1, [r7, #10]
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	2319      	movs	r3, #25
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	4603      	mov	r3, r0
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 fe55 	bl	80085d8 <I2C_RequestMemoryRead>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e014      	b.n	800796a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007944:	b2da      	uxtb	r2, r3
 8007946:	8979      	ldrh	r1, [r7, #10]
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <HAL_I2C_Mem_Read_IT+0x128>)
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f001 fe2a 	bl	80095a8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800795c:	2102      	movs	r1, #2
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f001 fe54 	bl	800960c <I2C_Enable_IRQ>

    return HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	e000      	b.n	800796a <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007968:	2302      	movs	r3, #2
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	ffff0000 	.word	0xffff0000
 8007978:	08007b33 	.word	0x08007b33
 800797c:	80002400 	.word	0x80002400

08007980 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
  }
}
 80079ac:	bf00      	nop
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d010      	beq.n	80079fa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	09db      	lsrs	r3, r3, #7
 80079dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e8:	f043 0201 	orr.w	r2, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	0a9b      	lsrs	r3, r3, #10
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d010      	beq.n	8007a28 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	09db      	lsrs	r3, r3, #7
 8007a0a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	f043 0208 	orr.w	r2, r3, #8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a26:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	0a5b      	lsrs	r3, r3, #9
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d010      	beq.n	8007a56 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	09db      	lsrs	r3, r3, #7
 8007a38:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a44:	f043 0202 	orr.w	r2, r3, #2
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a54:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f003 030b 	and.w	r3, r3, #11
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fa41 	bl	8008ef0 <I2C_ITError>
  }
}
 8007a6e:	bf00      	nop
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b088      	sub	sp, #32
 8007b36:	af02      	add	r7, sp, #8
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <I2C_Master_ISR_IT+0x1e>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e114      	b.n	8007d7a <I2C_Master_ISR_IT+0x248>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	091b      	lsrs	r3, r3, #4
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d013      	beq.n	8007b8c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	091b      	lsrs	r3, r3, #4
 8007b68:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00d      	beq.n	8007b8c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2210      	movs	r2, #16
 8007b76:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7c:	f043 0204 	orr.w	r2, r3, #4
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f001 faaa 	bl	80090de <I2C_Flush_TXDR>
 8007b8a:	e0e1      	b.n	8007d50 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	089b      	lsrs	r3, r3, #2
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d023      	beq.n	8007be0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	089b      	lsrs	r3, r3, #2
 8007b9c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01d      	beq.n	8007be0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f023 0304 	bic.w	r3, r3, #4
 8007baa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bde:	e0b7      	b.n	8007d50 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	085b      	lsrs	r3, r3, #1
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01e      	beq.n	8007c2a <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	085b      	lsrs	r3, r3, #1
 8007bf0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d018      	beq.n	8007c2a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	3b01      	subs	r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c28:	e092      	b.n	8007d50 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	09db      	lsrs	r3, r3, #7
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d05d      	beq.n	8007cf2 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	099b      	lsrs	r3, r3, #6
 8007c3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d057      	beq.n	8007cf2 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d040      	beq.n	8007cce <I2C_Master_ISR_IT+0x19c>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d13c      	bne.n	8007cce <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c60:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2bff      	cmp	r3, #255	; 0xff
 8007c6a:	d90e      	bls.n	8007c8a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	22ff      	movs	r2, #255	; 0xff
 8007c70:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	8a79      	ldrh	r1, [r7, #18]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f001 fc90 	bl	80095a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c88:	e032      	b.n	8007cf0 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c9c:	d00b      	beq.n	8007cb6 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	8a79      	ldrh	r1, [r7, #18]
 8007caa:	2000      	movs	r0, #0
 8007cac:	9000      	str	r0, [sp, #0]
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f001 fc7a 	bl	80095a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cb4:	e01c      	b.n	8007cf0 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	8a79      	ldrh	r1, [r7, #18]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f001 fc6e 	bl	80095a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ccc:	e010      	b.n	8007cf0 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cdc:	d003      	beq.n	8007ce6 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fd52 	bl	8008788 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ce4:	e034      	b.n	8007d50 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ce6:	2140      	movs	r1, #64	; 0x40
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f001 f901 	bl	8008ef0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cee:	e02f      	b.n	8007d50 <I2C_Master_ISR_IT+0x21e>
 8007cf0:	e02e      	b.n	8007d50 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	099b      	lsrs	r3, r3, #6
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d028      	beq.n	8007d50 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	099b      	lsrs	r3, r3, #6
 8007d02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d022      	beq.n	8007d50 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d119      	bne.n	8007d48 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d22:	d015      	beq.n	8007d50 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d2c:	d108      	bne.n	8007d40 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d3c:	605a      	str	r2, [r3, #4]
 8007d3e:	e007      	b.n	8007d50 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 fd21 	bl	8008788 <I2C_ITMasterSeqCplt>
 8007d46:	e003      	b.n	8007d50 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007d48:	2140      	movs	r1, #64	; 0x40
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f001 f8d0 	bl	8008ef0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d009      	beq.n	8007d70 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007d68:	6979      	ldr	r1, [r7, #20]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fda8 	bl	80088c0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b086      	sub	sp, #24
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <I2C_Slave_ISR_IT+0x24>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e0ec      	b.n	8007f80 <I2C_Slave_ISR_IT+0x1fe>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007dc6:	6939      	ldr	r1, [r7, #16]
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fe43 	bl	8008a54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d04d      	beq.n	8007e76 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	091b      	lsrs	r3, r3, #4
 8007dde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d047      	beq.n	8007e76 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d128      	bne.n	8007e42 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b28      	cmp	r3, #40	; 0x28
 8007dfa:	d108      	bne.n	8007e0e <I2C_Slave_ISR_IT+0x8c>
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e02:	d104      	bne.n	8007e0e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e04:	6939      	ldr	r1, [r7, #16]
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f001 f81c 	bl	8008e44 <I2C_ITListenCplt>
 8007e0c:	e032      	b.n	8007e74 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b29      	cmp	r3, #41	; 0x29
 8007e18:	d10e      	bne.n	8007e38 <I2C_Slave_ISR_IT+0xb6>
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e20:	d00a      	beq.n	8007e38 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2210      	movs	r2, #16
 8007e28:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f001 f957 	bl	80090de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fce6 	bl	8008802 <I2C_ITSlaveSeqCplt>
 8007e36:	e01d      	b.n	8007e74 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2210      	movs	r2, #16
 8007e3e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e40:	e096      	b.n	8007f70 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2210      	movs	r2, #16
 8007e48:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4e:	f043 0204 	orr.w	r2, r3, #4
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d004      	beq.n	8007e66 <I2C_Slave_ISR_IT+0xe4>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e62:	f040 8085 	bne.w	8007f70 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f001 f83f 	bl	8008ef0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007e72:	e07d      	b.n	8007f70 <I2C_Slave_ISR_IT+0x1ee>
 8007e74:	e07c      	b.n	8007f70 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	089b      	lsrs	r3, r3, #2
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d030      	beq.n	8007ee4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	089b      	lsrs	r3, r3, #2
 8007e86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d02a      	beq.n	8007ee4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d018      	beq.n	8007eca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d14f      	bne.n	8007f74 <I2C_Slave_ISR_IT+0x1f2>
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007eda:	d04b      	beq.n	8007f74 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fc90 	bl	8008802 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ee2:	e047      	b.n	8007f74 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	08db      	lsrs	r3, r3, #3
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	08db      	lsrs	r3, r3, #3
 8007ef4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d004      	beq.n	8007f06 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007efc:	6939      	ldr	r1, [r7, #16]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fbbe 	bl	8008680 <I2C_ITAddrCplt>
 8007f04:	e037      	b.n	8007f76 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d031      	beq.n	8007f76 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	085b      	lsrs	r3, r3, #1
 8007f16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d02b      	beq.n	8007f76 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d018      	beq.n	8007f5a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	781a      	ldrb	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	3b01      	subs	r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	851a      	strh	r2, [r3, #40]	; 0x28
 8007f58:	e00d      	b.n	8007f76 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f60:	d002      	beq.n	8007f68 <I2C_Slave_ISR_IT+0x1e6>
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 fc4a 	bl	8008802 <I2C_ITSlaveSeqCplt>
 8007f6e:	e002      	b.n	8007f76 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007f70:	bf00      	nop
 8007f72:	e000      	b.n	8007f76 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007f74:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <I2C_Master_ISR_DMA+0x1a>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e0e1      	b.n	8008166 <I2C_Master_ISR_DMA+0x1de>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	091b      	lsrs	r3, r3, #4
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d017      	beq.n	8007fe6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	091b      	lsrs	r3, r3, #4
 8007fba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d011      	beq.n	8007fe6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	f043 0204 	orr.w	r2, r3, #4
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007fd6:	2120      	movs	r1, #32
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f001 fb17 	bl	800960c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f001 f87d 	bl	80090de <I2C_Flush_TXDR>
 8007fe4:	e0ba      	b.n	800815c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	09db      	lsrs	r3, r3, #7
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d072      	beq.n	80080d8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	099b      	lsrs	r3, r3, #6
 8007ff6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d06c      	beq.n	80080d8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800800c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008012:	b29b      	uxth	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d04e      	beq.n	80080b6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008024:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802a:	b29b      	uxth	r3, r3
 800802c:	2bff      	cmp	r3, #255	; 0xff
 800802e:	d906      	bls.n	800803e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	22ff      	movs	r2, #255	; 0xff
 8008034:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008036:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	e010      	b.n	8008060 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008042:	b29a      	uxth	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008050:	d003      	beq.n	800805a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e002      	b.n	8008060 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800805a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800805e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008064:	b2da      	uxtb	r2, r3
 8008066:	8a79      	ldrh	r1, [r7, #18]
 8008068:	2300      	movs	r3, #0
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f001 fa9a 	bl	80095a8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008078:	b29a      	uxth	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b22      	cmp	r3, #34	; 0x22
 8008090:	d108      	bne.n	80080a4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80080a2:	e05b      	b.n	800815c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080b2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80080b4:	e052      	b.n	800815c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080c4:	d003      	beq.n	80080ce <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 fb5e 	bl	8008788 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80080cc:	e046      	b.n	800815c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80080ce:	2140      	movs	r1, #64	; 0x40
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 ff0d 	bl	8008ef0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80080d6:	e041      	b.n	800815c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	099b      	lsrs	r3, r3, #6
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d029      	beq.n	8008138 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d023      	beq.n	8008138 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d119      	bne.n	800812e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008108:	d027      	beq.n	800815a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008112:	d108      	bne.n	8008126 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008122:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008124:	e019      	b.n	800815a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fb2e 	bl	8008788 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800812c:	e015      	b.n	800815a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800812e:	2140      	movs	r1, #64	; 0x40
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fedd 	bl	8008ef0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008136:	e010      	b.n	800815a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	095b      	lsrs	r3, r3, #5
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	095b      	lsrs	r3, r3, #5
 8008148:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 fbb4 	bl	80088c0 <I2C_ITMasterCplt>
 8008158:	e000      	b.n	800815c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800815a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <I2C_Slave_ISR_DMA+0x24>
 8008190:	2302      	movs	r3, #2
 8008192:	e1c8      	b.n	8008526 <I2C_Slave_ISR_DMA+0x3b6>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fc4c 	bl	8008a54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	091b      	lsrs	r3, r3, #4
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8199 	beq.w	80084fc <I2C_Slave_ISR_DMA+0x38c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	091b      	lsrs	r3, r3, #4
 80081ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 8192 	beq.w	80084fc <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	0b9b      	lsrs	r3, r3, #14
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	0bdb      	lsrs	r3, r3, #15
 80081e8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 817e 	beq.w	80084ee <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d07c      	beq.n	80082f4 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	0bdb      	lsrs	r3, r3, #15
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d076      	beq.n	80082f4 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a8d      	ldr	r2, [pc, #564]	; (8008444 <I2C_Slave_ISR_DMA+0x2d4>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d059      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a8b      	ldr	r2, [pc, #556]	; (8008448 <I2C_Slave_ISR_DMA+0x2d8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d053      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a89      	ldr	r2, [pc, #548]	; (800844c <I2C_Slave_ISR_DMA+0x2dc>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d04d      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a87      	ldr	r2, [pc, #540]	; (8008450 <I2C_Slave_ISR_DMA+0x2e0>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d047      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a85      	ldr	r2, [pc, #532]	; (8008454 <I2C_Slave_ISR_DMA+0x2e4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d041      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a83      	ldr	r2, [pc, #524]	; (8008458 <I2C_Slave_ISR_DMA+0x2e8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d03b      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a81      	ldr	r2, [pc, #516]	; (800845c <I2C_Slave_ISR_DMA+0x2ec>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d035      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a7f      	ldr	r2, [pc, #508]	; (8008460 <I2C_Slave_ISR_DMA+0x2f0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d02f      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a7d      	ldr	r2, [pc, #500]	; (8008464 <I2C_Slave_ISR_DMA+0x2f4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d029      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a7b      	ldr	r2, [pc, #492]	; (8008468 <I2C_Slave_ISR_DMA+0x2f8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d023      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a79      	ldr	r2, [pc, #484]	; (800846c <I2C_Slave_ISR_DMA+0x2fc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d01d      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a77      	ldr	r2, [pc, #476]	; (8008470 <I2C_Slave_ISR_DMA+0x300>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d017      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a75      	ldr	r2, [pc, #468]	; (8008474 <I2C_Slave_ISR_DMA+0x304>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d011      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a73      	ldr	r2, [pc, #460]	; (8008478 <I2C_Slave_ISR_DMA+0x308>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00b      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a71      	ldr	r2, [pc, #452]	; (800847c <I2C_Slave_ISR_DMA+0x30c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d005      	beq.n	80082c6 <I2C_Slave_ISR_DMA+0x156>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a6f      	ldr	r2, [pc, #444]	; (8008480 <I2C_Slave_ISR_DMA+0x310>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d109      	bne.n	80082da <I2C_Slave_ISR_DMA+0x16a>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bf0c      	ite	eq
 80082d2:	2301      	moveq	r3, #1
 80082d4:	2300      	movne	r3, #0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	e008      	b.n	80082ec <I2C_Slave_ISR_DMA+0x17c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bf0c      	ite	eq
 80082e6:	2301      	moveq	r3, #1
 80082e8:	2300      	movne	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80082f0:	2301      	movs	r3, #1
 80082f2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d07c      	beq.n	80083f6 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	0b9b      	lsrs	r3, r3, #14
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d076      	beq.n	80083f6 <I2C_Slave_ISR_DMA+0x286>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a4d      	ldr	r2, [pc, #308]	; (8008444 <I2C_Slave_ISR_DMA+0x2d4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d059      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a4b      	ldr	r2, [pc, #300]	; (8008448 <I2C_Slave_ISR_DMA+0x2d8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d053      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a49      	ldr	r2, [pc, #292]	; (800844c <I2C_Slave_ISR_DMA+0x2dc>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d04d      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a47      	ldr	r2, [pc, #284]	; (8008450 <I2C_Slave_ISR_DMA+0x2e0>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d047      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a45      	ldr	r2, [pc, #276]	; (8008454 <I2C_Slave_ISR_DMA+0x2e4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d041      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a43      	ldr	r2, [pc, #268]	; (8008458 <I2C_Slave_ISR_DMA+0x2e8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d03b      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a41      	ldr	r2, [pc, #260]	; (800845c <I2C_Slave_ISR_DMA+0x2ec>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d035      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a3f      	ldr	r2, [pc, #252]	; (8008460 <I2C_Slave_ISR_DMA+0x2f0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d02f      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a3d      	ldr	r2, [pc, #244]	; (8008464 <I2C_Slave_ISR_DMA+0x2f4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d029      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a3b      	ldr	r2, [pc, #236]	; (8008468 <I2C_Slave_ISR_DMA+0x2f8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d023      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a39      	ldr	r2, [pc, #228]	; (800846c <I2C_Slave_ISR_DMA+0x2fc>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d01d      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a37      	ldr	r2, [pc, #220]	; (8008470 <I2C_Slave_ISR_DMA+0x300>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d017      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a35      	ldr	r2, [pc, #212]	; (8008474 <I2C_Slave_ISR_DMA+0x304>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d011      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a33      	ldr	r2, [pc, #204]	; (8008478 <I2C_Slave_ISR_DMA+0x308>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a31      	ldr	r2, [pc, #196]	; (800847c <I2C_Slave_ISR_DMA+0x30c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d005      	beq.n	80083c8 <I2C_Slave_ISR_DMA+0x258>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a2f      	ldr	r2, [pc, #188]	; (8008480 <I2C_Slave_ISR_DMA+0x310>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d109      	bne.n	80083dc <I2C_Slave_ISR_DMA+0x26c>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bf0c      	ite	eq
 80083d4:	2301      	moveq	r3, #1
 80083d6:	2300      	movne	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	e008      	b.n	80083ee <I2C_Slave_ISR_DMA+0x27e>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf0c      	ite	eq
 80083e8:	2301      	moveq	r3, #1
 80083ea:	2300      	movne	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80083f2:	2301      	movs	r3, #1
 80083f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d148      	bne.n	800848e <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b28      	cmp	r3, #40	; 0x28
 8008406:	d108      	bne.n	800841a <I2C_Slave_ISR_DMA+0x2aa>
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800840e:	d104      	bne.n	800841a <I2C_Slave_ISR_DMA+0x2aa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 fd16 	bl	8008e44 <I2C_ITListenCplt>
 8008418:	e068      	b.n	80084ec <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b29      	cmp	r3, #41	; 0x29
 8008424:	d12e      	bne.n	8008484 <I2C_Slave_ISR_DMA+0x314>
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800842c:	d02a      	beq.n	8008484 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2210      	movs	r2, #16
 8008434:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fe51 	bl	80090de <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f9e0 	bl	8008802 <I2C_ITSlaveSeqCplt>
 8008442:	e053      	b.n	80084ec <I2C_Slave_ISR_DMA+0x37c>
 8008444:	40020010 	.word	0x40020010
 8008448:	40020028 	.word	0x40020028
 800844c:	40020040 	.word	0x40020040
 8008450:	40020058 	.word	0x40020058
 8008454:	40020070 	.word	0x40020070
 8008458:	40020088 	.word	0x40020088
 800845c:	400200a0 	.word	0x400200a0
 8008460:	400200b8 	.word	0x400200b8
 8008464:	40020410 	.word	0x40020410
 8008468:	40020428 	.word	0x40020428
 800846c:	40020440 	.word	0x40020440
 8008470:	40020458 	.word	0x40020458
 8008474:	40020470 	.word	0x40020470
 8008478:	40020488 	.word	0x40020488
 800847c:	400204a0 	.word	0x400204a0
 8008480:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2210      	movs	r2, #16
 800848a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800848c:	e034      	b.n	80084f8 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2210      	movs	r2, #16
 8008494:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849a:	f043 0204 	orr.w	r2, r3, #4
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084a8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <I2C_Slave_ISR_DMA+0x348>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084b6:	d11f      	bne.n	80084f8 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b21      	cmp	r3, #33	; 0x21
 80084bc:	d002      	beq.n	80084c4 <I2C_Slave_ISR_DMA+0x354>
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b29      	cmp	r3, #41	; 0x29
 80084c2:	d103      	bne.n	80084cc <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2221      	movs	r2, #33	; 0x21
 80084c8:	631a      	str	r2, [r3, #48]	; 0x30
 80084ca:	e008      	b.n	80084de <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	2b22      	cmp	r3, #34	; 0x22
 80084d0:	d002      	beq.n	80084d8 <I2C_Slave_ISR_DMA+0x368>
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	2b2a      	cmp	r3, #42	; 0x2a
 80084d6:	d102      	bne.n	80084de <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2222      	movs	r2, #34	; 0x22
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e2:	4619      	mov	r1, r3
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fd03 	bl	8008ef0 <I2C_ITError>
      if (treatdmanack == 1U)
 80084ea:	e005      	b.n	80084f8 <I2C_Slave_ISR_DMA+0x388>
 80084ec:	e004      	b.n	80084f8 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2210      	movs	r2, #16
 80084f4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80084f6:	e011      	b.n	800851c <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 80084f8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80084fa:	e00f      	b.n	800851c <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	08db      	lsrs	r3, r3, #3
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d009      	beq.n	800851c <I2C_Slave_ISR_DMA+0x3ac>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	08db      	lsrs	r3, r3, #3
 800850c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f8b2 	bl	8008680 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3720      	adds	r7, #32
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop

08008530 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	461a      	mov	r2, r3
 800853e:	4603      	mov	r3, r0
 8008540:	817b      	strh	r3, [r7, #10]
 8008542:	460b      	mov	r3, r1
 8008544:	813b      	strh	r3, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	b2da      	uxtb	r2, r3
 800854e:	8979      	ldrh	r1, [r7, #10]
 8008550:	4b20      	ldr	r3, [pc, #128]	; (80085d4 <I2C_RequestMemoryWrite+0xa4>)
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f001 f825 	bl	80095a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800855e:	69fa      	ldr	r2, [r7, #28]
 8008560:	69b9      	ldr	r1, [r7, #24]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 fe3d 	bl	80091e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e02c      	b.n	80085cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008572:	88fb      	ldrh	r3, [r7, #6]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d105      	bne.n	8008584 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008578:	893b      	ldrh	r3, [r7, #8]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	629a      	str	r2, [r3, #40]	; 0x28
 8008582:	e015      	b.n	80085b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008584:	893b      	ldrh	r3, [r7, #8]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	b29b      	uxth	r3, r3
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	69b9      	ldr	r1, [r7, #24]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 fe23 	bl	80091e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e012      	b.n	80085cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085a6:	893b      	ldrh	r3, [r7, #8]
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	2200      	movs	r2, #0
 80085b8:	2180      	movs	r1, #128	; 0x80
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 fdd1 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e000      	b.n	80085cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	80002000 	.word	0x80002000

080085d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af02      	add	r7, sp, #8
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	4608      	mov	r0, r1
 80085e2:	4611      	mov	r1, r2
 80085e4:	461a      	mov	r2, r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	817b      	strh	r3, [r7, #10]
 80085ea:	460b      	mov	r3, r1
 80085ec:	813b      	strh	r3, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	8979      	ldrh	r1, [r7, #10]
 80085f8:	4b20      	ldr	r3, [pc, #128]	; (800867c <I2C_RequestMemoryRead+0xa4>)
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	2300      	movs	r3, #0
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 ffd2 	bl	80095a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	69b9      	ldr	r1, [r7, #24]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fdea 	bl	80091e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e02c      	b.n	8008672 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d105      	bne.n	800862a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800861e:	893b      	ldrh	r3, [r7, #8]
 8008620:	b2da      	uxtb	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
 8008628:	e015      	b.n	8008656 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800862a:	893b      	ldrh	r3, [r7, #8]
 800862c:	0a1b      	lsrs	r3, r3, #8
 800862e:	b29b      	uxth	r3, r3
 8008630:	b2da      	uxtb	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	69b9      	ldr	r1, [r7, #24]
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 fdd0 	bl	80091e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e012      	b.n	8008672 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800864c:	893b      	ldrh	r3, [r7, #8]
 800864e:	b2da      	uxtb	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2200      	movs	r2, #0
 800865e:	2140      	movs	r1, #64	; 0x40
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fd7e 	bl	8009162 <I2C_WaitOnFlagUntilTimeout>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e000      	b.n	8008672 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	80002000 	.word	0x80002000

08008680 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008696:	2b28      	cmp	r3, #40	; 0x28
 8008698:	d16a      	bne.n	8008770 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	0c1b      	lsrs	r3, r3, #16
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80086b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80086d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d138      	bne.n	8008750 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80086de:	897b      	ldrh	r3, [r7, #10]
 80086e0:	09db      	lsrs	r3, r3, #7
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	89bb      	ldrh	r3, [r7, #12]
 80086e6:	4053      	eors	r3, r2
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f003 0306 	and.w	r3, r3, #6
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d11c      	bne.n	800872c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80086f2:	897b      	ldrh	r3, [r7, #10]
 80086f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008704:	2b02      	cmp	r3, #2
 8008706:	d13b      	bne.n	8008780 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2208      	movs	r2, #8
 8008714:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800871e:	89ba      	ldrh	r2, [r7, #12]
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff f9ce 	bl	8007ac6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800872a:	e029      	b.n	8008780 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800872c:	893b      	ldrh	r3, [r7, #8]
 800872e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 ffcd 	bl	80096d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008742:	89ba      	ldrh	r2, [r7, #12]
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff f9bc 	bl	8007ac6 <HAL_I2C_AddrCallback>
}
 800874e:	e017      	b.n	8008780 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 ffbd 	bl	80096d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008762:	89ba      	ldrh	r2, [r7, #12]
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff f9ac 	bl	8007ac6 <HAL_I2C_AddrCallback>
}
 800876e:	e007      	b.n	8008780 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2208      	movs	r2, #8
 8008776:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b21      	cmp	r3, #33	; 0x21
 80087a2:	d115      	bne.n	80087d0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2211      	movs	r2, #17
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80087b8:	2101      	movs	r1, #1
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 ff8a 	bl	80096d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff f954 	bl	8007a76 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087ce:	e014      	b.n	80087fa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2212      	movs	r2, #18
 80087dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80087e4:	2102      	movs	r1, #2
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 ff74 	bl	80096d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff f948 	bl	8007a8a <HAL_I2C_MasterRxCpltCallback>
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	0b9b      	lsrs	r3, r3, #14
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d008      	beq.n	8008838 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	e00d      	b.n	8008854 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	0bdb      	lsrs	r3, r3, #15
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d007      	beq.n	8008854 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008852:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b29      	cmp	r3, #41	; 0x29
 800885e:	d112      	bne.n	8008886 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2228      	movs	r2, #40	; 0x28
 8008864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2221      	movs	r2, #33	; 0x21
 800886c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800886e:	2101      	movs	r1, #1
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 ff2f 	bl	80096d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff f90d 	bl	8007a9e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008884:	e017      	b.n	80088b6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b2a      	cmp	r3, #42	; 0x2a
 8008890:	d111      	bne.n	80088b6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2228      	movs	r2, #40	; 0x28
 8008896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2222      	movs	r2, #34	; 0x22
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80088a0:	2102      	movs	r1, #2
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 ff16 	bl	80096d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff f8fe 	bl	8007ab2 <HAL_I2C_SlaveRxCpltCallback>
}
 80088b6:	bf00      	nop
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2220      	movs	r2, #32
 80088d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b21      	cmp	r3, #33	; 0x21
 80088e0:	d107      	bne.n	80088f2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80088e2:	2101      	movs	r1, #1
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fef5 	bl	80096d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2211      	movs	r2, #17
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30
 80088f0:	e00c      	b.n	800890c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b22      	cmp	r3, #34	; 0x22
 80088fc:	d106      	bne.n	800890c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80088fe:	2102      	movs	r1, #2
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fee7 	bl	80096d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2212      	movs	r2, #18
 800890a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6859      	ldr	r1, [r3, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	4b4d      	ldr	r3, [pc, #308]	; (8008a4c <I2C_ITMasterCplt+0x18c>)
 8008918:	400b      	ands	r3, r1
 800891a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a4a      	ldr	r2, [pc, #296]	; (8008a50 <I2C_ITMasterCplt+0x190>)
 8008926:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2210      	movs	r2, #16
 800893a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008940:	f043 0204 	orr.w	r2, r3, #4
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b60      	cmp	r3, #96	; 0x60
 8008952:	d10b      	bne.n	800896c <I2C_ITMasterCplt+0xac>
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	b2db      	uxtb	r3, r3
 8008968:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800896a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fbb6 	bl	80090de <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b60      	cmp	r3, #96	; 0x60
 8008982:	d002      	beq.n	800898a <I2C_ITMasterCplt+0xca>
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d006      	beq.n	8008998 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 faad 	bl	8008ef0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008996:	e054      	b.n	8008a42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b21      	cmp	r3, #33	; 0x21
 80089a2:	d124      	bne.n	80089ee <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b40      	cmp	r3, #64	; 0x40
 80089bc:	d10b      	bne.n	80089d6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff f891 	bl	8007af6 <HAL_I2C_MemTxCpltCallback>
}
 80089d4:	e035      	b.n	8008a42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff f845 	bl	8007a76 <HAL_I2C_MasterTxCpltCallback>
}
 80089ec:	e029      	b.n	8008a42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b22      	cmp	r3, #34	; 0x22
 80089f8:	d123      	bne.n	8008a42 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2220      	movs	r2, #32
 80089fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b40      	cmp	r3, #64	; 0x40
 8008a12:	d10b      	bne.n	8008a2c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7f7 fec9 	bl	80007bc <HAL_I2C_MemRxCpltCallback>
}
 8008a2a:	e00a      	b.n	8008a42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff f824 	bl	8007a8a <HAL_I2C_MasterRxCpltCallback>
}
 8008a42:	bf00      	nop
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	fe00e800 	.word	0xfe00e800
 8008a50:	ffff0000 	.word	0xffff0000

08008a54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a70:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2220      	movs	r2, #32
 8008a78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b21      	cmp	r3, #33	; 0x21
 8008a7e:	d002      	beq.n	8008a86 <I2C_ITSlaveCplt+0x32>
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b29      	cmp	r3, #41	; 0x29
 8008a84:	d108      	bne.n	8008a98 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008a86:	f248 0101 	movw	r1, #32769	; 0x8001
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fe22 	bl	80096d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2221      	movs	r2, #33	; 0x21
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
 8008a96:	e00d      	b.n	8008ab4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	2b22      	cmp	r3, #34	; 0x22
 8008a9c:	d002      	beq.n	8008aa4 <I2C_ITSlaveCplt+0x50>
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa2:	d107      	bne.n	8008ab4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008aa4:	f248 0102 	movw	r1, #32770	; 0x8002
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fe13 	bl	80096d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2222      	movs	r2, #34	; 0x22
 8008ab2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ac2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6859      	ldr	r1, [r3, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	4b80      	ldr	r3, [pc, #512]	; (8008cd0 <I2C_ITSlaveCplt+0x27c>)
 8008ad0:	400b      	ands	r3, r1
 8008ad2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fb02 	bl	80090de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	0b9b      	lsrs	r3, r3, #14
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d07a      	beq.n	8008bdc <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008af4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8111 	beq.w	8008d22 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a73      	ldr	r2, [pc, #460]	; (8008cd4 <I2C_ITSlaveCplt+0x280>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d059      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a71      	ldr	r2, [pc, #452]	; (8008cd8 <I2C_ITSlaveCplt+0x284>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d053      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a6f      	ldr	r2, [pc, #444]	; (8008cdc <I2C_ITSlaveCplt+0x288>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d04d      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a6d      	ldr	r2, [pc, #436]	; (8008ce0 <I2C_ITSlaveCplt+0x28c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d047      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a6b      	ldr	r2, [pc, #428]	; (8008ce4 <I2C_ITSlaveCplt+0x290>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d041      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a69      	ldr	r2, [pc, #420]	; (8008ce8 <I2C_ITSlaveCplt+0x294>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d03b      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a67      	ldr	r2, [pc, #412]	; (8008cec <I2C_ITSlaveCplt+0x298>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d035      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a65      	ldr	r2, [pc, #404]	; (8008cf0 <I2C_ITSlaveCplt+0x29c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d02f      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a63      	ldr	r2, [pc, #396]	; (8008cf4 <I2C_ITSlaveCplt+0x2a0>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d029      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a61      	ldr	r2, [pc, #388]	; (8008cf8 <I2C_ITSlaveCplt+0x2a4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d023      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a5f      	ldr	r2, [pc, #380]	; (8008cfc <I2C_ITSlaveCplt+0x2a8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d01d      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a5d      	ldr	r2, [pc, #372]	; (8008d00 <I2C_ITSlaveCplt+0x2ac>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d017      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a5b      	ldr	r2, [pc, #364]	; (8008d04 <I2C_ITSlaveCplt+0x2b0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d011      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a59      	ldr	r2, [pc, #356]	; (8008d08 <I2C_ITSlaveCplt+0x2b4>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d00b      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a57      	ldr	r2, [pc, #348]	; (8008d0c <I2C_ITSlaveCplt+0x2b8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d005      	beq.n	8008bc0 <I2C_ITSlaveCplt+0x16c>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a55      	ldr	r2, [pc, #340]	; (8008d10 <I2C_ITSlaveCplt+0x2bc>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d105      	bne.n	8008bcc <I2C_ITSlaveCplt+0x178>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	e004      	b.n	8008bd6 <I2C_ITSlaveCplt+0x182>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	8553      	strh	r3, [r2, #42]	; 0x2a
 8008bda:	e0a2      	b.n	8008d22 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	0bdb      	lsrs	r3, r3, #15
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 809c 	beq.w	8008d22 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bf8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 808f 	beq.w	8008d22 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a32      	ldr	r2, [pc, #200]	; (8008cd4 <I2C_ITSlaveCplt+0x280>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d059      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a30      	ldr	r2, [pc, #192]	; (8008cd8 <I2C_ITSlaveCplt+0x284>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d053      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a2e      	ldr	r2, [pc, #184]	; (8008cdc <I2C_ITSlaveCplt+0x288>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d04d      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a2c      	ldr	r2, [pc, #176]	; (8008ce0 <I2C_ITSlaveCplt+0x28c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d047      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a2a      	ldr	r2, [pc, #168]	; (8008ce4 <I2C_ITSlaveCplt+0x290>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d041      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a28      	ldr	r2, [pc, #160]	; (8008ce8 <I2C_ITSlaveCplt+0x294>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d03b      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a26      	ldr	r2, [pc, #152]	; (8008cec <I2C_ITSlaveCplt+0x298>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d035      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a24      	ldr	r2, [pc, #144]	; (8008cf0 <I2C_ITSlaveCplt+0x29c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d02f      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a22      	ldr	r2, [pc, #136]	; (8008cf4 <I2C_ITSlaveCplt+0x2a0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d029      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a20      	ldr	r2, [pc, #128]	; (8008cf8 <I2C_ITSlaveCplt+0x2a4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d023      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1e      	ldr	r2, [pc, #120]	; (8008cfc <I2C_ITSlaveCplt+0x2a8>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d01d      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a1c      	ldr	r2, [pc, #112]	; (8008d00 <I2C_ITSlaveCplt+0x2ac>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d017      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a1a      	ldr	r2, [pc, #104]	; (8008d04 <I2C_ITSlaveCplt+0x2b0>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d011      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a18      	ldr	r2, [pc, #96]	; (8008d08 <I2C_ITSlaveCplt+0x2b4>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00b      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a16      	ldr	r2, [pc, #88]	; (8008d0c <I2C_ITSlaveCplt+0x2b8>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d005      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x270>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a14      	ldr	r2, [pc, #80]	; (8008d10 <I2C_ITSlaveCplt+0x2bc>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d127      	bne.n	8008d14 <I2C_ITSlaveCplt+0x2c0>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	e026      	b.n	8008d1e <I2C_ITSlaveCplt+0x2ca>
 8008cd0:	fe00e800 	.word	0xfe00e800
 8008cd4:	40020010 	.word	0x40020010
 8008cd8:	40020028 	.word	0x40020028
 8008cdc:	40020040 	.word	0x40020040
 8008ce0:	40020058 	.word	0x40020058
 8008ce4:	40020070 	.word	0x40020070
 8008ce8:	40020088 	.word	0x40020088
 8008cec:	400200a0 	.word	0x400200a0
 8008cf0:	400200b8 	.word	0x400200b8
 8008cf4:	40020410 	.word	0x40020410
 8008cf8:	40020428 	.word	0x40020428
 8008cfc:	40020440 	.word	0x40020440
 8008d00:	40020458 	.word	0x40020458
 8008d04:	40020470 	.word	0x40020470
 8008d08:	40020488 	.word	0x40020488
 8008d0c:	400204a0 	.word	0x400204a0
 8008d10:	400204b8 	.word	0x400204b8
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	089b      	lsrs	r3, r3, #2
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d020      	beq.n	8008d70 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f023 0304 	bic.w	r3, r3, #4
 8008d34:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	b2d2      	uxtb	r2, r2
 8008d42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00c      	beq.n	8008d70 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7e:	f043 0204 	orr.w	r2, r3, #4
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d010      	beq.n	8008dbe <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f8a4 	bl	8008ef0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b28      	cmp	r3, #40	; 0x28
 8008db2:	d141      	bne.n	8008e38 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008db4:	6979      	ldr	r1, [r7, #20]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f844 	bl	8008e44 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008dbc:	e03c      	b.n	8008e38 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008dc6:	d014      	beq.n	8008df2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff fd1a 	bl	8008802 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a1b      	ldr	r2, [pc, #108]	; (8008e40 <I2C_ITSlaveCplt+0x3ec>)
 8008dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7fe fe79 	bl	8007ae2 <HAL_I2C_ListenCpltCallback>
}
 8008df0:	e022      	b.n	8008e38 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b22      	cmp	r3, #34	; 0x22
 8008dfc:	d10e      	bne.n	8008e1c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7fe fe4c 	bl	8007ab2 <HAL_I2C_SlaveRxCpltCallback>
}
 8008e1a:	e00d      	b.n	8008e38 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fe fe33 	bl	8007a9e <HAL_I2C_SlaveTxCpltCallback>
}
 8008e38:	bf00      	nop
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	ffff0000 	.word	0xffff0000

08008e44 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a26      	ldr	r2, [pc, #152]	; (8008eec <I2C_ITListenCplt+0xa8>)
 8008e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	089b      	lsrs	r3, r3, #2
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d022      	beq.n	8008ec2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d012      	beq.n	8008ec2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eba:	f043 0204 	orr.w	r2, r3, #4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008ec2:	f248 0103 	movw	r1, #32771	; 0x8003
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fc04 	bl	80096d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2210      	movs	r2, #16
 8008ed2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7fe fe00 	bl	8007ae2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	ffff0000 	.word	0xffff0000

08008ef0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a5d      	ldr	r2, [pc, #372]	; (8009084 <I2C_ITError+0x194>)
 8008f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	2b28      	cmp	r3, #40	; 0x28
 8008f26:	d005      	beq.n	8008f34 <I2C_ITError+0x44>
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	2b29      	cmp	r3, #41	; 0x29
 8008f2c:	d002      	beq.n	8008f34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b2a      	cmp	r3, #42	; 0x2a
 8008f32:	d10b      	bne.n	8008f4c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008f34:	2103      	movs	r1, #3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fbcc 	bl	80096d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2228      	movs	r2, #40	; 0x28
 8008f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a50      	ldr	r2, [pc, #320]	; (8009088 <I2C_ITError+0x198>)
 8008f48:	635a      	str	r2, [r3, #52]	; 0x34
 8008f4a:	e011      	b.n	8008f70 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008f4c:	f248 0103 	movw	r1, #32771	; 0x8003
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fbbf 	bl	80096d4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b60      	cmp	r3, #96	; 0x60
 8008f60:	d003      	beq.n	8008f6a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f74:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d039      	beq.n	8008ff2 <I2C_ITError+0x102>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b11      	cmp	r3, #17
 8008f82:	d002      	beq.n	8008f8a <I2C_ITError+0x9a>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b21      	cmp	r3, #33	; 0x21
 8008f88:	d133      	bne.n	8008ff2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f98:	d107      	bne.n	8008faa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fa8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fc fda4 	bl	8005afc <HAL_DMA_GetState>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d017      	beq.n	8008fea <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	4a33      	ldr	r2, [pc, #204]	; (800908c <I2C_ITError+0x19c>)
 8008fc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fb fc26 	bl	8004820 <HAL_DMA_Abort_IT>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d04d      	beq.n	8009076 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008fe8:	e045      	b.n	8009076 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f850 	bl	8009090 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ff0:	e041      	b.n	8009076 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d039      	beq.n	800906e <I2C_ITError+0x17e>
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b12      	cmp	r3, #18
 8008ffe:	d002      	beq.n	8009006 <I2C_ITError+0x116>
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b22      	cmp	r3, #34	; 0x22
 8009004:	d133      	bne.n	800906e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009014:	d107      	bne.n	8009026 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009024:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902a:	4618      	mov	r0, r3
 800902c:	f7fc fd66 	bl	8005afc <HAL_DMA_GetState>
 8009030:	4603      	mov	r3, r0
 8009032:	2b01      	cmp	r3, #1
 8009034:	d017      	beq.n	8009066 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903a:	4a14      	ldr	r2, [pc, #80]	; (800908c <I2C_ITError+0x19c>)
 800903c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904a:	4618      	mov	r0, r3
 800904c:	f7fb fbe8 	bl	8004820 <HAL_DMA_Abort_IT>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d011      	beq.n	800907a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009064:	e009      	b.n	800907a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f812 	bl	8009090 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800906c:	e005      	b.n	800907a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f80e 	bl	8009090 <I2C_TreatErrorCallback>
  }
}
 8009074:	e002      	b.n	800907c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009076:	bf00      	nop
 8009078:	e000      	b.n	800907c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800907a:	bf00      	nop
}
 800907c:	bf00      	nop
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	ffff0000 	.word	0xffff0000
 8009088:	08007d83 	.word	0x08007d83
 800908c:	08009127 	.word	0x08009127

08009090 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b60      	cmp	r3, #96	; 0x60
 80090a2:	d10e      	bne.n	80090c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7fe fd2f 	bl	8007b1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80090c0:	e009      	b.n	80090d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7fe fd1a 	bl	8007b0a <HAL_I2C_ErrorCallback>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d103      	bne.n	80090fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2200      	movs	r2, #0
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b01      	cmp	r3, #1
 8009108:	d007      	beq.n	800911a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	699a      	ldr	r2, [r3, #24]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0201 	orr.w	r2, r2, #1
 8009118:	619a      	str	r2, [r3, #24]
  }
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009132:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	2200      	movs	r2, #0
 8009142:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009150:	2200      	movs	r2, #0
 8009152:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff ff9b 	bl	8009090 <I2C_TreatErrorCallback>
}
 800915a:	bf00      	nop
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	603b      	str	r3, [r7, #0]
 800916e:	4613      	mov	r3, r2
 8009170:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009172:	e022      	b.n	80091ba <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800917a:	d01e      	beq.n	80091ba <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800917c:	f7fa f90c 	bl	8003398 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d302      	bcc.n	8009192 <I2C_WaitOnFlagUntilTimeout+0x30>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d113      	bne.n	80091ba <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009196:	f043 0220 	orr.w	r2, r3, #32
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e00f      	b.n	80091da <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4013      	ands	r3, r2
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	bf0c      	ite	eq
 80091ca:	2301      	moveq	r3, #1
 80091cc:	2300      	movne	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d0cd      	beq.n	8009174 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091ee:	e02c      	b.n	800924a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f8eb 	bl	80093d0 <I2C_IsErrorOccurred>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e02a      	b.n	800925a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800920a:	d01e      	beq.n	800924a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800920c:	f7fa f8c4 	bl	8003398 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	429a      	cmp	r2, r3
 800921a:	d302      	bcc.n	8009222 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d113      	bne.n	800924a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009226:	f043 0220 	orr.w	r2, r3, #32
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e007      	b.n	800925a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b02      	cmp	r3, #2
 8009256:	d1cb      	bne.n	80091f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800926e:	e028      	b.n	80092c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f8ab 	bl	80093d0 <I2C_IsErrorOccurred>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e026      	b.n	80092d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009284:	f7fa f888 	bl	8003398 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	429a      	cmp	r2, r3
 8009292:	d302      	bcc.n	800929a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d113      	bne.n	80092c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929e:	f043 0220 	orr.w	r2, r3, #32
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e007      	b.n	80092d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d1cf      	bne.n	8009270 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092e8:	e064      	b.n	80093b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 f86e 	bl	80093d0 <I2C_IsErrorOccurred>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e062      	b.n	80093c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b20      	cmp	r3, #32
 800930a:	d138      	bne.n	800937e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f003 0304 	and.w	r3, r3, #4
 8009316:	2b04      	cmp	r3, #4
 8009318:	d105      	bne.n	8009326 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	e04e      	b.n	80093c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b10      	cmp	r3, #16
 8009332:	d107      	bne.n	8009344 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2210      	movs	r2, #16
 800933a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2204      	movs	r2, #4
 8009340:	645a      	str	r2, [r3, #68]	; 0x44
 8009342:	e002      	b.n	800934a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2220      	movs	r2, #32
 8009350:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6859      	ldr	r1, [r3, #4]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	4b1b      	ldr	r3, [pc, #108]	; (80093cc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800935e:	400b      	ands	r3, r1
 8009360:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2220      	movs	r2, #32
 8009366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e022      	b.n	80093c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800937e:	f7fa f80b 	bl	8003398 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	429a      	cmp	r2, r3
 800938c:	d302      	bcc.n	8009394 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10f      	bne.n	80093b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009398:	f043 0220 	orr.w	r2, r3, #32
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e007      	b.n	80093c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	f003 0304 	and.w	r3, r3, #4
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d193      	bne.n	80092ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	fe00e800 	.word	0xfe00e800

080093d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08a      	sub	sp, #40	; 0x28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d075      	beq.n	80094e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2210      	movs	r2, #16
 8009402:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009404:	e056      	b.n	80094b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800940c:	d052      	beq.n	80094b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800940e:	f7f9 ffc3 	bl	8003398 <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	429a      	cmp	r2, r3
 800941c:	d302      	bcc.n	8009424 <I2C_IsErrorOccurred+0x54>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d147      	bne.n	80094b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800942e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009436:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009446:	d12e      	bne.n	80094a6 <I2C_IsErrorOccurred+0xd6>
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800944e:	d02a      	beq.n	80094a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009450:	7cfb      	ldrb	r3, [r7, #19]
 8009452:	2b20      	cmp	r3, #32
 8009454:	d027      	beq.n	80094a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009464:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009466:	f7f9 ff97 	bl	8003398 <HAL_GetTick>
 800946a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800946c:	e01b      	b.n	80094a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800946e:	f7f9 ff93 	bl	8003398 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	2b19      	cmp	r3, #25
 800947a:	d914      	bls.n	80094a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009480:	f043 0220 	orr.w	r2, r3, #32
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2220      	movs	r2, #32
 800948c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	f003 0320 	and.w	r3, r3, #32
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d1dc      	bne.n	800946e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d003      	beq.n	80094ca <I2C_IsErrorOccurred+0xfa>
 80094c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d09d      	beq.n	8009406 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80094ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d103      	bne.n	80094da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2220      	movs	r2, #32
 80094d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	f043 0304 	orr.w	r3, r3, #4
 80094e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00b      	beq.n	8009512 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	f043 0301 	orr.w	r3, r3, #1
 8009500:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800950a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	f043 0308 	orr.w	r3, r3, #8
 8009522:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800952c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	f043 0302 	orr.w	r3, r3, #2
 8009544:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800954e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800955a:	2b00      	cmp	r3, #0
 800955c:	d01c      	beq.n	8009598 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7ff fdbd 	bl	80090de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6859      	ldr	r1, [r3, #4]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b0d      	ldr	r3, [pc, #52]	; (80095a4 <I2C_IsErrorOccurred+0x1d4>)
 8009570:	400b      	ands	r3, r1
 8009572:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	431a      	orrs	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2220      	movs	r2, #32
 8009584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800959c:	4618      	mov	r0, r3
 800959e:	3728      	adds	r7, #40	; 0x28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	fe00e800 	.word	0xfe00e800

080095a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	460b      	mov	r3, r1
 80095b4:	817b      	strh	r3, [r7, #10]
 80095b6:	4613      	mov	r3, r2
 80095b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095ba:	897b      	ldrh	r3, [r7, #10]
 80095bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095c0:	7a7b      	ldrb	r3, [r7, #9]
 80095c2:	041b      	lsls	r3, r3, #16
 80095c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095c8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095d6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	0d5b      	lsrs	r3, r3, #21
 80095e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80095e6:	4b08      	ldr	r3, [pc, #32]	; (8009608 <I2C_TransferConfig+0x60>)
 80095e8:	430b      	orrs	r3, r1
 80095ea:	43db      	mvns	r3, r3
 80095ec:	ea02 0103 	and.w	r1, r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	03ff63ff 	.word	0x03ff63ff

0800960c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009620:	4a2a      	ldr	r2, [pc, #168]	; (80096cc <I2C_Enable_IRQ+0xc0>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d004      	beq.n	8009630 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800962a:	4a29      	ldr	r2, [pc, #164]	; (80096d0 <I2C_Enable_IRQ+0xc4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d11d      	bne.n	800966c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009630:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009634:	2b00      	cmp	r3, #0
 8009636:	da03      	bge.n	8009640 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800963e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009640:	887b      	ldrh	r3, [r7, #2]
 8009642:	2b10      	cmp	r3, #16
 8009644:	d103      	bne.n	800964e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800964c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800964e:	887b      	ldrh	r3, [r7, #2]
 8009650:	2b20      	cmp	r3, #32
 8009652:	d103      	bne.n	800965c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800965a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800965c:	887b      	ldrh	r3, [r7, #2]
 800965e:	2b40      	cmp	r3, #64	; 0x40
 8009660:	d125      	bne.n	80096ae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009668:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800966a:	e020      	b.n	80096ae <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800966c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009670:	2b00      	cmp	r3, #0
 8009672:	da03      	bge.n	800967c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800967a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800967c:	887b      	ldrh	r3, [r7, #2]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800968c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800968e:	887b      	ldrh	r3, [r7, #2]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800969e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80096a0:	887b      	ldrh	r3, [r7, #2]
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	d103      	bne.n	80096ae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f043 0320 	orr.w	r3, r3, #32
 80096ac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6819      	ldr	r1, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	601a      	str	r2, [r3, #0]
}
 80096be:	bf00      	nop
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	08007f89 	.word	0x08007f89
 80096d0:	08008171 	.word	0x08008171

080096d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80096e4:	887b      	ldrh	r3, [r7, #2]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00f      	beq.n	800970e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80096f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009702:	2b28      	cmp	r3, #40	; 0x28
 8009704:	d003      	beq.n	800970e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800970c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800970e:	887b      	ldrh	r3, [r7, #2]
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00f      	beq.n	8009738 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800971e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009726:	b2db      	uxtb	r3, r3
 8009728:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800972c:	2b28      	cmp	r3, #40	; 0x28
 800972e:	d003      	beq.n	8009738 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009736:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009738:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800973c:	2b00      	cmp	r3, #0
 800973e:	da03      	bge.n	8009748 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009746:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009748:	887b      	ldrh	r3, [r7, #2]
 800974a:	2b10      	cmp	r3, #16
 800974c:	d103      	bne.n	8009756 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009754:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009756:	887b      	ldrh	r3, [r7, #2]
 8009758:	2b20      	cmp	r3, #32
 800975a:	d103      	bne.n	8009764 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f043 0320 	orr.w	r3, r3, #32
 8009762:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009764:	887b      	ldrh	r3, [r7, #2]
 8009766:	2b40      	cmp	r3, #64	; 0x40
 8009768:	d103      	bne.n	8009772 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009770:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6819      	ldr	r1, [r3, #0]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	43da      	mvns	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	400a      	ands	r2, r1
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	d138      	bne.n	8009818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d101      	bne.n	80097b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80097b0:	2302      	movs	r3, #2
 80097b2:	e032      	b.n	800981a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2224      	movs	r2, #36	; 0x24
 80097c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0201 	bic.w	r2, r2, #1
 80097d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6819      	ldr	r1, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f042 0201 	orr.w	r2, r2, #1
 8009802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2220      	movs	r2, #32
 8009808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	e000      	b.n	800981a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009818:	2302      	movs	r3, #2
  }
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b20      	cmp	r3, #32
 800983a:	d139      	bne.n	80098b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009842:	2b01      	cmp	r3, #1
 8009844:	d101      	bne.n	800984a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009846:	2302      	movs	r3, #2
 8009848:	e033      	b.n	80098b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2224      	movs	r2, #36	; 0x24
 8009856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0201 	bic.w	r2, r2, #1
 8009868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	021b      	lsls	r3, r3, #8
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	4313      	orrs	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2220      	movs	r2, #32
 80098a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	e000      	b.n	80098b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80098b0:	2302      	movs	r3, #2
  }
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80098be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c0:	b08f      	sub	sp, #60	; 0x3c
 80098c2:	af0a      	add	r7, sp, #40	; 0x28
 80098c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e116      	b.n	8009afe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d106      	bne.n	80098f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7f7 fcf4 	bl	80012d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2203      	movs	r2, #3
 80098f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f004 fb72 	bl	800dff8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	603b      	str	r3, [r7, #0]
 800991a:	687e      	ldr	r6, [r7, #4]
 800991c:	466d      	mov	r5, sp
 800991e:	f106 0410 	add.w	r4, r6, #16
 8009922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800992a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800992e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009932:	1d33      	adds	r3, r6, #4
 8009934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009936:	6838      	ldr	r0, [r7, #0]
 8009938:	f004 faf0 	bl	800df1c <USB_CoreInit>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d005      	beq.n	800994e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2202      	movs	r2, #2
 8009946:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e0d7      	b.n	8009afe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2100      	movs	r1, #0
 8009954:	4618      	mov	r0, r3
 8009956:	f004 fb60 	bl	800e01a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800995a:	2300      	movs	r3, #0
 800995c:	73fb      	strb	r3, [r7, #15]
 800995e:	e04a      	b.n	80099f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009960:	7bfa      	ldrb	r2, [r7, #15]
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	4613      	mov	r3, r2
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	440b      	add	r3, r1
 800996e:	333d      	adds	r3, #61	; 0x3d
 8009970:	2201      	movs	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009974:	7bfa      	ldrb	r2, [r7, #15]
 8009976:	6879      	ldr	r1, [r7, #4]
 8009978:	4613      	mov	r3, r2
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	440b      	add	r3, r1
 8009982:	333c      	adds	r3, #60	; 0x3c
 8009984:	7bfa      	ldrb	r2, [r7, #15]
 8009986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009988:	7bfa      	ldrb	r2, [r7, #15]
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	b298      	uxth	r0, r3
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	00db      	lsls	r3, r3, #3
 8009994:	1a9b      	subs	r3, r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	3342      	adds	r3, #66	; 0x42
 800999c:	4602      	mov	r2, r0
 800999e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80099a0:	7bfa      	ldrb	r2, [r7, #15]
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	4613      	mov	r3, r2
 80099a6:	00db      	lsls	r3, r3, #3
 80099a8:	1a9b      	subs	r3, r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	333f      	adds	r3, #63	; 0x3f
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80099b4:	7bfa      	ldrb	r2, [r7, #15]
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	4613      	mov	r3, r2
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	1a9b      	subs	r3, r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	440b      	add	r3, r1
 80099c2:	3344      	adds	r3, #68	; 0x44
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80099c8:	7bfa      	ldrb	r2, [r7, #15]
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	4613      	mov	r3, r2
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	1a9b      	subs	r3, r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	440b      	add	r3, r1
 80099d6:	3348      	adds	r3, #72	; 0x48
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80099dc:	7bfa      	ldrb	r2, [r7, #15]
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	4613      	mov	r3, r2
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	1a9b      	subs	r3, r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	440b      	add	r3, r1
 80099ea:	3350      	adds	r3, #80	; 0x50
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	3301      	adds	r3, #1
 80099f4:	73fb      	strb	r3, [r7, #15]
 80099f6:	7bfa      	ldrb	r2, [r7, #15]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d3af      	bcc.n	8009960 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
 8009a04:	e044      	b.n	8009a90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009a06:	7bfa      	ldrb	r2, [r7, #15]
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	440b      	add	r3, r1
 8009a14:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009a18:	2200      	movs	r2, #0
 8009a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009a1c:	7bfa      	ldrb	r2, [r7, #15]
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009a2e:	7bfa      	ldrb	r2, [r7, #15]
 8009a30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a32:	7bfa      	ldrb	r2, [r7, #15]
 8009a34:	6879      	ldr	r1, [r7, #4]
 8009a36:	4613      	mov	r3, r2
 8009a38:	00db      	lsls	r3, r3, #3
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	440b      	add	r3, r1
 8009a40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009a48:	7bfa      	ldrb	r2, [r7, #15]
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009a5e:	7bfa      	ldrb	r2, [r7, #15]
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	4613      	mov	r3, r2
 8009a64:	00db      	lsls	r3, r3, #3
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	440b      	add	r3, r1
 8009a6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009a74:	7bfa      	ldrb	r2, [r7, #15]
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	440b      	add	r3, r1
 8009a82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	73fb      	strb	r3, [r7, #15]
 8009a90:	7bfa      	ldrb	r2, [r7, #15]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d3b5      	bcc.n	8009a06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	687e      	ldr	r6, [r7, #4]
 8009aa2:	466d      	mov	r5, sp
 8009aa4:	f106 0410 	add.w	r4, r6, #16
 8009aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ab0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009ab4:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ab8:	1d33      	adds	r3, r6, #4
 8009aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009abc:	6838      	ldr	r0, [r7, #0]
 8009abe:	f004 faf9 	bl	800e0b4 <USB_DevInit>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e014      	b.n	8009afe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d102      	bne.n	8009af2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f80b 	bl	8009b08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f004 fcb3 	bl	800e462 <USB_DevDisconnect>

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009b08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b36:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <HAL_PCDEx_ActivateLPM+0x44>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	10000003 	.word	0x10000003

08009b50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009b58:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	f003 0307 	and.w	r3, r3, #7
 8009b60:	2b06      	cmp	r3, #6
 8009b62:	d00a      	beq.n	8009b7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009b64:	4b26      	ldr	r3, [pc, #152]	; (8009c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d001      	beq.n	8009b76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e040      	b.n	8009bf8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	e03e      	b.n	8009bf8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009b7a:	4b21      	ldr	r3, [pc, #132]	; (8009c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009b82:	491f      	ldr	r1, [pc, #124]	; (8009c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009b8a:	f7f9 fc05 	bl	8003398 <HAL_GetTick>
 8009b8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b90:	e009      	b.n	8009ba6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009b92:	f7f9 fc01 	bl	8003398 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ba0:	d901      	bls.n	8009ba6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e028      	b.n	8009bf8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ba6:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bb2:	d1ee      	bne.n	8009b92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b1e      	cmp	r3, #30
 8009bb8:	d008      	beq.n	8009bcc <HAL_PWREx_ConfigSupply+0x7c>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8009bbe:	d005      	beq.n	8009bcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b1d      	cmp	r3, #29
 8009bc4:	d002      	beq.n	8009bcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b2d      	cmp	r3, #45	; 0x2d
 8009bca:	d114      	bne.n	8009bf6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8009bcc:	f7f9 fbe4 	bl	8003398 <HAL_GetTick>
 8009bd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009bd2:	e009      	b.n	8009be8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009bd4:	f7f9 fbe0 	bl	8003398 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009be2:	d901      	bls.n	8009be8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e007      	b.n	8009bf8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009be8:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf4:	d1ee      	bne.n	8009bd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	58024800 	.word	0x58024800

08009c04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009c04:	b480      	push	{r7}
 8009c06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009c08:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	4a04      	ldr	r2, [pc, #16]	; (8009c20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c12:	60d3      	str	r3, [r2, #12]
}
 8009c14:	bf00      	nop
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	58024800 	.word	0x58024800

08009c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08c      	sub	sp, #48	; 0x30
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f000 bc1c 	b.w	800a470 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 8087 	beq.w	8009d54 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c46:	4b9e      	ldr	r3, [pc, #632]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c50:	4b9b      	ldr	r3, [pc, #620]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	2b10      	cmp	r3, #16
 8009c5a:	d007      	beq.n	8009c6c <HAL_RCC_OscConfig+0x48>
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	2b18      	cmp	r3, #24
 8009c60:	d110      	bne.n	8009c84 <HAL_RCC_OscConfig+0x60>
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	f003 0303 	and.w	r3, r3, #3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d10b      	bne.n	8009c84 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c6c:	4b94      	ldr	r3, [pc, #592]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d06c      	beq.n	8009d52 <HAL_RCC_OscConfig+0x12e>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d168      	bne.n	8009d52 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e3f5      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c8c:	d106      	bne.n	8009c9c <HAL_RCC_OscConfig+0x78>
 8009c8e:	4b8c      	ldr	r3, [pc, #560]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a8b      	ldr	r2, [pc, #556]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c98:	6013      	str	r3, [r2, #0]
 8009c9a:	e02e      	b.n	8009cfa <HAL_RCC_OscConfig+0xd6>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10c      	bne.n	8009cbe <HAL_RCC_OscConfig+0x9a>
 8009ca4:	4b86      	ldr	r3, [pc, #536]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a85      	ldr	r2, [pc, #532]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	4b83      	ldr	r3, [pc, #524]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a82      	ldr	r2, [pc, #520]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	e01d      	b.n	8009cfa <HAL_RCC_OscConfig+0xd6>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cc6:	d10c      	bne.n	8009ce2 <HAL_RCC_OscConfig+0xbe>
 8009cc8:	4b7d      	ldr	r3, [pc, #500]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a7c      	ldr	r2, [pc, #496]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	4b7a      	ldr	r3, [pc, #488]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a79      	ldr	r2, [pc, #484]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	e00b      	b.n	8009cfa <HAL_RCC_OscConfig+0xd6>
 8009ce2:	4b77      	ldr	r3, [pc, #476]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a76      	ldr	r2, [pc, #472]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	4b74      	ldr	r3, [pc, #464]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a73      	ldr	r2, [pc, #460]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d013      	beq.n	8009d2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d02:	f7f9 fb49 	bl	8003398 <HAL_GetTick>
 8009d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d08:	e008      	b.n	8009d1c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d0a:	f7f9 fb45 	bl	8003398 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b64      	cmp	r3, #100	; 0x64
 8009d16:	d901      	bls.n	8009d1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e3a9      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d1c:	4b68      	ldr	r3, [pc, #416]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0f0      	beq.n	8009d0a <HAL_RCC_OscConfig+0xe6>
 8009d28:	e014      	b.n	8009d54 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d2a:	f7f9 fb35 	bl	8003398 <HAL_GetTick>
 8009d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d30:	e008      	b.n	8009d44 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d32:	f7f9 fb31 	bl	8003398 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b64      	cmp	r3, #100	; 0x64
 8009d3e:	d901      	bls.n	8009d44 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e395      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d44:	4b5e      	ldr	r3, [pc, #376]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1f0      	bne.n	8009d32 <HAL_RCC_OscConfig+0x10e>
 8009d50:	e000      	b.n	8009d54 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0302 	and.w	r3, r3, #2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 80ca 	beq.w	8009ef6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d62:	4b57      	ldr	r3, [pc, #348]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d6a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d6c:	4b54      	ldr	r3, [pc, #336]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d70:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <HAL_RCC_OscConfig+0x164>
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	2b18      	cmp	r3, #24
 8009d7c:	d156      	bne.n	8009e2c <HAL_RCC_OscConfig+0x208>
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	f003 0303 	and.w	r3, r3, #3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d151      	bne.n	8009e2c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d88:	4b4d      	ldr	r3, [pc, #308]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <HAL_RCC_OscConfig+0x17c>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e367      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009da0:	4b47      	ldr	r3, [pc, #284]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f023 0219 	bic.w	r2, r3, #25
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	4944      	ldr	r1, [pc, #272]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009db2:	f7f9 faf1 	bl	8003398 <HAL_GetTick>
 8009db6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009db8:	e008      	b.n	8009dcc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009dba:	f7f9 faed 	bl	8003398 <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d901      	bls.n	8009dcc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e351      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dcc:	4b3c      	ldr	r3, [pc, #240]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0f0      	beq.n	8009dba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dd8:	f7f9 fb0e 	bl	80033f8 <HAL_GetREVID>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f241 0203 	movw	r2, #4099	; 0x1003
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d817      	bhi.n	8009e16 <HAL_RCC_OscConfig+0x1f2>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	2b40      	cmp	r3, #64	; 0x40
 8009dec:	d108      	bne.n	8009e00 <HAL_RCC_OscConfig+0x1dc>
 8009dee:	4b34      	ldr	r3, [pc, #208]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009df6:	4a32      	ldr	r2, [pc, #200]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009dfe:	e07a      	b.n	8009ef6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e00:	4b2f      	ldr	r3, [pc, #188]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	031b      	lsls	r3, r3, #12
 8009e0e:	492c      	ldr	r1, [pc, #176]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e14:	e06f      	b.n	8009ef6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e16:	4b2a      	ldr	r3, [pc, #168]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	061b      	lsls	r3, r3, #24
 8009e24:	4926      	ldr	r1, [pc, #152]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e2a:	e064      	b.n	8009ef6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d047      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e34:	4b22      	ldr	r3, [pc, #136]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f023 0219 	bic.w	r2, r3, #25
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	491f      	ldr	r1, [pc, #124]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e46:	f7f9 faa7 	bl	8003398 <HAL_GetTick>
 8009e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e4c:	e008      	b.n	8009e60 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e4e:	f7f9 faa3 	bl	8003398 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d901      	bls.n	8009e60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e307      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e60:	4b17      	ldr	r3, [pc, #92]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0304 	and.w	r3, r3, #4
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0f0      	beq.n	8009e4e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e6c:	f7f9 fac4 	bl	80033f8 <HAL_GetREVID>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d817      	bhi.n	8009eaa <HAL_RCC_OscConfig+0x286>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	2b40      	cmp	r3, #64	; 0x40
 8009e80:	d108      	bne.n	8009e94 <HAL_RCC_OscConfig+0x270>
 8009e82:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009e8a:	4a0d      	ldr	r2, [pc, #52]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e90:	6053      	str	r3, [r2, #4]
 8009e92:	e030      	b.n	8009ef6 <HAL_RCC_OscConfig+0x2d2>
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	031b      	lsls	r3, r3, #12
 8009ea2:	4907      	ldr	r1, [pc, #28]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	604b      	str	r3, [r1, #4]
 8009ea8:	e025      	b.n	8009ef6 <HAL_RCC_OscConfig+0x2d2>
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	061b      	lsls	r3, r3, #24
 8009eb8:	4901      	ldr	r1, [pc, #4]	; (8009ec0 <HAL_RCC_OscConfig+0x29c>)
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	604b      	str	r3, [r1, #4]
 8009ebe:	e01a      	b.n	8009ef6 <HAL_RCC_OscConfig+0x2d2>
 8009ec0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ec4:	4b9e      	ldr	r3, [pc, #632]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a9d      	ldr	r2, [pc, #628]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009eca:	f023 0301 	bic.w	r3, r3, #1
 8009ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed0:	f7f9 fa62 	bl	8003398 <HAL_GetTick>
 8009ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ed8:	f7f9 fa5e 	bl	8003398 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e2c2      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009eea:	4b95      	ldr	r3, [pc, #596]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0310 	and.w	r3, r3, #16
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 80a9 	beq.w	800a056 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f04:	4b8e      	ldr	r3, [pc, #568]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f0e:	4b8c      	ldr	r3, [pc, #560]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d007      	beq.n	8009f2a <HAL_RCC_OscConfig+0x306>
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	2b18      	cmp	r3, #24
 8009f1e:	d13a      	bne.n	8009f96 <HAL_RCC_OscConfig+0x372>
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f003 0303 	and.w	r3, r3, #3
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d135      	bne.n	8009f96 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f2a:	4b85      	ldr	r3, [pc, #532]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d005      	beq.n	8009f42 <HAL_RCC_OscConfig+0x31e>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	69db      	ldr	r3, [r3, #28]
 8009f3a:	2b80      	cmp	r3, #128	; 0x80
 8009f3c:	d001      	beq.n	8009f42 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e296      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f42:	f7f9 fa59 	bl	80033f8 <HAL_GetREVID>
 8009f46:	4603      	mov	r3, r0
 8009f48:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d817      	bhi.n	8009f80 <HAL_RCC_OscConfig+0x35c>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	d108      	bne.n	8009f6a <HAL_RCC_OscConfig+0x346>
 8009f58:	4b79      	ldr	r3, [pc, #484]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009f60:	4a77      	ldr	r2, [pc, #476]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f66:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f68:	e075      	b.n	800a056 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f6a:	4b75      	ldr	r3, [pc, #468]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	069b      	lsls	r3, r3, #26
 8009f78:	4971      	ldr	r1, [pc, #452]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f7e:	e06a      	b.n	800a056 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f80:	4b6f      	ldr	r3, [pc, #444]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	061b      	lsls	r3, r3, #24
 8009f8e:	496c      	ldr	r1, [pc, #432]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f94:	e05f      	b.n	800a056 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d042      	beq.n	800a024 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009f9e:	4b68      	ldr	r3, [pc, #416]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a67      	ldr	r2, [pc, #412]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009faa:	f7f9 f9f5 	bl	8003398 <HAL_GetTick>
 8009fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fb0:	e008      	b.n	8009fc4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009fb2:	f7f9 f9f1 	bl	8003398 <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d901      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e255      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fc4:	4b5e      	ldr	r3, [pc, #376]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0f0      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fd0:	f7f9 fa12 	bl	80033f8 <HAL_GetREVID>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f241 0203 	movw	r2, #4099	; 0x1003
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d817      	bhi.n	800a00e <HAL_RCC_OscConfig+0x3ea>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	d108      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x3d4>
 8009fe6:	4b56      	ldr	r3, [pc, #344]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009fee:	4a54      	ldr	r2, [pc, #336]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ff4:	6053      	str	r3, [r2, #4]
 8009ff6:	e02e      	b.n	800a056 <HAL_RCC_OscConfig+0x432>
 8009ff8:	4b51      	ldr	r3, [pc, #324]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	069b      	lsls	r3, r3, #26
 800a006:	494e      	ldr	r1, [pc, #312]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	604b      	str	r3, [r1, #4]
 800a00c:	e023      	b.n	800a056 <HAL_RCC_OscConfig+0x432>
 800a00e:	4b4c      	ldr	r3, [pc, #304]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	061b      	lsls	r3, r3, #24
 800a01c:	4948      	ldr	r1, [pc, #288]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	60cb      	str	r3, [r1, #12]
 800a022:	e018      	b.n	800a056 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a024:	4b46      	ldr	r3, [pc, #280]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a45      	ldr	r2, [pc, #276]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a02a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a02e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a030:	f7f9 f9b2 	bl	8003398 <HAL_GetTick>
 800a034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a036:	e008      	b.n	800a04a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a038:	f7f9 f9ae 	bl	8003398 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	2b02      	cmp	r3, #2
 800a044:	d901      	bls.n	800a04a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e212      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a04a:	4b3d      	ldr	r3, [pc, #244]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1f0      	bne.n	800a038 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0308 	and.w	r3, r3, #8
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d036      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d019      	beq.n	800a09e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a06a:	4b35      	ldr	r3, [pc, #212]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a06e:	4a34      	ldr	r2, [pc, #208]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a070:	f043 0301 	orr.w	r3, r3, #1
 800a074:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a076:	f7f9 f98f 	bl	8003398 <HAL_GetTick>
 800a07a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a07c:	e008      	b.n	800a090 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a07e:	f7f9 f98b 	bl	8003398 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e1ef      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a090:	4b2b      	ldr	r3, [pc, #172]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d0f0      	beq.n	800a07e <HAL_RCC_OscConfig+0x45a>
 800a09c:	e018      	b.n	800a0d0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a09e:	4b28      	ldr	r3, [pc, #160]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a2:	4a27      	ldr	r2, [pc, #156]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a0a4:	f023 0301 	bic.w	r3, r3, #1
 800a0a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0aa:	f7f9 f975 	bl	8003398 <HAL_GetTick>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a0b0:	e008      	b.n	800a0c4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0b2:	f7f9 f971 	bl	8003398 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d901      	bls.n	800a0c4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e1d5      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c8:	f003 0302 	and.w	r3, r3, #2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1f0      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d039      	beq.n	800a150 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d019      	beq.n	800a118 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a0e4:	4b16      	ldr	r3, [pc, #88]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a15      	ldr	r2, [pc, #84]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a0ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0f0:	f7f9 f952 	bl	8003398 <HAL_GetTick>
 800a0f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0f6:	e008      	b.n	800a10a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a0f8:	f7f9 f94e 	bl	8003398 <HAL_GetTick>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	2b02      	cmp	r3, #2
 800a104:	d901      	bls.n	800a10a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e1b2      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a10a:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0f0      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x4d4>
 800a116:	e01b      	b.n	800a150 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a118:	4b09      	ldr	r3, [pc, #36]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a08      	ldr	r2, [pc, #32]	; (800a140 <HAL_RCC_OscConfig+0x51c>)
 800a11e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a122:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a124:	f7f9 f938 	bl	8003398 <HAL_GetTick>
 800a128:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a12a:	e00b      	b.n	800a144 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a12c:	f7f9 f934 	bl	8003398 <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	2b02      	cmp	r3, #2
 800a138:	d904      	bls.n	800a144 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e198      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
 800a13e:	bf00      	nop
 800a140:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a144:	4ba3      	ldr	r3, [pc, #652]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1ed      	bne.n	800a12c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 0304 	and.w	r3, r3, #4
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 8081 	beq.w	800a260 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a15e:	4b9e      	ldr	r3, [pc, #632]	; (800a3d8 <HAL_RCC_OscConfig+0x7b4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a9d      	ldr	r2, [pc, #628]	; (800a3d8 <HAL_RCC_OscConfig+0x7b4>)
 800a164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a168:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a16a:	f7f9 f915 	bl	8003398 <HAL_GetTick>
 800a16e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a170:	e008      	b.n	800a184 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a172:	f7f9 f911 	bl	8003398 <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	2b64      	cmp	r3, #100	; 0x64
 800a17e:	d901      	bls.n	800a184 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e175      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a184:	4b94      	ldr	r3, [pc, #592]	; (800a3d8 <HAL_RCC_OscConfig+0x7b4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d0f0      	beq.n	800a172 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d106      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x582>
 800a198:	4b8e      	ldr	r3, [pc, #568]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19c:	4a8d      	ldr	r2, [pc, #564]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a19e:	f043 0301 	orr.w	r3, r3, #1
 800a1a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a1a4:	e02d      	b.n	800a202 <HAL_RCC_OscConfig+0x5de>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10c      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x5a4>
 800a1ae:	4b89      	ldr	r3, [pc, #548]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	4a88      	ldr	r2, [pc, #544]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1b4:	f023 0301 	bic.w	r3, r3, #1
 800a1b8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ba:	4b86      	ldr	r3, [pc, #536]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1be:	4a85      	ldr	r2, [pc, #532]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1c0:	f023 0304 	bic.w	r3, r3, #4
 800a1c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a1c6:	e01c      	b.n	800a202 <HAL_RCC_OscConfig+0x5de>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	2b05      	cmp	r3, #5
 800a1ce:	d10c      	bne.n	800a1ea <HAL_RCC_OscConfig+0x5c6>
 800a1d0:	4b80      	ldr	r3, [pc, #512]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d4:	4a7f      	ldr	r2, [pc, #508]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1d6:	f043 0304 	orr.w	r3, r3, #4
 800a1da:	6713      	str	r3, [r2, #112]	; 0x70
 800a1dc:	4b7d      	ldr	r3, [pc, #500]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e0:	4a7c      	ldr	r2, [pc, #496]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	6713      	str	r3, [r2, #112]	; 0x70
 800a1e8:	e00b      	b.n	800a202 <HAL_RCC_OscConfig+0x5de>
 800a1ea:	4b7a      	ldr	r3, [pc, #488]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ee:	4a79      	ldr	r2, [pc, #484]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1f0:	f023 0301 	bic.w	r3, r3, #1
 800a1f4:	6713      	str	r3, [r2, #112]	; 0x70
 800a1f6:	4b77      	ldr	r3, [pc, #476]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1fa:	4a76      	ldr	r2, [pc, #472]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a1fc:	f023 0304 	bic.w	r3, r3, #4
 800a200:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d015      	beq.n	800a236 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a20a:	f7f9 f8c5 	bl	8003398 <HAL_GetTick>
 800a20e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a210:	e00a      	b.n	800a228 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a212:	f7f9 f8c1 	bl	8003398 <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a220:	4293      	cmp	r3, r2
 800a222:	d901      	bls.n	800a228 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e123      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a228:	4b6a      	ldr	r3, [pc, #424]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	d0ee      	beq.n	800a212 <HAL_RCC_OscConfig+0x5ee>
 800a234:	e014      	b.n	800a260 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a236:	f7f9 f8af 	bl	8003398 <HAL_GetTick>
 800a23a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a23c:	e00a      	b.n	800a254 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a23e:	f7f9 f8ab 	bl	8003398 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	f241 3288 	movw	r2, #5000	; 0x1388
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d901      	bls.n	800a254 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e10d      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a254:	4b5f      	ldr	r3, [pc, #380]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1ee      	bne.n	800a23e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 8102 	beq.w	800a46e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a26a:	4b5a      	ldr	r3, [pc, #360]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a272:	2b18      	cmp	r3, #24
 800a274:	f000 80bd 	beq.w	800a3f2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	f040 8095 	bne.w	800a3ac <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a282:	4b54      	ldr	r3, [pc, #336]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a53      	ldr	r2, [pc, #332]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a28c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28e:	f7f9 f883 	bl	8003398 <HAL_GetTick>
 800a292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a294:	e008      	b.n	800a2a8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a296:	f7f9 f87f 	bl	8003398 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e0e3      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2a8:	4b4a      	ldr	r3, [pc, #296]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1f0      	bne.n	800a296 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2b4:	4b47      	ldr	r3, [pc, #284]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2b8:	4b48      	ldr	r3, [pc, #288]	; (800a3dc <HAL_RCC_OscConfig+0x7b8>)
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a2c4:	0112      	lsls	r2, r2, #4
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	4942      	ldr	r1, [pc, #264]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	628b      	str	r3, [r1, #40]	; 0x28
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	025b      	lsls	r3, r3, #9
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	041b      	lsls	r3, r3, #16
 800a2ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	061b      	lsls	r3, r3, #24
 800a2fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2fe:	4935      	ldr	r1, [pc, #212]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a300:	4313      	orrs	r3, r2
 800a302:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a304:	4b33      	ldr	r3, [pc, #204]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a308:	4a32      	ldr	r2, [pc, #200]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a30a:	f023 0301 	bic.w	r3, r3, #1
 800a30e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a310:	4b30      	ldr	r3, [pc, #192]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a314:	4b32      	ldr	r3, [pc, #200]	; (800a3e0 <HAL_RCC_OscConfig+0x7bc>)
 800a316:	4013      	ands	r3, r2
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a31c:	00d2      	lsls	r2, r2, #3
 800a31e:	492d      	ldr	r1, [pc, #180]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a320:	4313      	orrs	r3, r2
 800a322:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a324:	4b2b      	ldr	r3, [pc, #172]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	f023 020c 	bic.w	r2, r3, #12
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a330:	4928      	ldr	r1, [pc, #160]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a332:	4313      	orrs	r3, r2
 800a334:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a336:	4b27      	ldr	r3, [pc, #156]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33a:	f023 0202 	bic.w	r2, r3, #2
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a342:	4924      	ldr	r1, [pc, #144]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a344:	4313      	orrs	r3, r2
 800a346:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a348:	4b22      	ldr	r3, [pc, #136]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	4a21      	ldr	r2, [pc, #132]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a34e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a354:	4b1f      	ldr	r3, [pc, #124]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	4a1e      	ldr	r2, [pc, #120]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a35a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a35e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a360:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a364:	4a1b      	ldr	r2, [pc, #108]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a36a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a36c:	4b19      	ldr	r3, [pc, #100]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	4a18      	ldr	r2, [pc, #96]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a372:	f043 0301 	orr.w	r3, r3, #1
 800a376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a378:	4b16      	ldr	r3, [pc, #88]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a15      	ldr	r2, [pc, #84]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a37e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a384:	f7f9 f808 	bl	8003398 <HAL_GetTick>
 800a388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a38a:	e008      	b.n	800a39e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a38c:	f7f9 f804 	bl	8003398 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	2b02      	cmp	r3, #2
 800a398:	d901      	bls.n	800a39e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e068      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a39e:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0f0      	beq.n	800a38c <HAL_RCC_OscConfig+0x768>
 800a3aa:	e060      	b.n	800a46e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3ac:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a08      	ldr	r2, [pc, #32]	; (800a3d4 <HAL_RCC_OscConfig+0x7b0>)
 800a3b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3b8:	f7f8 ffee 	bl	8003398 <HAL_GetTick>
 800a3bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3be:	e011      	b.n	800a3e4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3c0:	f7f8 ffea 	bl	8003398 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d90a      	bls.n	800a3e4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e04e      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
 800a3d2:	bf00      	nop
 800a3d4:	58024400 	.word	0x58024400
 800a3d8:	58024800 	.word	0x58024800
 800a3dc:	fffffc0c 	.word	0xfffffc0c
 800a3e0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3e4:	4b24      	ldr	r3, [pc, #144]	; (800a478 <HAL_RCC_OscConfig+0x854>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e7      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x79c>
 800a3f0:	e03d      	b.n	800a46e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a3f2:	4b21      	ldr	r3, [pc, #132]	; (800a478 <HAL_RCC_OscConfig+0x854>)
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a3f8:	4b1f      	ldr	r3, [pc, #124]	; (800a478 <HAL_RCC_OscConfig+0x854>)
 800a3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a402:	2b01      	cmp	r3, #1
 800a404:	d031      	beq.n	800a46a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f003 0203 	and.w	r2, r3, #3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a410:	429a      	cmp	r2, r3
 800a412:	d12a      	bne.n	800a46a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	091b      	lsrs	r3, r3, #4
 800a418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a420:	429a      	cmp	r2, r3
 800a422:	d122      	bne.n	800a46a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a430:	429a      	cmp	r2, r3
 800a432:	d11a      	bne.n	800a46a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	0a5b      	lsrs	r3, r3, #9
 800a438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a440:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a442:	429a      	cmp	r2, r3
 800a444:	d111      	bne.n	800a46a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	0c1b      	lsrs	r3, r3, #16
 800a44a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a454:	429a      	cmp	r2, r3
 800a456:	d108      	bne.n	800a46a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	0e1b      	lsrs	r3, r3, #24
 800a45c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a464:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a466:	429a      	cmp	r2, r3
 800a468:	d001      	beq.n	800a46e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3730      	adds	r7, #48	; 0x30
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	58024400 	.word	0x58024400

0800a47c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e19c      	b.n	800a7ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a490:	4b8a      	ldr	r3, [pc, #552]	; (800a6bc <HAL_RCC_ClockConfig+0x240>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 030f 	and.w	r3, r3, #15
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d910      	bls.n	800a4c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a49e:	4b87      	ldr	r3, [pc, #540]	; (800a6bc <HAL_RCC_ClockConfig+0x240>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f023 020f 	bic.w	r2, r3, #15
 800a4a6:	4985      	ldr	r1, [pc, #532]	; (800a6bc <HAL_RCC_ClockConfig+0x240>)
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4ae:	4b83      	ldr	r3, [pc, #524]	; (800a6bc <HAL_RCC_ClockConfig+0x240>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d001      	beq.n	800a4c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e184      	b.n	800a7ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d010      	beq.n	800a4ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	4b7b      	ldr	r3, [pc, #492]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d908      	bls.n	800a4ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4dc:	4b78      	ldr	r3, [pc, #480]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	4975      	ldr	r1, [pc, #468]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 0308 	and.w	r3, r3, #8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d010      	beq.n	800a51c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	695a      	ldr	r2, [r3, #20]
 800a4fe:	4b70      	ldr	r3, [pc, #448]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a506:	429a      	cmp	r2, r3
 800a508:	d908      	bls.n	800a51c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a50a:	4b6d      	ldr	r3, [pc, #436]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	496a      	ldr	r1, [pc, #424]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0310 	and.w	r3, r3, #16
 800a524:	2b00      	cmp	r3, #0
 800a526:	d010      	beq.n	800a54a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699a      	ldr	r2, [r3, #24]
 800a52c:	4b64      	ldr	r3, [pc, #400]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a534:	429a      	cmp	r2, r3
 800a536:	d908      	bls.n	800a54a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a538:	4b61      	ldr	r3, [pc, #388]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	495e      	ldr	r1, [pc, #376]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a546:	4313      	orrs	r3, r2
 800a548:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 0320 	and.w	r3, r3, #32
 800a552:	2b00      	cmp	r3, #0
 800a554:	d010      	beq.n	800a578 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	69da      	ldr	r2, [r3, #28]
 800a55a:	4b59      	ldr	r3, [pc, #356]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a562:	429a      	cmp	r2, r3
 800a564:	d908      	bls.n	800a578 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a566:	4b56      	ldr	r3, [pc, #344]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	4953      	ldr	r1, [pc, #332]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a574:	4313      	orrs	r3, r2
 800a576:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0302 	and.w	r3, r3, #2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d010      	beq.n	800a5a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68da      	ldr	r2, [r3, #12]
 800a588:	4b4d      	ldr	r3, [pc, #308]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	f003 030f 	and.w	r3, r3, #15
 800a590:	429a      	cmp	r2, r3
 800a592:	d908      	bls.n	800a5a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a594:	4b4a      	ldr	r3, [pc, #296]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	f023 020f 	bic.w	r2, r3, #15
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	4947      	ldr	r1, [pc, #284]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d055      	beq.n	800a65e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a5b2:	4b43      	ldr	r3, [pc, #268]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	4940      	ldr	r1, [pc, #256]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d107      	bne.n	800a5dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5cc:	4b3c      	ldr	r3, [pc, #240]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d121      	bne.n	800a61c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e0f6      	b.n	800a7ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d107      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5e4:	4b36      	ldr	r3, [pc, #216]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d115      	bne.n	800a61c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e0ea      	b.n	800a7ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d107      	bne.n	800a60c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5fc:	4b30      	ldr	r3, [pc, #192]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a604:	2b00      	cmp	r3, #0
 800a606:	d109      	bne.n	800a61c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e0de      	b.n	800a7ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a60c:	4b2c      	ldr	r3, [pc, #176]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0304 	and.w	r3, r3, #4
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e0d6      	b.n	800a7ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a61c:	4b28      	ldr	r3, [pc, #160]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	f023 0207 	bic.w	r2, r3, #7
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	4925      	ldr	r1, [pc, #148]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a62e:	f7f8 feb3 	bl	8003398 <HAL_GetTick>
 800a632:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a634:	e00a      	b.n	800a64c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a636:	f7f8 feaf 	bl	8003398 <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	f241 3288 	movw	r2, #5000	; 0x1388
 800a644:	4293      	cmp	r3, r2
 800a646:	d901      	bls.n	800a64c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e0be      	b.n	800a7ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a64c:	4b1c      	ldr	r3, [pc, #112]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d1eb      	bne.n	800a636 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 0302 	and.w	r3, r3, #2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d010      	beq.n	800a68c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f003 030f 	and.w	r3, r3, #15
 800a676:	429a      	cmp	r2, r3
 800a678:	d208      	bcs.n	800a68c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	f023 020f 	bic.w	r2, r3, #15
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	490e      	ldr	r1, [pc, #56]	; (800a6c0 <HAL_RCC_ClockConfig+0x244>)
 800a688:	4313      	orrs	r3, r2
 800a68a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a68c:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <HAL_RCC_ClockConfig+0x240>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 030f 	and.w	r3, r3, #15
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	429a      	cmp	r2, r3
 800a698:	d214      	bcs.n	800a6c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a69a:	4b08      	ldr	r3, [pc, #32]	; (800a6bc <HAL_RCC_ClockConfig+0x240>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f023 020f 	bic.w	r2, r3, #15
 800a6a2:	4906      	ldr	r1, [pc, #24]	; (800a6bc <HAL_RCC_ClockConfig+0x240>)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6aa:	4b04      	ldr	r3, [pc, #16]	; (800a6bc <HAL_RCC_ClockConfig+0x240>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 030f 	and.w	r3, r3, #15
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d005      	beq.n	800a6c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e086      	b.n	800a7ca <HAL_RCC_ClockConfig+0x34e>
 800a6bc:	52002000 	.word	0x52002000
 800a6c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d010      	beq.n	800a6f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	691a      	ldr	r2, [r3, #16]
 800a6d4:	4b3f      	ldr	r3, [pc, #252]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d208      	bcs.n	800a6f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6e0:	4b3c      	ldr	r3, [pc, #240]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	4939      	ldr	r1, [pc, #228]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0308 	and.w	r3, r3, #8
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d010      	beq.n	800a720 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	695a      	ldr	r2, [r3, #20]
 800a702:	4b34      	ldr	r3, [pc, #208]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d208      	bcs.n	800a720 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a70e:	4b31      	ldr	r3, [pc, #196]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	492e      	ldr	r1, [pc, #184]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a71c:	4313      	orrs	r3, r2
 800a71e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0310 	and.w	r3, r3, #16
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d010      	beq.n	800a74e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	699a      	ldr	r2, [r3, #24]
 800a730:	4b28      	ldr	r3, [pc, #160]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a738:	429a      	cmp	r2, r3
 800a73a:	d208      	bcs.n	800a74e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a73c:	4b25      	ldr	r3, [pc, #148]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	4922      	ldr	r1, [pc, #136]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b00      	cmp	r3, #0
 800a758:	d010      	beq.n	800a77c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	69da      	ldr	r2, [r3, #28]
 800a75e:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a766:	429a      	cmp	r2, r3
 800a768:	d208      	bcs.n	800a77c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a76a:	4b1a      	ldr	r3, [pc, #104]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	4917      	ldr	r1, [pc, #92]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a778:	4313      	orrs	r3, r2
 800a77a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a77c:	f000 f834 	bl	800a7e8 <HAL_RCC_GetSysClockFreq>
 800a780:	4602      	mov	r2, r0
 800a782:	4b14      	ldr	r3, [pc, #80]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	0a1b      	lsrs	r3, r3, #8
 800a788:	f003 030f 	and.w	r3, r3, #15
 800a78c:	4912      	ldr	r1, [pc, #72]	; (800a7d8 <HAL_RCC_ClockConfig+0x35c>)
 800a78e:	5ccb      	ldrb	r3, [r1, r3]
 800a790:	f003 031f 	and.w	r3, r3, #31
 800a794:	fa22 f303 	lsr.w	r3, r2, r3
 800a798:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a79a:	4b0e      	ldr	r3, [pc, #56]	; (800a7d4 <HAL_RCC_ClockConfig+0x358>)
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	f003 030f 	and.w	r3, r3, #15
 800a7a2:	4a0d      	ldr	r2, [pc, #52]	; (800a7d8 <HAL_RCC_ClockConfig+0x35c>)
 800a7a4:	5cd3      	ldrb	r3, [r2, r3]
 800a7a6:	f003 031f 	and.w	r3, r3, #31
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b0:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <HAL_RCC_ClockConfig+0x360>)
 800a7b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7b4:	4a0a      	ldr	r2, [pc, #40]	; (800a7e0 <HAL_RCC_ClockConfig+0x364>)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a7ba:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <HAL_RCC_ClockConfig+0x368>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f8 fda0 	bl	8003304 <HAL_InitTick>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	58024400 	.word	0x58024400
 800a7d8:	0800ee78 	.word	0x0800ee78
 800a7dc:	24000004 	.word	0x24000004
 800a7e0:	24000000 	.word	0x24000000
 800a7e4:	24000008 	.word	0x24000008

0800a7e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b089      	sub	sp, #36	; 0x24
 800a7ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7ee:	4bb3      	ldr	r3, [pc, #716]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7f6:	2b18      	cmp	r3, #24
 800a7f8:	f200 8155 	bhi.w	800aaa6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a7fc:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a802:	bf00      	nop
 800a804:	0800a869 	.word	0x0800a869
 800a808:	0800aaa7 	.word	0x0800aaa7
 800a80c:	0800aaa7 	.word	0x0800aaa7
 800a810:	0800aaa7 	.word	0x0800aaa7
 800a814:	0800aaa7 	.word	0x0800aaa7
 800a818:	0800aaa7 	.word	0x0800aaa7
 800a81c:	0800aaa7 	.word	0x0800aaa7
 800a820:	0800aaa7 	.word	0x0800aaa7
 800a824:	0800a88f 	.word	0x0800a88f
 800a828:	0800aaa7 	.word	0x0800aaa7
 800a82c:	0800aaa7 	.word	0x0800aaa7
 800a830:	0800aaa7 	.word	0x0800aaa7
 800a834:	0800aaa7 	.word	0x0800aaa7
 800a838:	0800aaa7 	.word	0x0800aaa7
 800a83c:	0800aaa7 	.word	0x0800aaa7
 800a840:	0800aaa7 	.word	0x0800aaa7
 800a844:	0800a895 	.word	0x0800a895
 800a848:	0800aaa7 	.word	0x0800aaa7
 800a84c:	0800aaa7 	.word	0x0800aaa7
 800a850:	0800aaa7 	.word	0x0800aaa7
 800a854:	0800aaa7 	.word	0x0800aaa7
 800a858:	0800aaa7 	.word	0x0800aaa7
 800a85c:	0800aaa7 	.word	0x0800aaa7
 800a860:	0800aaa7 	.word	0x0800aaa7
 800a864:	0800a89b 	.word	0x0800a89b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a868:	4b94      	ldr	r3, [pc, #592]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0320 	and.w	r3, r3, #32
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a874:	4b91      	ldr	r3, [pc, #580]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	08db      	lsrs	r3, r3, #3
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	4a90      	ldr	r2, [pc, #576]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a880:	fa22 f303 	lsr.w	r3, r2, r3
 800a884:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a886:	e111      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a888:	4b8d      	ldr	r3, [pc, #564]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a88a:	61bb      	str	r3, [r7, #24]
    break;
 800a88c:	e10e      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a88e:	4b8d      	ldr	r3, [pc, #564]	; (800aac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a890:	61bb      	str	r3, [r7, #24]
    break;
 800a892:	e10b      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a894:	4b8c      	ldr	r3, [pc, #560]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a896:	61bb      	str	r3, [r7, #24]
    break;
 800a898:	e108      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a89a:	4b88      	ldr	r3, [pc, #544]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89e:	f003 0303 	and.w	r3, r3, #3
 800a8a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a8a4:	4b85      	ldr	r3, [pc, #532]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a8:	091b      	lsrs	r3, r3, #4
 800a8aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a8b0:	4b82      	ldr	r3, [pc, #520]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a8ba:	4b80      	ldr	r3, [pc, #512]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8be:	08db      	lsrs	r3, r3, #3
 800a8c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 80e1 	beq.w	800aaa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	f000 8083 	beq.w	800a9ec <HAL_RCC_GetSysClockFreq+0x204>
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	f200 80a1 	bhi.w	800aa30 <HAL_RCC_GetSysClockFreq+0x248>
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_RCC_GetSysClockFreq+0x114>
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d056      	beq.n	800a9a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a8fa:	e099      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8fc:	4b6f      	ldr	r3, [pc, #444]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0320 	and.w	r3, r3, #32
 800a904:	2b00      	cmp	r3, #0
 800a906:	d02d      	beq.n	800a964 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a908:	4b6c      	ldr	r3, [pc, #432]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	08db      	lsrs	r3, r3, #3
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	4a6b      	ldr	r2, [pc, #428]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a914:	fa22 f303 	lsr.w	r3, r2, r3
 800a918:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a932:	4b62      	ldr	r3, [pc, #392]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a942:	ed97 6a02 	vldr	s12, [r7, #8]
 800a946:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a962:	e087      	b.n	800aa74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aad0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a976:	4b51      	ldr	r3, [pc, #324]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a986:	ed97 6a02 	vldr	s12, [r7, #8]
 800a98a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9a6:	e065      	b.n	800aa74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ba:	4b40      	ldr	r3, [pc, #256]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9ea:	e043      	b.n	800aa74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aad8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fe:	4b2f      	ldr	r3, [pc, #188]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa2e:	e021      	b.n	800aa74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa42:	4b1e      	ldr	r3, [pc, #120]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa52:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800aa74:	4b11      	ldr	r3, [pc, #68]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa78:	0a5b      	lsrs	r3, r3, #9
 800aa7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7e:	3301      	adds	r3, #1
 800aa80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	ee07 3a90 	vmov	s15, r3
 800aa88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa98:	ee17 3a90 	vmov	r3, s15
 800aa9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800aa9e:	e005      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	61bb      	str	r3, [r7, #24]
    break;
 800aaa4:	e002      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800aaa6:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aaa8:	61bb      	str	r3, [r7, #24]
    break;
 800aaaa:	bf00      	nop
  }

  return sysclockfreq;
 800aaac:	69bb      	ldr	r3, [r7, #24]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3724      	adds	r7, #36	; 0x24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	58024400 	.word	0x58024400
 800aac0:	03d09000 	.word	0x03d09000
 800aac4:	003d0900 	.word	0x003d0900
 800aac8:	007a1200 	.word	0x007a1200
 800aacc:	46000000 	.word	0x46000000
 800aad0:	4c742400 	.word	0x4c742400
 800aad4:	4a742400 	.word	0x4a742400
 800aad8:	4af42400 	.word	0x4af42400

0800aadc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aae2:	f7ff fe81 	bl	800a7e8 <HAL_RCC_GetSysClockFreq>
 800aae6:	4602      	mov	r2, r0
 800aae8:	4b10      	ldr	r3, [pc, #64]	; (800ab2c <HAL_RCC_GetHCLKFreq+0x50>)
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	0a1b      	lsrs	r3, r3, #8
 800aaee:	f003 030f 	and.w	r3, r3, #15
 800aaf2:	490f      	ldr	r1, [pc, #60]	; (800ab30 <HAL_RCC_GetHCLKFreq+0x54>)
 800aaf4:	5ccb      	ldrb	r3, [r1, r3]
 800aaf6:	f003 031f 	and.w	r3, r3, #31
 800aafa:	fa22 f303 	lsr.w	r3, r2, r3
 800aafe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab00:	4b0a      	ldr	r3, [pc, #40]	; (800ab2c <HAL_RCC_GetHCLKFreq+0x50>)
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	f003 030f 	and.w	r3, r3, #15
 800ab08:	4a09      	ldr	r2, [pc, #36]	; (800ab30 <HAL_RCC_GetHCLKFreq+0x54>)
 800ab0a:	5cd3      	ldrb	r3, [r2, r3]
 800ab0c:	f003 031f 	and.w	r3, r3, #31
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	fa22 f303 	lsr.w	r3, r2, r3
 800ab16:	4a07      	ldr	r2, [pc, #28]	; (800ab34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab1a:	4a07      	ldr	r2, [pc, #28]	; (800ab38 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab22:	681b      	ldr	r3, [r3, #0]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	58024400 	.word	0x58024400
 800ab30:	0800ee78 	.word	0x0800ee78
 800ab34:	24000004 	.word	0x24000004
 800ab38:	24000000 	.word	0x24000000

0800ab3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ab40:	f7ff ffcc 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 800ab44:	4602      	mov	r2, r0
 800ab46:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	091b      	lsrs	r3, r3, #4
 800ab4c:	f003 0307 	and.w	r3, r3, #7
 800ab50:	4904      	ldr	r1, [pc, #16]	; (800ab64 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab52:	5ccb      	ldrb	r3, [r1, r3]
 800ab54:	f003 031f 	and.w	r3, r3, #31
 800ab58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	58024400 	.word	0x58024400
 800ab64:	0800ee78 	.word	0x0800ee78

0800ab68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ab6c:	f7ff ffb6 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 800ab70:	4602      	mov	r2, r0
 800ab72:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	4904      	ldr	r1, [pc, #16]	; (800ab90 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab7e:	5ccb      	ldrb	r3, [r1, r3]
 800ab80:	f003 031f 	and.w	r3, r3, #31
 800ab84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	58024400 	.word	0x58024400
 800ab90:	0800ee78 	.word	0x0800ee78

0800ab94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aba0:	2300      	movs	r3, #0
 800aba2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d03f      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abb8:	d02a      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800abba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abbe:	d824      	bhi.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800abc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abc4:	d018      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800abc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abca:	d81e      	bhi.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800abd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abd4:	d007      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800abd6:	e018      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abd8:	4bab      	ldr	r3, [pc, #684]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abdc:	4aaa      	ldr	r2, [pc, #680]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800abe4:	e015      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3304      	adds	r3, #4
 800abea:	2102      	movs	r1, #2
 800abec:	4618      	mov	r0, r3
 800abee:	f001 f9cf 	bl	800bf90 <RCCEx_PLL2_Config>
 800abf2:	4603      	mov	r3, r0
 800abf4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800abf6:	e00c      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	3324      	adds	r3, #36	; 0x24
 800abfc:	2102      	movs	r1, #2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f001 fa78 	bl	800c0f4 <RCCEx_PLL3_Config>
 800ac04:	4603      	mov	r3, r0
 800ac06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ac08:	e003      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac0e:	e000      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ac10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d109      	bne.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ac18:	4b9b      	ldr	r3, [pc, #620]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac24:	4998      	ldr	r1, [pc, #608]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	650b      	str	r3, [r1, #80]	; 0x50
 800ac2a:	e001      	b.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d03d      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac40:	2b04      	cmp	r3, #4
 800ac42:	d826      	bhi.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ac44:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac61 	.word	0x0800ac61
 800ac50:	0800ac6f 	.word	0x0800ac6f
 800ac54:	0800ac81 	.word	0x0800ac81
 800ac58:	0800ac99 	.word	0x0800ac99
 800ac5c:	0800ac99 	.word	0x0800ac99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac60:	4b89      	ldr	r3, [pc, #548]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4a88      	ldr	r2, [pc, #544]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac6c:	e015      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	3304      	adds	r3, #4
 800ac72:	2100      	movs	r1, #0
 800ac74:	4618      	mov	r0, r3
 800ac76:	f001 f98b 	bl	800bf90 <RCCEx_PLL2_Config>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac7e:	e00c      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3324      	adds	r3, #36	; 0x24
 800ac84:	2100      	movs	r1, #0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 fa34 	bl	800c0f4 <RCCEx_PLL3_Config>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac90:	e003      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	75fb      	strb	r3, [r7, #23]
      break;
 800ac96:	e000      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ac98:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d109      	bne.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aca0:	4b79      	ldr	r3, [pc, #484]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca4:	f023 0207 	bic.w	r2, r3, #7
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acac:	4976      	ldr	r1, [pc, #472]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acae:	4313      	orrs	r3, r2
 800acb0:	650b      	str	r3, [r1, #80]	; 0x50
 800acb2:	e001      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
 800acb6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d042      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800accc:	d02b      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800acce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acd2:	d825      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800acd4:	2bc0      	cmp	r3, #192	; 0xc0
 800acd6:	d028      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800acd8:	2bc0      	cmp	r3, #192	; 0xc0
 800acda:	d821      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800acdc:	2b80      	cmp	r3, #128	; 0x80
 800acde:	d016      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ace0:	2b80      	cmp	r3, #128	; 0x80
 800ace2:	d81d      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ace8:	2b40      	cmp	r3, #64	; 0x40
 800acea:	d007      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800acec:	e018      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acee:	4b66      	ldr	r3, [pc, #408]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf2:	4a65      	ldr	r2, [pc, #404]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800acfa:	e017      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3304      	adds	r3, #4
 800ad00:	2100      	movs	r1, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f001 f944 	bl	800bf90 <RCCEx_PLL2_Config>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ad0c:	e00e      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3324      	adds	r3, #36	; 0x24
 800ad12:	2100      	movs	r1, #0
 800ad14:	4618      	mov	r0, r3
 800ad16:	f001 f9ed 	bl	800c0f4 <RCCEx_PLL3_Config>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ad1e:	e005      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	75fb      	strb	r3, [r7, #23]
      break;
 800ad24:	e002      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ad26:	bf00      	nop
 800ad28:	e000      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ad2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d109      	bne.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ad32:	4b55      	ldr	r3, [pc, #340]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad36:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad3e:	4952      	ldr	r1, [pc, #328]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	650b      	str	r3, [r1, #80]	; 0x50
 800ad44:	e001      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d049      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad60:	d030      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ad62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad66:	d82a      	bhi.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ad68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad6c:	d02c      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ad6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad72:	d824      	bhi.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ad74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad78:	d018      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ad7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad7e:	d81e      	bhi.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d003      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ad84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad88:	d007      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ad8a:	e018      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad8c:	4b3e      	ldr	r3, [pc, #248]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	4a3d      	ldr	r2, [pc, #244]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad98:	e017      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	2100      	movs	r1, #0
 800ada0:	4618      	mov	r0, r3
 800ada2:	f001 f8f5 	bl	800bf90 <RCCEx_PLL2_Config>
 800ada6:	4603      	mov	r3, r0
 800ada8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800adaa:	e00e      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3324      	adds	r3, #36	; 0x24
 800adb0:	2100      	movs	r1, #0
 800adb2:	4618      	mov	r0, r3
 800adb4:	f001 f99e 	bl	800c0f4 <RCCEx_PLL3_Config>
 800adb8:	4603      	mov	r3, r0
 800adba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800adbc:	e005      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	75fb      	strb	r3, [r7, #23]
      break;
 800adc2:	e002      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800adc4:	bf00      	nop
 800adc6:	e000      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800adc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10a      	bne.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800add0:	4b2d      	ldr	r3, [pc, #180]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800add2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800adde:	492a      	ldr	r1, [pc, #168]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ade0:	4313      	orrs	r3, r2
 800ade2:	658b      	str	r3, [r1, #88]	; 0x58
 800ade4:	e001      	b.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d04c      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae00:	d030      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ae02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae06:	d82a      	bhi.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ae08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae0c:	d02c      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800ae0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae12:	d824      	bhi.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ae14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae18:	d018      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ae1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae1e:	d81e      	bhi.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ae24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae28:	d007      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ae2a:	e018      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae2c:	4b16      	ldr	r3, [pc, #88]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae38:	e017      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	2100      	movs	r1, #0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 f8a5 	bl	800bf90 <RCCEx_PLL2_Config>
 800ae46:	4603      	mov	r3, r0
 800ae48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ae4a:	e00e      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3324      	adds	r3, #36	; 0x24
 800ae50:	2100      	movs	r1, #0
 800ae52:	4618      	mov	r0, r3
 800ae54:	f001 f94e 	bl	800c0f4 <RCCEx_PLL3_Config>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae5c:	e005      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	75fb      	strb	r3, [r7, #23]
      break;
 800ae62:	e002      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ae64:	bf00      	nop
 800ae66:	e000      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ae68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10d      	bne.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ae70:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae7e:	4902      	ldr	r1, [pc, #8]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae80:	4313      	orrs	r3, r2
 800ae82:	658b      	str	r3, [r1, #88]	; 0x58
 800ae84:	e004      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ae86:	bf00      	nop
 800ae88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d032      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aea0:	2b30      	cmp	r3, #48	; 0x30
 800aea2:	d01c      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aea4:	2b30      	cmp	r3, #48	; 0x30
 800aea6:	d817      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800aea8:	2b20      	cmp	r3, #32
 800aeaa:	d00c      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800aeac:	2b20      	cmp	r3, #32
 800aeae:	d813      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d016      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800aeb4:	2b10      	cmp	r3, #16
 800aeb6:	d10f      	bne.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeb8:	4baf      	ldr	r3, [pc, #700]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	4aae      	ldr	r2, [pc, #696]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aec4:	e00e      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3304      	adds	r3, #4
 800aeca:	2102      	movs	r1, #2
 800aecc:	4618      	mov	r0, r3
 800aece:	f001 f85f 	bl	800bf90 <RCCEx_PLL2_Config>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aed6:	e005      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	75fb      	strb	r3, [r7, #23]
      break;
 800aedc:	e002      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800aede:	bf00      	nop
 800aee0:	e000      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800aee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d109      	bne.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aeea:	4ba3      	ldr	r3, [pc, #652]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aeec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aef6:	49a0      	ldr	r1, [pc, #640]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aefc:	e001      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
 800af00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d047      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af16:	d030      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800af18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af1c:	d82a      	bhi.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800af1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af22:	d02c      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800af24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af28:	d824      	bhi.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800af2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af2e:	d018      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800af30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af34:	d81e      	bhi.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800af3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af3e:	d007      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800af40:	e018      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af42:	4b8d      	ldr	r3, [pc, #564]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af46:	4a8c      	ldr	r2, [pc, #560]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800af4e:	e017      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3304      	adds	r3, #4
 800af54:	2100      	movs	r1, #0
 800af56:	4618      	mov	r0, r3
 800af58:	f001 f81a 	bl	800bf90 <RCCEx_PLL2_Config>
 800af5c:	4603      	mov	r3, r0
 800af5e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800af60:	e00e      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3324      	adds	r3, #36	; 0x24
 800af66:	2100      	movs	r1, #0
 800af68:	4618      	mov	r0, r3
 800af6a:	f001 f8c3 	bl	800c0f4 <RCCEx_PLL3_Config>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800af72:	e005      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	75fb      	strb	r3, [r7, #23]
      break;
 800af78:	e002      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800af7a:	bf00      	nop
 800af7c:	e000      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800af7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d109      	bne.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af86:	4b7c      	ldr	r3, [pc, #496]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af8a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af92:	4979      	ldr	r1, [pc, #484]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af94:	4313      	orrs	r3, r2
 800af96:	650b      	str	r3, [r1, #80]	; 0x50
 800af98:	e001      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d049      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afb2:	d02e      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800afb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afb8:	d828      	bhi.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800afba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afbe:	d02a      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800afc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afc4:	d822      	bhi.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800afc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afca:	d026      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800afcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afd0:	d81c      	bhi.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800afd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afd6:	d010      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x466>
 800afd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afdc:	d816      	bhi.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d01d      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800afe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afe6:	d111      	bne.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3304      	adds	r3, #4
 800afec:	2101      	movs	r1, #1
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 ffce 	bl	800bf90 <RCCEx_PLL2_Config>
 800aff4:	4603      	mov	r3, r0
 800aff6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aff8:	e012      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3324      	adds	r3, #36	; 0x24
 800affe:	2101      	movs	r1, #1
 800b000:	4618      	mov	r0, r3
 800b002:	f001 f877 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b00a:	e009      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	75fb      	strb	r3, [r7, #23]
      break;
 800b010:	e006      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b012:	bf00      	nop
 800b014:	e004      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b016:	bf00      	nop
 800b018:	e002      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b01a:	bf00      	nop
 800b01c:	e000      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b01e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d109      	bne.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b026:	4b54      	ldr	r3, [pc, #336]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b02a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b032:	4951      	ldr	r1, [pc, #324]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b034:	4313      	orrs	r3, r2
 800b036:	650b      	str	r3, [r1, #80]	; 0x50
 800b038:	e001      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03a:	7dfb      	ldrb	r3, [r7, #23]
 800b03c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b046:	2b00      	cmp	r3, #0
 800b048:	d04b      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b054:	d02e      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b05a:	d828      	bhi.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b05c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b060:	d02a      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b066:	d822      	bhi.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b068:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b06c:	d026      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b06e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b072:	d81c      	bhi.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b078:	d010      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b07a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b07e:	d816      	bhi.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b080:	2b00      	cmp	r3, #0
 800b082:	d01d      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b088:	d111      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3304      	adds	r3, #4
 800b08e:	2101      	movs	r1, #1
 800b090:	4618      	mov	r0, r3
 800b092:	f000 ff7d 	bl	800bf90 <RCCEx_PLL2_Config>
 800b096:	4603      	mov	r3, r0
 800b098:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b09a:	e012      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3324      	adds	r3, #36	; 0x24
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f001 f826 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b0ac:	e009      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b0b2:	e006      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b0b4:	bf00      	nop
 800b0b6:	e004      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b0b8:	bf00      	nop
 800b0ba:	e002      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b0bc:	bf00      	nop
 800b0be:	e000      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b0c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0c2:	7dfb      	ldrb	r3, [r7, #23]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d10a      	bne.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0c8:	4b2b      	ldr	r3, [pc, #172]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0d6:	4928      	ldr	r1, [pc, #160]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	658b      	str	r3, [r1, #88]	; 0x58
 800b0dc:	e001      	b.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
 800b0e0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d02f      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0f6:	d00e      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0fc:	d814      	bhi.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d015      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b106:	d10f      	bne.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b108:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	4a1a      	ldr	r2, [pc, #104]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b10e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b112:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b114:	e00c      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3304      	adds	r3, #4
 800b11a:	2101      	movs	r1, #1
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 ff37 	bl	800bf90 <RCCEx_PLL2_Config>
 800b122:	4603      	mov	r3, r0
 800b124:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b126:	e003      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	75fb      	strb	r3, [r7, #23]
      break;
 800b12c:	e000      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b12e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b130:	7dfb      	ldrb	r3, [r7, #23]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b136:	4b10      	ldr	r3, [pc, #64]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b13a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b142:	490d      	ldr	r1, [pc, #52]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b144:	4313      	orrs	r3, r2
 800b146:	650b      	str	r3, [r1, #80]	; 0x50
 800b148:	e001      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
 800b14c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d033      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d81c      	bhi.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b162:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b1a3 	.word	0x0800b1a3
 800b16c:	0800b17d 	.word	0x0800b17d
 800b170:	0800b18b 	.word	0x0800b18b
 800b174:	0800b1a3 	.word	0x0800b1a3
 800b178:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b17c:	4bb8      	ldr	r3, [pc, #736]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	4ab7      	ldr	r2, [pc, #732]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b188:	e00c      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3304      	adds	r3, #4
 800b18e:	2102      	movs	r1, #2
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fefd 	bl	800bf90 <RCCEx_PLL2_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b19a:	e003      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	75fb      	strb	r3, [r7, #23]
      break;
 800b1a0:	e000      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b1a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d109      	bne.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b1aa:	4bad      	ldr	r3, [pc, #692]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ae:	f023 0203 	bic.w	r2, r3, #3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b6:	49aa      	ldr	r1, [pc, #680]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b1bc:	e001      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 8086 	beq.w	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1d0:	4ba4      	ldr	r3, [pc, #656]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4aa3      	ldr	r2, [pc, #652]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b1d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b1dc:	f7f8 f8dc 	bl	8003398 <HAL_GetTick>
 800b1e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1e2:	e009      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1e4:	f7f8 f8d8 	bl	8003398 <HAL_GetTick>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	2b64      	cmp	r3, #100	; 0x64
 800b1f0:	d902      	bls.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	75fb      	strb	r3, [r7, #23]
        break;
 800b1f6:	e005      	b.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1f8:	4b9a      	ldr	r3, [pc, #616]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0ef      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d166      	bne.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b20a:	4b95      	ldr	r3, [pc, #596]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b20c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b214:	4053      	eors	r3, r2
 800b216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d013      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b21e:	4b90      	ldr	r3, [pc, #576]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b226:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b228:	4b8d      	ldr	r3, [pc, #564]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22c:	4a8c      	ldr	r2, [pc, #560]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b22e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b232:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b234:	4b8a      	ldr	r3, [pc, #552]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b238:	4a89      	ldr	r2, [pc, #548]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b23a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b23e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b240:	4a87      	ldr	r2, [pc, #540]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b24c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b250:	d115      	bne.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b252:	f7f8 f8a1 	bl	8003398 <HAL_GetTick>
 800b256:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b258:	e00b      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b25a:	f7f8 f89d 	bl	8003398 <HAL_GetTick>
 800b25e:	4602      	mov	r2, r0
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	f241 3288 	movw	r2, #5000	; 0x1388
 800b268:	4293      	cmp	r3, r2
 800b26a:	d902      	bls.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	75fb      	strb	r3, [r7, #23]
            break;
 800b270:	e005      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b272:	4b7b      	ldr	r3, [pc, #492]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0ed      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d126      	bne.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b28a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b28e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b292:	d10d      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b294:	4b72      	ldr	r3, [pc, #456]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2a2:	0919      	lsrs	r1, r3, #4
 800b2a4:	4b70      	ldr	r3, [pc, #448]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b2a6:	400b      	ands	r3, r1
 800b2a8:	496d      	ldr	r1, [pc, #436]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	610b      	str	r3, [r1, #16]
 800b2ae:	e005      	b.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b2b0:	4b6b      	ldr	r3, [pc, #428]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	4a6a      	ldr	r2, [pc, #424]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b2ba:	6113      	str	r3, [r2, #16]
 800b2bc:	4b68      	ldr	r3, [pc, #416]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2ca:	4965      	ldr	r1, [pc, #404]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	670b      	str	r3, [r1, #112]	; 0x70
 800b2d0:	e004      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
 800b2d4:	75bb      	strb	r3, [r7, #22]
 800b2d6:	e001      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d07e      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ec:	2b28      	cmp	r3, #40	; 0x28
 800b2ee:	d867      	bhi.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b2f0:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b3c7 	.word	0x0800b3c7
 800b2fc:	0800b3c1 	.word	0x0800b3c1
 800b300:	0800b3c1 	.word	0x0800b3c1
 800b304:	0800b3c1 	.word	0x0800b3c1
 800b308:	0800b3c1 	.word	0x0800b3c1
 800b30c:	0800b3c1 	.word	0x0800b3c1
 800b310:	0800b3c1 	.word	0x0800b3c1
 800b314:	0800b3c1 	.word	0x0800b3c1
 800b318:	0800b39d 	.word	0x0800b39d
 800b31c:	0800b3c1 	.word	0x0800b3c1
 800b320:	0800b3c1 	.word	0x0800b3c1
 800b324:	0800b3c1 	.word	0x0800b3c1
 800b328:	0800b3c1 	.word	0x0800b3c1
 800b32c:	0800b3c1 	.word	0x0800b3c1
 800b330:	0800b3c1 	.word	0x0800b3c1
 800b334:	0800b3c1 	.word	0x0800b3c1
 800b338:	0800b3af 	.word	0x0800b3af
 800b33c:	0800b3c1 	.word	0x0800b3c1
 800b340:	0800b3c1 	.word	0x0800b3c1
 800b344:	0800b3c1 	.word	0x0800b3c1
 800b348:	0800b3c1 	.word	0x0800b3c1
 800b34c:	0800b3c1 	.word	0x0800b3c1
 800b350:	0800b3c1 	.word	0x0800b3c1
 800b354:	0800b3c1 	.word	0x0800b3c1
 800b358:	0800b3c7 	.word	0x0800b3c7
 800b35c:	0800b3c1 	.word	0x0800b3c1
 800b360:	0800b3c1 	.word	0x0800b3c1
 800b364:	0800b3c1 	.word	0x0800b3c1
 800b368:	0800b3c1 	.word	0x0800b3c1
 800b36c:	0800b3c1 	.word	0x0800b3c1
 800b370:	0800b3c1 	.word	0x0800b3c1
 800b374:	0800b3c1 	.word	0x0800b3c1
 800b378:	0800b3c7 	.word	0x0800b3c7
 800b37c:	0800b3c1 	.word	0x0800b3c1
 800b380:	0800b3c1 	.word	0x0800b3c1
 800b384:	0800b3c1 	.word	0x0800b3c1
 800b388:	0800b3c1 	.word	0x0800b3c1
 800b38c:	0800b3c1 	.word	0x0800b3c1
 800b390:	0800b3c1 	.word	0x0800b3c1
 800b394:	0800b3c1 	.word	0x0800b3c1
 800b398:	0800b3c7 	.word	0x0800b3c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f000 fdf4 	bl	800bf90 <RCCEx_PLL2_Config>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b3ac:	e00c      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3324      	adds	r3, #36	; 0x24
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 fe9d 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b3be:	e003      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c4:	e000      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b3c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b3ce:	4b24      	ldr	r3, [pc, #144]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3da:	4921      	ldr	r1, [pc, #132]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	654b      	str	r3, [r1, #84]	; 0x54
 800b3e0:	e001      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
 800b3e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0302 	and.w	r3, r3, #2
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d03e      	beq.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3f6:	2b05      	cmp	r3, #5
 800b3f8:	d820      	bhi.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b3fa:	a201      	add	r2, pc, #4	; (adr r2, 800b400 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b400:	0800b443 	.word	0x0800b443
 800b404:	0800b419 	.word	0x0800b419
 800b408:	0800b42b 	.word	0x0800b42b
 800b40c:	0800b443 	.word	0x0800b443
 800b410:	0800b443 	.word	0x0800b443
 800b414:	0800b443 	.word	0x0800b443
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3304      	adds	r3, #4
 800b41c:	2101      	movs	r1, #1
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 fdb6 	bl	800bf90 <RCCEx_PLL2_Config>
 800b424:	4603      	mov	r3, r0
 800b426:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b428:	e00c      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	3324      	adds	r3, #36	; 0x24
 800b42e:	2101      	movs	r1, #1
 800b430:	4618      	mov	r0, r3
 800b432:	f000 fe5f 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b436:	4603      	mov	r3, r0
 800b438:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b43a:	e003      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	75fb      	strb	r3, [r7, #23]
      break;
 800b440:	e000      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b442:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b444:	7dfb      	ldrb	r3, [r7, #23]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d110      	bne.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b44a:	4b05      	ldr	r3, [pc, #20]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b44e:	f023 0207 	bic.w	r2, r3, #7
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b456:	4902      	ldr	r1, [pc, #8]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b458:	4313      	orrs	r3, r2
 800b45a:	654b      	str	r3, [r1, #84]	; 0x54
 800b45c:	e008      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b45e:	bf00      	nop
 800b460:	58024400 	.word	0x58024400
 800b464:	58024800 	.word	0x58024800
 800b468:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d039      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b482:	2b05      	cmp	r3, #5
 800b484:	d820      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b486:	a201      	add	r2, pc, #4	; (adr r2, 800b48c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48c:	0800b4cf 	.word	0x0800b4cf
 800b490:	0800b4a5 	.word	0x0800b4a5
 800b494:	0800b4b7 	.word	0x0800b4b7
 800b498:	0800b4cf 	.word	0x0800b4cf
 800b49c:	0800b4cf 	.word	0x0800b4cf
 800b4a0:	0800b4cf 	.word	0x0800b4cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 fd70 	bl	800bf90 <RCCEx_PLL2_Config>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b4b4:	e00c      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3324      	adds	r3, #36	; 0x24
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f000 fe19 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b4c6:	e003      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b4cc:	e000      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b4ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10a      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b4d6:	4bb7      	ldr	r3, [pc, #732]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4da:	f023 0207 	bic.w	r2, r3, #7
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4e4:	49b3      	ldr	r1, [pc, #716]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	658b      	str	r3, [r1, #88]	; 0x58
 800b4ea:	e001      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
 800b4ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0320 	and.w	r3, r3, #32
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d04b      	beq.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b506:	d02e      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b50c:	d828      	bhi.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b50e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b512:	d02a      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b518:	d822      	bhi.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b51a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b51e:	d026      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b520:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b524:	d81c      	bhi.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b52a:	d010      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b52c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b530:	d816      	bhi.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d01d      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b53a:	d111      	bne.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	3304      	adds	r3, #4
 800b540:	2100      	movs	r1, #0
 800b542:	4618      	mov	r0, r3
 800b544:	f000 fd24 	bl	800bf90 <RCCEx_PLL2_Config>
 800b548:	4603      	mov	r3, r0
 800b54a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b54c:	e012      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3324      	adds	r3, #36	; 0x24
 800b552:	2102      	movs	r1, #2
 800b554:	4618      	mov	r0, r3
 800b556:	f000 fdcd 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b55a:	4603      	mov	r3, r0
 800b55c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b55e:	e009      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	75fb      	strb	r3, [r7, #23]
      break;
 800b564:	e006      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b566:	bf00      	nop
 800b568:	e004      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b56a:	bf00      	nop
 800b56c:	e002      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b56e:	bf00      	nop
 800b570:	e000      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b572:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10a      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b57a:	4b8e      	ldr	r3, [pc, #568]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b57e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b588:	498a      	ldr	r1, [pc, #552]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	654b      	str	r3, [r1, #84]	; 0x54
 800b58e:	e001      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d04b      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b5aa:	d02e      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b5ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b5b0:	d828      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b5b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b6:	d02a      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b5b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5bc:	d822      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b5be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5c2:	d026      	beq.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b5c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5c8:	d81c      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b5ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5ce:	d010      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b5d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5d4:	d816      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d01d      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b5da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5de:	d111      	bne.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 fcd2 	bl	800bf90 <RCCEx_PLL2_Config>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b5f0:	e012      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3324      	adds	r3, #36	; 0x24
 800b5f6:	2102      	movs	r1, #2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 fd7b 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b5fe:	4603      	mov	r3, r0
 800b600:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b602:	e009      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
      break;
 800b608:	e006      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b60a:	bf00      	nop
 800b60c:	e004      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b60e:	bf00      	nop
 800b610:	e002      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b612:	bf00      	nop
 800b614:	e000      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b616:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10a      	bne.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b61e:	4b65      	ldr	r3, [pc, #404]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b622:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b62c:	4961      	ldr	r1, [pc, #388]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	658b      	str	r3, [r1, #88]	; 0x58
 800b632:	e001      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b640:	2b00      	cmp	r3, #0
 800b642:	d04b      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b64a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b64e:	d02e      	beq.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b650:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b654:	d828      	bhi.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b65a:	d02a      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b65c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b660:	d822      	bhi.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b662:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b666:	d026      	beq.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b668:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b66c:	d81c      	bhi.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b66e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b672:	d010      	beq.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b678:	d816      	bhi.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d01d      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b67e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b682:	d111      	bne.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3304      	adds	r3, #4
 800b688:	2100      	movs	r1, #0
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fc80 	bl	800bf90 <RCCEx_PLL2_Config>
 800b690:	4603      	mov	r3, r0
 800b692:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b694:	e012      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3324      	adds	r3, #36	; 0x24
 800b69a:	2102      	movs	r1, #2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fd29 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b6a6:	e009      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ac:	e006      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b6ae:	bf00      	nop
 800b6b0:	e004      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b6b2:	bf00      	nop
 800b6b4:	e002      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b6b6:	bf00      	nop
 800b6b8:	e000      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b6ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10a      	bne.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b6c2:	4b3c      	ldr	r3, [pc, #240]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6d0:	4938      	ldr	r1, [pc, #224]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	658b      	str	r3, [r1, #88]	; 0x58
 800b6d6:	e001      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d8:	7dfb      	ldrb	r3, [r7, #23]
 800b6da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 0308 	and.w	r3, r3, #8
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d01a      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f2:	d10a      	bne.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3324      	adds	r3, #36	; 0x24
 800b6f8:	2102      	movs	r1, #2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 fcfa 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d001      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b70a:	4b2a      	ldr	r3, [pc, #168]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b718:	4926      	ldr	r1, [pc, #152]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0310 	and.w	r3, r3, #16
 800b726:	2b00      	cmp	r3, #0
 800b728:	d01a      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b734:	d10a      	bne.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3324      	adds	r3, #36	; 0x24
 800b73a:	2102      	movs	r1, #2
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fcd9 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b74c:	4b19      	ldr	r3, [pc, #100]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b75a:	4916      	ldr	r1, [pc, #88]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d036      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b776:	d01f      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b77c:	d817      	bhi.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b786:	d009      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b788:	e011      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	3304      	adds	r3, #4
 800b78e:	2100      	movs	r1, #0
 800b790:	4618      	mov	r0, r3
 800b792:	f000 fbfd 	bl	800bf90 <RCCEx_PLL2_Config>
 800b796:	4603      	mov	r3, r0
 800b798:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b79a:	e00e      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3324      	adds	r3, #36	; 0x24
 800b7a0:	2102      	movs	r1, #2
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f000 fca6 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b7ac:	e005      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7b2:	e002      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b7b4:	58024400 	.word	0x58024400
      break;
 800b7b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10a      	bne.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7c0:	4b93      	ldr	r3, [pc, #588]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7ce:	4990      	ldr	r1, [pc, #576]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	658b      	str	r3, [r1, #88]	; 0x58
 800b7d4:	e001      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d033      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7f0:	d01c      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b7f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7f6:	d816      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b7f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7fc:	d003      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b7fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b802:	d007      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b804:	e00f      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b806:	4b82      	ldr	r3, [pc, #520]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80a:	4a81      	ldr	r2, [pc, #516]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b80c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b812:	e00c      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3324      	adds	r3, #36	; 0x24
 800b818:	2101      	movs	r1, #1
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fc6a 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b820:	4603      	mov	r3, r0
 800b822:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b824:	e003      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	75fb      	strb	r3, [r7, #23]
      break;
 800b82a:	e000      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b82c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b834:	4b76      	ldr	r3, [pc, #472]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b842:	4973      	ldr	r1, [pc, #460]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b844:	4313      	orrs	r3, r2
 800b846:	654b      	str	r3, [r1, #84]	; 0x54
 800b848:	e001      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d029      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b866:	d007      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b868:	e00f      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b86a:	4b69      	ldr	r3, [pc, #420]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86e:	4a68      	ldr	r2, [pc, #416]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b874:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b876:	e00b      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3304      	adds	r3, #4
 800b87c:	2102      	movs	r1, #2
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 fb86 	bl	800bf90 <RCCEx_PLL2_Config>
 800b884:	4603      	mov	r3, r0
 800b886:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b888:	e002      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	75fb      	strb	r3, [r7, #23]
      break;
 800b88e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d109      	bne.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b896:	4b5e      	ldr	r3, [pc, #376]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b89a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8a2:	495b      	ldr	r1, [pc, #364]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b8a8:	e001      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3324      	adds	r3, #36	; 0x24
 800b8be:	2102      	movs	r1, #2
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 fc17 	bl	800c0f4 <RCCEx_PLL3_Config>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d030      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8e4:	d017      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b8e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8ea:	d811      	bhi.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b8ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8f0:	d013      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b8f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8f6:	d80b      	bhi.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d010      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b8fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b900:	d106      	bne.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b902:	4b43      	ldr	r3, [pc, #268]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	4a42      	ldr	r2, [pc, #264]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b90c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b90e:	e007      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	75fb      	strb	r3, [r7, #23]
      break;
 800b914:	e004      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b916:	bf00      	nop
 800b918:	e002      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b91a:	bf00      	nop
 800b91c:	e000      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b91e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d109      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b926:	4b3a      	ldr	r3, [pc, #232]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b932:	4937      	ldr	r1, [pc, #220]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b934:	4313      	orrs	r3, r2
 800b936:	654b      	str	r3, [r1, #84]	; 0x54
 800b938:	e001      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d008      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b94a:	4b31      	ldr	r3, [pc, #196]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b94e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b956:	492e      	ldr	r1, [pc, #184]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d009      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b968:	4b29      	ldr	r3, [pc, #164]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b976:	4926      	ldr	r1, [pc, #152]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b978:	4313      	orrs	r3, r2
 800b97a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d008      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b988:	4b21      	ldr	r3, [pc, #132]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b98c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b994:	491e      	ldr	r1, [pc, #120]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b996:	4313      	orrs	r3, r2
 800b998:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00d      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b9a6:	4b1a      	ldr	r3, [pc, #104]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	4a19      	ldr	r2, [pc, #100]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9b0:	6113      	str	r3, [r2, #16]
 800b9b2:	4b17      	ldr	r3, [pc, #92]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9b4:	691a      	ldr	r2, [r3, #16]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b9bc:	4914      	ldr	r1, [pc, #80]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	da08      	bge.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9ca:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d6:	490e      	ldr	r1, [pc, #56]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9e8:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9f6:	4906      	ldr	r1, [pc, #24]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b9fc:	7dbb      	ldrb	r3, [r7, #22]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	e000      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	58024400 	.word	0x58024400

0800ba14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba18:	f7ff f860 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	4b06      	ldr	r3, [pc, #24]	; (800ba38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	091b      	lsrs	r3, r3, #4
 800ba24:	f003 0307 	and.w	r3, r3, #7
 800ba28:	4904      	ldr	r1, [pc, #16]	; (800ba3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ba2a:	5ccb      	ldrb	r3, [r1, r3]
 800ba2c:	f003 031f 	and.w	r3, r3, #31
 800ba30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	58024400 	.word	0x58024400
 800ba3c:	0800ee78 	.word	0x0800ee78

0800ba40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b089      	sub	sp, #36	; 0x24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba48:	4ba1      	ldr	r3, [pc, #644]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4c:	f003 0303 	and.w	r3, r3, #3
 800ba50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ba52:	4b9f      	ldr	r3, [pc, #636]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba56:	0b1b      	lsrs	r3, r3, #12
 800ba58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba5e:	4b9c      	ldr	r3, [pc, #624]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba62:	091b      	lsrs	r3, r3, #4
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ba6a:	4b99      	ldr	r3, [pc, #612]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6e:	08db      	lsrs	r3, r3, #3
 800ba70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	fb02 f303 	mul.w	r3, r2, r3
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 8111 	beq.w	800bcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	f000 8083 	beq.w	800bb9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	f200 80a1 	bhi.w	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d056      	beq.n	800bb58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800baaa:	e099      	b.n	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baac:	4b88      	ldr	r3, [pc, #544]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 0320 	and.w	r3, r3, #32
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d02d      	beq.n	800bb14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bab8:	4b85      	ldr	r3, [pc, #532]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	08db      	lsrs	r3, r3, #3
 800babe:	f003 0303 	and.w	r3, r3, #3
 800bac2:	4a84      	ldr	r2, [pc, #528]	; (800bcd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bac4:	fa22 f303 	lsr.w	r3, r2, r3
 800bac8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	ee07 3a90 	vmov	s15, r3
 800bada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bae2:	4b7b      	ldr	r3, [pc, #492]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800baf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bb12:	e087      	b.n	800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bcdc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb26:	4b6a      	ldr	r3, [pc, #424]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb56:	e065      	b.n	800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb6a:	4b59      	ldr	r3, [pc, #356]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb9a:	e043      	b.n	800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bbaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbae:	4b48      	ldr	r3, [pc, #288]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbde:	e021      	b.n	800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	ee07 3a90 	vmov	s15, r3
 800bbe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bbee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbf2:	4b37      	ldr	r3, [pc, #220]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc02:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc06:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bc24:	4b2a      	ldr	r3, [pc, #168]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc28:	0a5b      	lsrs	r3, r3, #9
 800bc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc4a:	ee17 2a90 	vmov	r2, s15
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bc52:	4b1f      	ldr	r3, [pc, #124]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc56:	0c1b      	lsrs	r3, r3, #16
 800bc58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc5c:	ee07 3a90 	vmov	s15, r3
 800bc60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc78:	ee17 2a90 	vmov	r2, s15
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bc80:	4b13      	ldr	r3, [pc, #76]	; (800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc84:	0e1b      	lsrs	r3, r3, #24
 800bc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca6:	ee17 2a90 	vmov	r2, s15
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bcae:	e008      	b.n	800bcc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	609a      	str	r2, [r3, #8]
}
 800bcc2:	bf00      	nop
 800bcc4:	3724      	adds	r7, #36	; 0x24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	58024400 	.word	0x58024400
 800bcd4:	03d09000 	.word	0x03d09000
 800bcd8:	46000000 	.word	0x46000000
 800bcdc:	4c742400 	.word	0x4c742400
 800bce0:	4a742400 	.word	0x4a742400
 800bce4:	4af42400 	.word	0x4af42400

0800bce8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b089      	sub	sp, #36	; 0x24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcf0:	4ba1      	ldr	r3, [pc, #644]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf4:	f003 0303 	and.w	r3, r3, #3
 800bcf8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bcfa:	4b9f      	ldr	r3, [pc, #636]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfe:	0d1b      	lsrs	r3, r3, #20
 800bd00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd06:	4b9c      	ldr	r3, [pc, #624]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0a:	0a1b      	lsrs	r3, r3, #8
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bd12:	4b99      	ldr	r3, [pc, #612]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd16:	08db      	lsrs	r3, r3, #3
 800bd18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	fb02 f303 	mul.w	r3, r2, r3
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 8111 	beq.w	800bf58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	f000 8083 	beq.w	800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	f200 80a1 	bhi.w	800be88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d056      	beq.n	800be00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd52:	e099      	b.n	800be88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd54:	4b88      	ldr	r3, [pc, #544]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0320 	and.w	r3, r3, #32
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d02d      	beq.n	800bdbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd60:	4b85      	ldr	r3, [pc, #532]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	08db      	lsrs	r3, r3, #3
 800bd66:	f003 0303 	and.w	r3, r3, #3
 800bd6a:	4a84      	ldr	r2, [pc, #528]	; (800bf7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd6c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd70:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	ee07 3a90 	vmov	s15, r3
 800bd78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	ee07 3a90 	vmov	s15, r3
 800bd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd8a:	4b7b      	ldr	r3, [pc, #492]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bf80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdb6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bdba:	e087      	b.n	800becc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	ee07 3a90 	vmov	s15, r3
 800bdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bf84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bdca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdce:	4b6a      	ldr	r3, [pc, #424]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdde:	ed97 6a03 	vldr	s12, [r7, #12]
 800bde2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bf80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdfe:	e065      	b.n	800becc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be12:	4b59      	ldr	r3, [pc, #356]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be22:	ed97 6a03 	vldr	s12, [r7, #12]
 800be26:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bf80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be42:	e043      	b.n	800becc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be56:	4b48      	ldr	r3, [pc, #288]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be66:	ed97 6a03 	vldr	s12, [r7, #12]
 800be6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be86:	e021      	b.n	800becc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	ee07 3a90 	vmov	s15, r3
 800be8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be9a:	4b37      	ldr	r3, [pc, #220]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800beae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bf80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800beca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800becc:	4b2a      	ldr	r3, [pc, #168]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed0:	0a5b      	lsrs	r3, r3, #9
 800bed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bee6:	edd7 6a07 	vldr	s13, [r7, #28]
 800beea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bef2:	ee17 2a90 	vmov	r2, s15
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800befa:	4b1f      	ldr	r3, [pc, #124]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800befc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befe:	0c1b      	lsrs	r3, r3, #16
 800bf00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf04:	ee07 3a90 	vmov	s15, r3
 800bf08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf14:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf20:	ee17 2a90 	vmov	r2, s15
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bf28:	4b13      	ldr	r3, [pc, #76]	; (800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2c:	0e1b      	lsrs	r3, r3, #24
 800bf2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf42:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf4e:	ee17 2a90 	vmov	r2, s15
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf56:	e008      	b.n	800bf6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	609a      	str	r2, [r3, #8]
}
 800bf6a:	bf00      	nop
 800bf6c:	3724      	adds	r7, #36	; 0x24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	58024400 	.word	0x58024400
 800bf7c:	03d09000 	.word	0x03d09000
 800bf80:	46000000 	.word	0x46000000
 800bf84:	4c742400 	.word	0x4c742400
 800bf88:	4a742400 	.word	0x4a742400
 800bf8c:	4af42400 	.word	0x4af42400

0800bf90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf9e:	4b53      	ldr	r3, [pc, #332]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800bfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa2:	f003 0303 	and.w	r3, r3, #3
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	d101      	bne.n	800bfae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e099      	b.n	800c0e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bfae:	4b4f      	ldr	r3, [pc, #316]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a4e      	ldr	r2, [pc, #312]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800bfb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bfb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfba:	f7f7 f9ed 	bl	8003398 <HAL_GetTick>
 800bfbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bfc0:	e008      	b.n	800bfd4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bfc2:	f7f7 f9e9 	bl	8003398 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d901      	bls.n	800bfd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	e086      	b.n	800c0e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bfd4:	4b45      	ldr	r3, [pc, #276]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1f0      	bne.n	800bfc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bfe0:	4b42      	ldr	r3, [pc, #264]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800bfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	031b      	lsls	r3, r3, #12
 800bfee:	493f      	ldr	r1, [pc, #252]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800bff0:	4313      	orrs	r3, r2
 800bff2:	628b      	str	r3, [r1, #40]	; 0x28
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	3b01      	subs	r3, #1
 800c004:	025b      	lsls	r3, r3, #9
 800c006:	b29b      	uxth	r3, r3
 800c008:	431a      	orrs	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	3b01      	subs	r3, #1
 800c010:	041b      	lsls	r3, r3, #16
 800c012:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c016:	431a      	orrs	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	3b01      	subs	r3, #1
 800c01e:	061b      	lsls	r3, r3, #24
 800c020:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c024:	4931      	ldr	r1, [pc, #196]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c026:	4313      	orrs	r3, r2
 800c028:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c02a:	4b30      	ldr	r3, [pc, #192]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	492d      	ldr	r1, [pc, #180]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c038:	4313      	orrs	r3, r2
 800c03a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c03c:	4b2b      	ldr	r3, [pc, #172]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c040:	f023 0220 	bic.w	r2, r3, #32
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	4928      	ldr	r1, [pc, #160]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c04e:	4b27      	ldr	r3, [pc, #156]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c052:	4a26      	ldr	r2, [pc, #152]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c054:	f023 0310 	bic.w	r3, r3, #16
 800c058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c05a:	4b24      	ldr	r3, [pc, #144]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c05c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c05e:	4b24      	ldr	r3, [pc, #144]	; (800c0f0 <RCCEx_PLL2_Config+0x160>)
 800c060:	4013      	ands	r3, r2
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	69d2      	ldr	r2, [r2, #28]
 800c066:	00d2      	lsls	r2, r2, #3
 800c068:	4920      	ldr	r1, [pc, #128]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c06e:	4b1f      	ldr	r3, [pc, #124]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	4a1e      	ldr	r2, [pc, #120]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c074:	f043 0310 	orr.w	r3, r3, #16
 800c078:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d106      	bne.n	800c08e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c080:	4b1a      	ldr	r3, [pc, #104]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c084:	4a19      	ldr	r2, [pc, #100]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c08a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c08c:	e00f      	b.n	800c0ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d106      	bne.n	800c0a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c094:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	4a14      	ldr	r2, [pc, #80]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c09a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c09e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0a0:	e005      	b.n	800c0ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c0a2:	4b12      	ldr	r3, [pc, #72]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a6:	4a11      	ldr	r2, [pc, #68]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c0a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c0ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c0ae:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a0e      	ldr	r2, [pc, #56]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c0b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ba:	f7f7 f96d 	bl	8003398 <HAL_GetTick>
 800c0be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0c0:	e008      	b.n	800c0d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c0c2:	f7f7 f969 	bl	8003398 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d901      	bls.n	800c0d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e006      	b.n	800c0e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0d4:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <RCCEx_PLL2_Config+0x15c>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d0f0      	beq.n	800c0c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	58024400 	.word	0x58024400
 800c0f0:	ffff0007 	.word	0xffff0007

0800c0f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c102:	4b53      	ldr	r3, [pc, #332]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	f003 0303 	and.w	r3, r3, #3
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d101      	bne.n	800c112 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e099      	b.n	800c246 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c112:	4b4f      	ldr	r3, [pc, #316]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a4e      	ldr	r2, [pc, #312]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c11c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c11e:	f7f7 f93b 	bl	8003398 <HAL_GetTick>
 800c122:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c124:	e008      	b.n	800c138 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c126:	f7f7 f937 	bl	8003398 <HAL_GetTick>
 800c12a:	4602      	mov	r2, r0
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	2b02      	cmp	r3, #2
 800c132:	d901      	bls.n	800c138 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c134:	2303      	movs	r3, #3
 800c136:	e086      	b.n	800c246 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c138:	4b45      	ldr	r3, [pc, #276]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1f0      	bne.n	800c126 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c144:	4b42      	ldr	r3, [pc, #264]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c148:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	051b      	lsls	r3, r3, #20
 800c152:	493f      	ldr	r1, [pc, #252]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c154:	4313      	orrs	r3, r2
 800c156:	628b      	str	r3, [r1, #40]	; 0x28
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	3b01      	subs	r3, #1
 800c168:	025b      	lsls	r3, r3, #9
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	431a      	orrs	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	3b01      	subs	r3, #1
 800c174:	041b      	lsls	r3, r3, #16
 800c176:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c17a:	431a      	orrs	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	3b01      	subs	r3, #1
 800c182:	061b      	lsls	r3, r3, #24
 800c184:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c188:	4931      	ldr	r1, [pc, #196]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c18a:	4313      	orrs	r3, r2
 800c18c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c18e:	4b30      	ldr	r3, [pc, #192]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c192:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	492d      	ldr	r1, [pc, #180]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c19c:	4313      	orrs	r3, r2
 800c19e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c1a0:	4b2b      	ldr	r3, [pc, #172]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	4928      	ldr	r1, [pc, #160]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c1b2:	4b27      	ldr	r3, [pc, #156]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b6:	4a26      	ldr	r2, [pc, #152]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c1be:	4b24      	ldr	r3, [pc, #144]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1c2:	4b24      	ldr	r3, [pc, #144]	; (800c254 <RCCEx_PLL3_Config+0x160>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	69d2      	ldr	r2, [r2, #28]
 800c1ca:	00d2      	lsls	r2, r2, #3
 800c1cc:	4920      	ldr	r1, [pc, #128]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c1d2:	4b1f      	ldr	r3, [pc, #124]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d6:	4a1e      	ldr	r2, [pc, #120]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d106      	bne.n	800c1f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c1e4:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e8:	4a19      	ldr	r2, [pc, #100]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c1ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1f0:	e00f      	b.n	800c212 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d106      	bne.n	800c206 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c1f8:	4b15      	ldr	r3, [pc, #84]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fc:	4a14      	ldr	r2, [pc, #80]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c1fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c202:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c204:	e005      	b.n	800c212 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c206:	4b12      	ldr	r3, [pc, #72]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	4a11      	ldr	r2, [pc, #68]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c20c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c210:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c212:	4b0f      	ldr	r3, [pc, #60]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a0e      	ldr	r2, [pc, #56]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c21e:	f7f7 f8bb 	bl	8003398 <HAL_GetTick>
 800c222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c224:	e008      	b.n	800c238 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c226:	f7f7 f8b7 	bl	8003398 <HAL_GetTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	2b02      	cmp	r3, #2
 800c232:	d901      	bls.n	800c238 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c234:	2303      	movs	r3, #3
 800c236:	e006      	b.n	800c246 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c238:	4b05      	ldr	r3, [pc, #20]	; (800c250 <RCCEx_PLL3_Config+0x15c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d0f0      	beq.n	800c226 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	58024400 	.word	0x58024400
 800c254:	ffff0007 	.word	0xffff0007

0800c258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e042      	b.n	800c2f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c270:	2b00      	cmp	r3, #0
 800c272:	d106      	bne.n	800c282 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7f4 ff8d 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2224      	movs	r2, #36	; 0x24
 800c286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f022 0201 	bic.w	r2, r2, #1
 800c298:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fc86 	bl	800cbac <UART_SetConfig>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d101      	bne.n	800c2aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e022      	b.n	800c2f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f001 f9da 	bl	800d66c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	689a      	ldr	r2, [r3, #8]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f042 0201 	orr.w	r2, r2, #1
 800c2e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f001 fa61 	bl	800d7b0 <UART_CheckIdleState>
 800c2ee:	4603      	mov	r3, r0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08a      	sub	sp, #40	; 0x28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	4613      	mov	r3, r2
 800c304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c30c:	2b20      	cmp	r3, #32
 800c30e:	d17a      	bne.n	800c406 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <HAL_UART_Transmit_DMA+0x24>
 800c316:	88fb      	ldrh	r3, [r7, #6]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d101      	bne.n	800c320 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	e073      	b.n	800c408 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c326:	2b01      	cmp	r3, #1
 800c328:	d101      	bne.n	800c32e <HAL_UART_Transmit_DMA+0x36>
 800c32a:	2302      	movs	r3, #2
 800c32c:	e06c      	b.n	800c408 <HAL_UART_Transmit_DMA+0x110>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	88fa      	ldrh	r2, [r7, #6]
 800c340:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	88fa      	ldrh	r2, [r7, #6]
 800c348:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2221      	movs	r2, #33	; 0x21
 800c358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c360:	2b00      	cmp	r3, #0
 800c362:	d02c      	beq.n	800c3be <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c368:	4a29      	ldr	r2, [pc, #164]	; (800c410 <HAL_UART_Transmit_DMA+0x118>)
 800c36a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c370:	4a28      	ldr	r2, [pc, #160]	; (800c414 <HAL_UART_Transmit_DMA+0x11c>)
 800c372:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c378:	4a27      	ldr	r2, [pc, #156]	; (800c418 <HAL_UART_Transmit_DMA+0x120>)
 800c37a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c380:	2200      	movs	r2, #0
 800c382:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c38c:	4619      	mov	r1, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3328      	adds	r3, #40	; 0x28
 800c394:	461a      	mov	r2, r3
 800c396:	88fb      	ldrh	r3, [r7, #6]
 800c398:	f7f7 fcba 	bl	8003d10 <HAL_DMA_Start_IT>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00d      	beq.n	800c3be <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2210      	movs	r2, #16
 800c3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2220      	movs	r2, #32
 800c3b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e024      	b.n	800c408 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2240      	movs	r2, #64	; 0x40
 800c3c4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	3308      	adds	r3, #8
 800c3d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	e853 3f00 	ldrex	r3, [r3]
 800c3dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ee:	623a      	str	r2, [r7, #32]
 800c3f0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f2:	69f9      	ldr	r1, [r7, #28]
 800c3f4:	6a3a      	ldr	r2, [r7, #32]
 800c3f6:	e841 2300 	strex	r3, r2, [r1]
 800c3fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1e5      	bne.n	800c3ce <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	e000      	b.n	800c408 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c406:	2302      	movs	r3, #2
  }
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3728      	adds	r7, #40	; 0x28
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	0800db25 	.word	0x0800db25
 800c414:	0800dbbb 	.word	0x0800dbbb
 800c418:	0800dbd7 	.word	0x0800dbd7

0800c41c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b0ba      	sub	sp, #232	; 0xe8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	69db      	ldr	r3, [r3, #28]
 800c42a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c442:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c446:	f640 030f 	movw	r3, #2063	; 0x80f
 800c44a:	4013      	ands	r3, r2
 800c44c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c454:	2b00      	cmp	r3, #0
 800c456:	d11b      	bne.n	800c490 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c45c:	f003 0320 	and.w	r3, r3, #32
 800c460:	2b00      	cmp	r3, #0
 800c462:	d015      	beq.n	800c490 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c468:	f003 0320 	and.w	r3, r3, #32
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d105      	bne.n	800c47c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d009      	beq.n	800c490 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 835a 	beq.w	800cb3a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	4798      	blx	r3
      }
      return;
 800c48e:	e354      	b.n	800cb3a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c494:	2b00      	cmp	r3, #0
 800c496:	f000 811f 	beq.w	800c6d8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c49a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c49e:	4b8b      	ldr	r3, [pc, #556]	; (800c6cc <HAL_UART_IRQHandler+0x2b0>)
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d106      	bne.n	800c4b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c4a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c4aa:	4b89      	ldr	r3, [pc, #548]	; (800c6d0 <HAL_UART_IRQHandler+0x2b4>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f000 8112 	beq.w	800c6d8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4b8:	f003 0301 	and.w	r3, r3, #1
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d011      	beq.n	800c4e4 <HAL_UART_IRQHandler+0xc8>
 800c4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00b      	beq.n	800c4e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4da:	f043 0201 	orr.w	r2, r3, #1
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4e8:	f003 0302 	and.w	r3, r3, #2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d011      	beq.n	800c514 <HAL_UART_IRQHandler+0xf8>
 800c4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00b      	beq.n	800c514 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2202      	movs	r2, #2
 800c502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c50a:	f043 0204 	orr.w	r2, r3, #4
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c518:	f003 0304 	and.w	r3, r3, #4
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d011      	beq.n	800c544 <HAL_UART_IRQHandler+0x128>
 800c520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c524:	f003 0301 	and.w	r3, r3, #1
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2204      	movs	r2, #4
 800c532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c53a:	f043 0202 	orr.w	r2, r3, #2
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c548:	f003 0308 	and.w	r3, r3, #8
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d017      	beq.n	800c580 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c554:	f003 0320 	and.w	r3, r3, #32
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d105      	bne.n	800c568 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c55c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c560:	4b5a      	ldr	r3, [pc, #360]	; (800c6cc <HAL_UART_IRQHandler+0x2b0>)
 800c562:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00b      	beq.n	800c580 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2208      	movs	r2, #8
 800c56e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c576:	f043 0208 	orr.w	r2, r3, #8
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d012      	beq.n	800c5b2 <HAL_UART_IRQHandler+0x196>
 800c58c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00c      	beq.n	800c5b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5a8:	f043 0220 	orr.w	r2, r3, #32
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 82c0 	beq.w	800cb3e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5c2:	f003 0320 	and.w	r3, r3, #32
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d013      	beq.n	800c5f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ce:	f003 0320 	and.w	r3, r3, #32
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d105      	bne.n	800c5e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d007      	beq.n	800c5f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c606:	2b40      	cmp	r3, #64	; 0x40
 800c608:	d005      	beq.n	800c616 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c60a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c60e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c612:	2b00      	cmp	r3, #0
 800c614:	d04f      	beq.n	800c6b6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f001 fa1e 	bl	800da58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c626:	2b40      	cmp	r3, #64	; 0x40
 800c628:	d141      	bne.n	800c6ae <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3308      	adds	r3, #8
 800c630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c638:	e853 3f00 	ldrex	r3, [r3]
 800c63c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3308      	adds	r3, #8
 800c652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c65a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c666:	e841 2300 	strex	r3, r2, [r1]
 800c66a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c66e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1d9      	bne.n	800c62a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d013      	beq.n	800c6a6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c682:	4a14      	ldr	r2, [pc, #80]	; (800c6d4 <HAL_UART_IRQHandler+0x2b8>)
 800c684:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7f8 f8c8 	bl	8004820 <HAL_DMA_Abort_IT>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d017      	beq.n	800c6c6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6a4:	e00f      	b.n	800c6c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fa6a 	bl	800cb80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ac:	e00b      	b.n	800c6c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa66 	bl	800cb80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b4:	e007      	b.n	800c6c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fa62 	bl	800cb80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c6c4:	e23b      	b.n	800cb3e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c6:	bf00      	nop
    return;
 800c6c8:	e239      	b.n	800cb3e <HAL_UART_IRQHandler+0x722>
 800c6ca:	bf00      	nop
 800c6cc:	10000001 	.word	0x10000001
 800c6d0:	04000120 	.word	0x04000120
 800c6d4:	0800dc57 	.word	0x0800dc57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	f040 81ce 	bne.w	800ca7e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6e6:	f003 0310 	and.w	r3, r3, #16
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 81c7 	beq.w	800ca7e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6f4:	f003 0310 	and.w	r3, r3, #16
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 81c0 	beq.w	800ca7e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2210      	movs	r2, #16
 800c704:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c710:	2b40      	cmp	r3, #64	; 0x40
 800c712:	f040 813b 	bne.w	800c98c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a8b      	ldr	r2, [pc, #556]	; (800c94c <HAL_UART_IRQHandler+0x530>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d059      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a89      	ldr	r2, [pc, #548]	; (800c950 <HAL_UART_IRQHandler+0x534>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d053      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a87      	ldr	r2, [pc, #540]	; (800c954 <HAL_UART_IRQHandler+0x538>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d04d      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a85      	ldr	r2, [pc, #532]	; (800c958 <HAL_UART_IRQHandler+0x53c>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d047      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a83      	ldr	r2, [pc, #524]	; (800c95c <HAL_UART_IRQHandler+0x540>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d041      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a81      	ldr	r2, [pc, #516]	; (800c960 <HAL_UART_IRQHandler+0x544>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d03b      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a7f      	ldr	r2, [pc, #508]	; (800c964 <HAL_UART_IRQHandler+0x548>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d035      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a7d      	ldr	r2, [pc, #500]	; (800c968 <HAL_UART_IRQHandler+0x54c>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d02f      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a7b      	ldr	r2, [pc, #492]	; (800c96c <HAL_UART_IRQHandler+0x550>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d029      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a79      	ldr	r2, [pc, #484]	; (800c970 <HAL_UART_IRQHandler+0x554>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d023      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a77      	ldr	r2, [pc, #476]	; (800c974 <HAL_UART_IRQHandler+0x558>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d01d      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a75      	ldr	r2, [pc, #468]	; (800c978 <HAL_UART_IRQHandler+0x55c>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d017      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a73      	ldr	r2, [pc, #460]	; (800c97c <HAL_UART_IRQHandler+0x560>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d011      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a71      	ldr	r2, [pc, #452]	; (800c980 <HAL_UART_IRQHandler+0x564>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d00b      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a6f      	ldr	r2, [pc, #444]	; (800c984 <HAL_UART_IRQHandler+0x568>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d005      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ba>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a6d      	ldr	r2, [pc, #436]	; (800c988 <HAL_UART_IRQHandler+0x56c>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d105      	bne.n	800c7e2 <HAL_UART_IRQHandler+0x3c6>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	e004      	b.n	800c7ec <HAL_UART_IRQHandler+0x3d0>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 81a4 	beq.w	800cb42 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c800:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c804:	429a      	cmp	r2, r3
 800c806:	f080 819c 	bcs.w	800cb42 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c818:	69db      	ldr	r3, [r3, #28]
 800c81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c81e:	f000 8086 	beq.w	800c92e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c82e:	e853 3f00 	ldrex	r3, [r3]
 800c832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c83a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c83e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	461a      	mov	r2, r3
 800c848:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c84c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c850:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c854:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c858:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c85c:	e841 2300 	strex	r3, r2, [r1]
 800c860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1da      	bne.n	800c822 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3308      	adds	r3, #8
 800c872:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c876:	e853 3f00 	ldrex	r3, [r3]
 800c87a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c87c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c87e:	f023 0301 	bic.w	r3, r3, #1
 800c882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3308      	adds	r3, #8
 800c88c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c890:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c894:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c896:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c898:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c89c:	e841 2300 	strex	r3, r2, [r1]
 800c8a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c8a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1e1      	bne.n	800c86c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8b2:	e853 3f00 	ldrex	r3, [r3]
 800c8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c8b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c8cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8d4:	e841 2300 	strex	r3, r2, [r1]
 800c8d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1e3      	bne.n	800c8a8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2220      	movs	r2, #32
 800c8e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f6:	e853 3f00 	ldrex	r3, [r3]
 800c8fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8fe:	f023 0310 	bic.w	r3, r3, #16
 800c902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c910:	65bb      	str	r3, [r7, #88]	; 0x58
 800c912:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c918:	e841 2300 	strex	r3, r2, [r1]
 800c91c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e4      	bne.n	800c8ee <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c928:	4618      	mov	r0, r3
 800c92a:	f7f7 fc5b 	bl	80041e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	b29b      	uxth	r3, r3
 800c940:	4619      	mov	r1, r3
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f926 	bl	800cb94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c948:	e0fb      	b.n	800cb42 <HAL_UART_IRQHandler+0x726>
 800c94a:	bf00      	nop
 800c94c:	40020010 	.word	0x40020010
 800c950:	40020028 	.word	0x40020028
 800c954:	40020040 	.word	0x40020040
 800c958:	40020058 	.word	0x40020058
 800c95c:	40020070 	.word	0x40020070
 800c960:	40020088 	.word	0x40020088
 800c964:	400200a0 	.word	0x400200a0
 800c968:	400200b8 	.word	0x400200b8
 800c96c:	40020410 	.word	0x40020410
 800c970:	40020428 	.word	0x40020428
 800c974:	40020440 	.word	0x40020440
 800c978:	40020458 	.word	0x40020458
 800c97c:	40020470 	.word	0x40020470
 800c980:	40020488 	.word	0x40020488
 800c984:	400204a0 	.word	0x400204a0
 800c988:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c998:	b29b      	uxth	r3, r3
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 80cc 	beq.w	800cb46 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c9ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 80c7 	beq.w	800cb46 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	e853 3f00 	ldrex	r3, [r3]
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c9da:	647b      	str	r3, [r7, #68]	; 0x44
 800c9dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9e2:	e841 2300 	strex	r3, r2, [r1]
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1e4      	bne.n	800c9b8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3308      	adds	r3, #8
 800c9f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	e853 3f00 	ldrex	r3, [r3]
 800c9fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c9fe:	6a3a      	ldr	r2, [r7, #32]
 800ca00:	4b54      	ldr	r3, [pc, #336]	; (800cb54 <HAL_UART_IRQHandler+0x738>)
 800ca02:	4013      	ands	r3, r2
 800ca04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ca12:	633a      	str	r2, [r7, #48]	; 0x30
 800ca14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca1a:	e841 2300 	strex	r3, r2, [r1]
 800ca1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1e3      	bne.n	800c9ee <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	e853 3f00 	ldrex	r3, [r3]
 800ca46:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f023 0310 	bic.w	r3, r3, #16
 800ca4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca5c:	61fb      	str	r3, [r7, #28]
 800ca5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca60:	69b9      	ldr	r1, [r7, #24]
 800ca62:	69fa      	ldr	r2, [r7, #28]
 800ca64:	e841 2300 	strex	r3, r2, [r1]
 800ca68:	617b      	str	r3, [r7, #20]
   return(result);
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e4      	bne.n	800ca3a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f88c 	bl	800cb94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca7c:	e063      	b.n	800cb46 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00e      	beq.n	800caa8 <HAL_UART_IRQHandler+0x68c>
 800ca8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d008      	beq.n	800caa8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f001 f919 	bl	800dcd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caa6:	e051      	b.n	800cb4c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800caa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d014      	beq.n	800cade <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d105      	bne.n	800cacc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d008      	beq.n	800cade <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d03a      	beq.n	800cb4a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	4798      	blx	r3
    }
    return;
 800cadc:	e035      	b.n	800cb4a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d009      	beq.n	800cafe <HAL_UART_IRQHandler+0x6e2>
 800caea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f001 f8c3 	bl	800dc82 <UART_EndTransmit_IT>
    return;
 800cafc:	e026      	b.n	800cb4c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cafe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <HAL_UART_IRQHandler+0x702>
 800cb0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d003      	beq.n	800cb1e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 f8f2 	bl	800dd00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb1c:	e016      	b.n	800cb4c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d010      	beq.n	800cb4c <HAL_UART_IRQHandler+0x730>
 800cb2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	da0c      	bge.n	800cb4c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f001 f8da 	bl	800dcec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb38:	e008      	b.n	800cb4c <HAL_UART_IRQHandler+0x730>
      return;
 800cb3a:	bf00      	nop
 800cb3c:	e006      	b.n	800cb4c <HAL_UART_IRQHandler+0x730>
    return;
 800cb3e:	bf00      	nop
 800cb40:	e004      	b.n	800cb4c <HAL_UART_IRQHandler+0x730>
      return;
 800cb42:	bf00      	nop
 800cb44:	e002      	b.n	800cb4c <HAL_UART_IRQHandler+0x730>
      return;
 800cb46:	bf00      	nop
 800cb48:	e000      	b.n	800cb4c <HAL_UART_IRQHandler+0x730>
    return;
 800cb4a:	bf00      	nop
  }
}
 800cb4c:	37e8      	adds	r7, #232	; 0xe8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	effffffe 	.word	0xeffffffe

0800cb58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbac:	b5b0      	push	{r4, r5, r7, lr}
 800cbae:	b08e      	sub	sp, #56	; 0x38
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	689a      	ldr	r2, [r3, #8]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	431a      	orrs	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	431a      	orrs	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	69db      	ldr	r3, [r3, #28]
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	4bbf      	ldr	r3, [pc, #764]	; (800ced8 <UART_SetConfig+0x32c>)
 800cbda:	4013      	ands	r3, r2
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbe2:	430b      	orrs	r3, r1
 800cbe4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	430a      	orrs	r2, r1
 800cbfa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	699b      	ldr	r3, [r3, #24]
 800cc00:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4ab5      	ldr	r2, [pc, #724]	; (800cedc <UART_SetConfig+0x330>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d004      	beq.n	800cc16 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a1b      	ldr	r3, [r3, #32]
 800cc10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc12:	4313      	orrs	r3, r2
 800cc14:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	689a      	ldr	r2, [r3, #8]
 800cc1c:	4bb0      	ldr	r3, [pc, #704]	; (800cee0 <UART_SetConfig+0x334>)
 800cc1e:	4013      	ands	r3, r2
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	6812      	ldr	r2, [r2, #0]
 800cc24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc26:	430b      	orrs	r3, r1
 800cc28:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc30:	f023 010f 	bic.w	r1, r3, #15
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4aa7      	ldr	r2, [pc, #668]	; (800cee4 <UART_SetConfig+0x338>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d176      	bne.n	800cd38 <UART_SetConfig+0x18c>
 800cc4a:	4ba7      	ldr	r3, [pc, #668]	; (800cee8 <UART_SetConfig+0x33c>)
 800cc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc52:	2b28      	cmp	r3, #40	; 0x28
 800cc54:	d86c      	bhi.n	800cd30 <UART_SetConfig+0x184>
 800cc56:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <UART_SetConfig+0xb0>)
 800cc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5c:	0800cd01 	.word	0x0800cd01
 800cc60:	0800cd31 	.word	0x0800cd31
 800cc64:	0800cd31 	.word	0x0800cd31
 800cc68:	0800cd31 	.word	0x0800cd31
 800cc6c:	0800cd31 	.word	0x0800cd31
 800cc70:	0800cd31 	.word	0x0800cd31
 800cc74:	0800cd31 	.word	0x0800cd31
 800cc78:	0800cd31 	.word	0x0800cd31
 800cc7c:	0800cd09 	.word	0x0800cd09
 800cc80:	0800cd31 	.word	0x0800cd31
 800cc84:	0800cd31 	.word	0x0800cd31
 800cc88:	0800cd31 	.word	0x0800cd31
 800cc8c:	0800cd31 	.word	0x0800cd31
 800cc90:	0800cd31 	.word	0x0800cd31
 800cc94:	0800cd31 	.word	0x0800cd31
 800cc98:	0800cd31 	.word	0x0800cd31
 800cc9c:	0800cd11 	.word	0x0800cd11
 800cca0:	0800cd31 	.word	0x0800cd31
 800cca4:	0800cd31 	.word	0x0800cd31
 800cca8:	0800cd31 	.word	0x0800cd31
 800ccac:	0800cd31 	.word	0x0800cd31
 800ccb0:	0800cd31 	.word	0x0800cd31
 800ccb4:	0800cd31 	.word	0x0800cd31
 800ccb8:	0800cd31 	.word	0x0800cd31
 800ccbc:	0800cd19 	.word	0x0800cd19
 800ccc0:	0800cd31 	.word	0x0800cd31
 800ccc4:	0800cd31 	.word	0x0800cd31
 800ccc8:	0800cd31 	.word	0x0800cd31
 800cccc:	0800cd31 	.word	0x0800cd31
 800ccd0:	0800cd31 	.word	0x0800cd31
 800ccd4:	0800cd31 	.word	0x0800cd31
 800ccd8:	0800cd31 	.word	0x0800cd31
 800ccdc:	0800cd21 	.word	0x0800cd21
 800cce0:	0800cd31 	.word	0x0800cd31
 800cce4:	0800cd31 	.word	0x0800cd31
 800cce8:	0800cd31 	.word	0x0800cd31
 800ccec:	0800cd31 	.word	0x0800cd31
 800ccf0:	0800cd31 	.word	0x0800cd31
 800ccf4:	0800cd31 	.word	0x0800cd31
 800ccf8:	0800cd31 	.word	0x0800cd31
 800ccfc:	0800cd29 	.word	0x0800cd29
 800cd00:	2301      	movs	r3, #1
 800cd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd06:	e222      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd08:	2304      	movs	r3, #4
 800cd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd0e:	e21e      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd10:	2308      	movs	r3, #8
 800cd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd16:	e21a      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd18:	2310      	movs	r3, #16
 800cd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1e:	e216      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd20:	2320      	movs	r3, #32
 800cd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd26:	e212      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd28:	2340      	movs	r3, #64	; 0x40
 800cd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2e:	e20e      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd30:	2380      	movs	r3, #128	; 0x80
 800cd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd36:	e20a      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a6b      	ldr	r2, [pc, #428]	; (800ceec <UART_SetConfig+0x340>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d130      	bne.n	800cda4 <UART_SetConfig+0x1f8>
 800cd42:	4b69      	ldr	r3, [pc, #420]	; (800cee8 <UART_SetConfig+0x33c>)
 800cd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd46:	f003 0307 	and.w	r3, r3, #7
 800cd4a:	2b05      	cmp	r3, #5
 800cd4c:	d826      	bhi.n	800cd9c <UART_SetConfig+0x1f0>
 800cd4e:	a201      	add	r2, pc, #4	; (adr r2, 800cd54 <UART_SetConfig+0x1a8>)
 800cd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd54:	0800cd6d 	.word	0x0800cd6d
 800cd58:	0800cd75 	.word	0x0800cd75
 800cd5c:	0800cd7d 	.word	0x0800cd7d
 800cd60:	0800cd85 	.word	0x0800cd85
 800cd64:	0800cd8d 	.word	0x0800cd8d
 800cd68:	0800cd95 	.word	0x0800cd95
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd72:	e1ec      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd74:	2304      	movs	r3, #4
 800cd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7a:	e1e8      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd7c:	2308      	movs	r3, #8
 800cd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd82:	e1e4      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd84:	2310      	movs	r3, #16
 800cd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8a:	e1e0      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd8c:	2320      	movs	r3, #32
 800cd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd92:	e1dc      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd94:	2340      	movs	r3, #64	; 0x40
 800cd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9a:	e1d8      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cd9c:	2380      	movs	r3, #128	; 0x80
 800cd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cda2:	e1d4      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a51      	ldr	r2, [pc, #324]	; (800cef0 <UART_SetConfig+0x344>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d130      	bne.n	800ce10 <UART_SetConfig+0x264>
 800cdae:	4b4e      	ldr	r3, [pc, #312]	; (800cee8 <UART_SetConfig+0x33c>)
 800cdb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdb2:	f003 0307 	and.w	r3, r3, #7
 800cdb6:	2b05      	cmp	r3, #5
 800cdb8:	d826      	bhi.n	800ce08 <UART_SetConfig+0x25c>
 800cdba:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <UART_SetConfig+0x214>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cdd9 	.word	0x0800cdd9
 800cdc4:	0800cde1 	.word	0x0800cde1
 800cdc8:	0800cde9 	.word	0x0800cde9
 800cdcc:	0800cdf1 	.word	0x0800cdf1
 800cdd0:	0800cdf9 	.word	0x0800cdf9
 800cdd4:	0800ce01 	.word	0x0800ce01
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdde:	e1b6      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cde0:	2304      	movs	r3, #4
 800cde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cde6:	e1b2      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cde8:	2308      	movs	r3, #8
 800cdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdee:	e1ae      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cdf0:	2310      	movs	r3, #16
 800cdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdf6:	e1aa      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cdf8:	2320      	movs	r3, #32
 800cdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdfe:	e1a6      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce00:	2340      	movs	r3, #64	; 0x40
 800ce02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce06:	e1a2      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce08:	2380      	movs	r3, #128	; 0x80
 800ce0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce0e:	e19e      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a37      	ldr	r2, [pc, #220]	; (800cef4 <UART_SetConfig+0x348>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d130      	bne.n	800ce7c <UART_SetConfig+0x2d0>
 800ce1a:	4b33      	ldr	r3, [pc, #204]	; (800cee8 <UART_SetConfig+0x33c>)
 800ce1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce1e:	f003 0307 	and.w	r3, r3, #7
 800ce22:	2b05      	cmp	r3, #5
 800ce24:	d826      	bhi.n	800ce74 <UART_SetConfig+0x2c8>
 800ce26:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <UART_SetConfig+0x280>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce45 	.word	0x0800ce45
 800ce30:	0800ce4d 	.word	0x0800ce4d
 800ce34:	0800ce55 	.word	0x0800ce55
 800ce38:	0800ce5d 	.word	0x0800ce5d
 800ce3c:	0800ce65 	.word	0x0800ce65
 800ce40:	0800ce6d 	.word	0x0800ce6d
 800ce44:	2300      	movs	r3, #0
 800ce46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4a:	e180      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce4c:	2304      	movs	r3, #4
 800ce4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce52:	e17c      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce54:	2308      	movs	r3, #8
 800ce56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce5a:	e178      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce5c:	2310      	movs	r3, #16
 800ce5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce62:	e174      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce64:	2320      	movs	r3, #32
 800ce66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6a:	e170      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce6c:	2340      	movs	r3, #64	; 0x40
 800ce6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce72:	e16c      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce74:	2380      	movs	r3, #128	; 0x80
 800ce76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce7a:	e168      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a1d      	ldr	r2, [pc, #116]	; (800cef8 <UART_SetConfig+0x34c>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d142      	bne.n	800cf0c <UART_SetConfig+0x360>
 800ce86:	4b18      	ldr	r3, [pc, #96]	; (800cee8 <UART_SetConfig+0x33c>)
 800ce88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce8a:	f003 0307 	and.w	r3, r3, #7
 800ce8e:	2b05      	cmp	r3, #5
 800ce90:	d838      	bhi.n	800cf04 <UART_SetConfig+0x358>
 800ce92:	a201      	add	r2, pc, #4	; (adr r2, 800ce98 <UART_SetConfig+0x2ec>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800ceb1 	.word	0x0800ceb1
 800ce9c:	0800ceb9 	.word	0x0800ceb9
 800cea0:	0800cec1 	.word	0x0800cec1
 800cea4:	0800cec9 	.word	0x0800cec9
 800cea8:	0800ced1 	.word	0x0800ced1
 800ceac:	0800cefd 	.word	0x0800cefd
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceb6:	e14a      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ceb8:	2304      	movs	r3, #4
 800ceba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cebe:	e146      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cec0:	2308      	movs	r3, #8
 800cec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cec6:	e142      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cec8:	2310      	movs	r3, #16
 800ceca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cece:	e13e      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ced0:	2320      	movs	r3, #32
 800ced2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ced6:	e13a      	b.n	800d14e <UART_SetConfig+0x5a2>
 800ced8:	cfff69f3 	.word	0xcfff69f3
 800cedc:	58000c00 	.word	0x58000c00
 800cee0:	11fff4ff 	.word	0x11fff4ff
 800cee4:	40011000 	.word	0x40011000
 800cee8:	58024400 	.word	0x58024400
 800ceec:	40004400 	.word	0x40004400
 800cef0:	40004800 	.word	0x40004800
 800cef4:	40004c00 	.word	0x40004c00
 800cef8:	40005000 	.word	0x40005000
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf02:	e124      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cf04:	2380      	movs	r3, #128	; 0x80
 800cf06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf0a:	e120      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4acc      	ldr	r2, [pc, #816]	; (800d244 <UART_SetConfig+0x698>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d176      	bne.n	800d004 <UART_SetConfig+0x458>
 800cf16:	4bcc      	ldr	r3, [pc, #816]	; (800d248 <UART_SetConfig+0x69c>)
 800cf18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf1e:	2b28      	cmp	r3, #40	; 0x28
 800cf20:	d86c      	bhi.n	800cffc <UART_SetConfig+0x450>
 800cf22:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <UART_SetConfig+0x37c>)
 800cf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf28:	0800cfcd 	.word	0x0800cfcd
 800cf2c:	0800cffd 	.word	0x0800cffd
 800cf30:	0800cffd 	.word	0x0800cffd
 800cf34:	0800cffd 	.word	0x0800cffd
 800cf38:	0800cffd 	.word	0x0800cffd
 800cf3c:	0800cffd 	.word	0x0800cffd
 800cf40:	0800cffd 	.word	0x0800cffd
 800cf44:	0800cffd 	.word	0x0800cffd
 800cf48:	0800cfd5 	.word	0x0800cfd5
 800cf4c:	0800cffd 	.word	0x0800cffd
 800cf50:	0800cffd 	.word	0x0800cffd
 800cf54:	0800cffd 	.word	0x0800cffd
 800cf58:	0800cffd 	.word	0x0800cffd
 800cf5c:	0800cffd 	.word	0x0800cffd
 800cf60:	0800cffd 	.word	0x0800cffd
 800cf64:	0800cffd 	.word	0x0800cffd
 800cf68:	0800cfdd 	.word	0x0800cfdd
 800cf6c:	0800cffd 	.word	0x0800cffd
 800cf70:	0800cffd 	.word	0x0800cffd
 800cf74:	0800cffd 	.word	0x0800cffd
 800cf78:	0800cffd 	.word	0x0800cffd
 800cf7c:	0800cffd 	.word	0x0800cffd
 800cf80:	0800cffd 	.word	0x0800cffd
 800cf84:	0800cffd 	.word	0x0800cffd
 800cf88:	0800cfe5 	.word	0x0800cfe5
 800cf8c:	0800cffd 	.word	0x0800cffd
 800cf90:	0800cffd 	.word	0x0800cffd
 800cf94:	0800cffd 	.word	0x0800cffd
 800cf98:	0800cffd 	.word	0x0800cffd
 800cf9c:	0800cffd 	.word	0x0800cffd
 800cfa0:	0800cffd 	.word	0x0800cffd
 800cfa4:	0800cffd 	.word	0x0800cffd
 800cfa8:	0800cfed 	.word	0x0800cfed
 800cfac:	0800cffd 	.word	0x0800cffd
 800cfb0:	0800cffd 	.word	0x0800cffd
 800cfb4:	0800cffd 	.word	0x0800cffd
 800cfb8:	0800cffd 	.word	0x0800cffd
 800cfbc:	0800cffd 	.word	0x0800cffd
 800cfc0:	0800cffd 	.word	0x0800cffd
 800cfc4:	0800cffd 	.word	0x0800cffd
 800cfc8:	0800cff5 	.word	0x0800cff5
 800cfcc:	2301      	movs	r3, #1
 800cfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfd2:	e0bc      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cfd4:	2304      	movs	r3, #4
 800cfd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfda:	e0b8      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cfdc:	2308      	movs	r3, #8
 800cfde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfe2:	e0b4      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cfe4:	2310      	movs	r3, #16
 800cfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfea:	e0b0      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cfec:	2320      	movs	r3, #32
 800cfee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cff2:	e0ac      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cff4:	2340      	movs	r3, #64	; 0x40
 800cff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cffa:	e0a8      	b.n	800d14e <UART_SetConfig+0x5a2>
 800cffc:	2380      	movs	r3, #128	; 0x80
 800cffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d002:	e0a4      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a90      	ldr	r2, [pc, #576]	; (800d24c <UART_SetConfig+0x6a0>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d130      	bne.n	800d070 <UART_SetConfig+0x4c4>
 800d00e:	4b8e      	ldr	r3, [pc, #568]	; (800d248 <UART_SetConfig+0x69c>)
 800d010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d012:	f003 0307 	and.w	r3, r3, #7
 800d016:	2b05      	cmp	r3, #5
 800d018:	d826      	bhi.n	800d068 <UART_SetConfig+0x4bc>
 800d01a:	a201      	add	r2, pc, #4	; (adr r2, 800d020 <UART_SetConfig+0x474>)
 800d01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d020:	0800d039 	.word	0x0800d039
 800d024:	0800d041 	.word	0x0800d041
 800d028:	0800d049 	.word	0x0800d049
 800d02c:	0800d051 	.word	0x0800d051
 800d030:	0800d059 	.word	0x0800d059
 800d034:	0800d061 	.word	0x0800d061
 800d038:	2300      	movs	r3, #0
 800d03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d03e:	e086      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d040:	2304      	movs	r3, #4
 800d042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d046:	e082      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d048:	2308      	movs	r3, #8
 800d04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d04e:	e07e      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d050:	2310      	movs	r3, #16
 800d052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d056:	e07a      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d058:	2320      	movs	r3, #32
 800d05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d05e:	e076      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d060:	2340      	movs	r3, #64	; 0x40
 800d062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d066:	e072      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d068:	2380      	movs	r3, #128	; 0x80
 800d06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d06e:	e06e      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a76      	ldr	r2, [pc, #472]	; (800d250 <UART_SetConfig+0x6a4>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d130      	bne.n	800d0dc <UART_SetConfig+0x530>
 800d07a:	4b73      	ldr	r3, [pc, #460]	; (800d248 <UART_SetConfig+0x69c>)
 800d07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d07e:	f003 0307 	and.w	r3, r3, #7
 800d082:	2b05      	cmp	r3, #5
 800d084:	d826      	bhi.n	800d0d4 <UART_SetConfig+0x528>
 800d086:	a201      	add	r2, pc, #4	; (adr r2, 800d08c <UART_SetConfig+0x4e0>)
 800d088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08c:	0800d0a5 	.word	0x0800d0a5
 800d090:	0800d0ad 	.word	0x0800d0ad
 800d094:	0800d0b5 	.word	0x0800d0b5
 800d098:	0800d0bd 	.word	0x0800d0bd
 800d09c:	0800d0c5 	.word	0x0800d0c5
 800d0a0:	0800d0cd 	.word	0x0800d0cd
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0aa:	e050      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d0ac:	2304      	movs	r3, #4
 800d0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0b2:	e04c      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d0b4:	2308      	movs	r3, #8
 800d0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ba:	e048      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d0bc:	2310      	movs	r3, #16
 800d0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c2:	e044      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d0c4:	2320      	movs	r3, #32
 800d0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ca:	e040      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d0cc:	2340      	movs	r3, #64	; 0x40
 800d0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0d2:	e03c      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d0d4:	2380      	movs	r3, #128	; 0x80
 800d0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0da:	e038      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a5c      	ldr	r2, [pc, #368]	; (800d254 <UART_SetConfig+0x6a8>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d130      	bne.n	800d148 <UART_SetConfig+0x59c>
 800d0e6:	4b58      	ldr	r3, [pc, #352]	; (800d248 <UART_SetConfig+0x69c>)
 800d0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ea:	f003 0307 	and.w	r3, r3, #7
 800d0ee:	2b05      	cmp	r3, #5
 800d0f0:	d826      	bhi.n	800d140 <UART_SetConfig+0x594>
 800d0f2:	a201      	add	r2, pc, #4	; (adr r2, 800d0f8 <UART_SetConfig+0x54c>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d111 	.word	0x0800d111
 800d0fc:	0800d119 	.word	0x0800d119
 800d100:	0800d121 	.word	0x0800d121
 800d104:	0800d129 	.word	0x0800d129
 800d108:	0800d131 	.word	0x0800d131
 800d10c:	0800d139 	.word	0x0800d139
 800d110:	2302      	movs	r3, #2
 800d112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d116:	e01a      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d118:	2304      	movs	r3, #4
 800d11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d11e:	e016      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d120:	2308      	movs	r3, #8
 800d122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d126:	e012      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d128:	2310      	movs	r3, #16
 800d12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d12e:	e00e      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d130:	2320      	movs	r3, #32
 800d132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d136:	e00a      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d138:	2340      	movs	r3, #64	; 0x40
 800d13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d13e:	e006      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d140:	2380      	movs	r3, #128	; 0x80
 800d142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d146:	e002      	b.n	800d14e <UART_SetConfig+0x5a2>
 800d148:	2380      	movs	r3, #128	; 0x80
 800d14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a40      	ldr	r2, [pc, #256]	; (800d254 <UART_SetConfig+0x6a8>)
 800d154:	4293      	cmp	r3, r2
 800d156:	f040 80ef 	bne.w	800d338 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d15a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d15e:	2b20      	cmp	r3, #32
 800d160:	dc46      	bgt.n	800d1f0 <UART_SetConfig+0x644>
 800d162:	2b02      	cmp	r3, #2
 800d164:	f2c0 8081 	blt.w	800d26a <UART_SetConfig+0x6be>
 800d168:	3b02      	subs	r3, #2
 800d16a:	2b1e      	cmp	r3, #30
 800d16c:	d87d      	bhi.n	800d26a <UART_SetConfig+0x6be>
 800d16e:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <UART_SetConfig+0x5c8>)
 800d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d174:	0800d1f7 	.word	0x0800d1f7
 800d178:	0800d26b 	.word	0x0800d26b
 800d17c:	0800d1ff 	.word	0x0800d1ff
 800d180:	0800d26b 	.word	0x0800d26b
 800d184:	0800d26b 	.word	0x0800d26b
 800d188:	0800d26b 	.word	0x0800d26b
 800d18c:	0800d20f 	.word	0x0800d20f
 800d190:	0800d26b 	.word	0x0800d26b
 800d194:	0800d26b 	.word	0x0800d26b
 800d198:	0800d26b 	.word	0x0800d26b
 800d19c:	0800d26b 	.word	0x0800d26b
 800d1a0:	0800d26b 	.word	0x0800d26b
 800d1a4:	0800d26b 	.word	0x0800d26b
 800d1a8:	0800d26b 	.word	0x0800d26b
 800d1ac:	0800d21f 	.word	0x0800d21f
 800d1b0:	0800d26b 	.word	0x0800d26b
 800d1b4:	0800d26b 	.word	0x0800d26b
 800d1b8:	0800d26b 	.word	0x0800d26b
 800d1bc:	0800d26b 	.word	0x0800d26b
 800d1c0:	0800d26b 	.word	0x0800d26b
 800d1c4:	0800d26b 	.word	0x0800d26b
 800d1c8:	0800d26b 	.word	0x0800d26b
 800d1cc:	0800d26b 	.word	0x0800d26b
 800d1d0:	0800d26b 	.word	0x0800d26b
 800d1d4:	0800d26b 	.word	0x0800d26b
 800d1d8:	0800d26b 	.word	0x0800d26b
 800d1dc:	0800d26b 	.word	0x0800d26b
 800d1e0:	0800d26b 	.word	0x0800d26b
 800d1e4:	0800d26b 	.word	0x0800d26b
 800d1e8:	0800d26b 	.word	0x0800d26b
 800d1ec:	0800d25d 	.word	0x0800d25d
 800d1f0:	2b40      	cmp	r3, #64	; 0x40
 800d1f2:	d036      	beq.n	800d262 <UART_SetConfig+0x6b6>
 800d1f4:	e039      	b.n	800d26a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d1f6:	f7fe fc0d 	bl	800ba14 <HAL_RCCEx_GetD3PCLK1Freq>
 800d1fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1fc:	e03b      	b.n	800d276 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1fe:	f107 0314 	add.w	r3, r7, #20
 800d202:	4618      	mov	r0, r3
 800d204:	f7fe fc1c 	bl	800ba40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d20c:	e033      	b.n	800d276 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d20e:	f107 0308 	add.w	r3, r7, #8
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe fd68 	bl	800bce8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d21c:	e02b      	b.n	800d276 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d21e:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <UART_SetConfig+0x69c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 0320 	and.w	r3, r3, #32
 800d226:	2b00      	cmp	r3, #0
 800d228:	d009      	beq.n	800d23e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d22a:	4b07      	ldr	r3, [pc, #28]	; (800d248 <UART_SetConfig+0x69c>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	08db      	lsrs	r3, r3, #3
 800d230:	f003 0303 	and.w	r3, r3, #3
 800d234:	4a08      	ldr	r2, [pc, #32]	; (800d258 <UART_SetConfig+0x6ac>)
 800d236:	fa22 f303 	lsr.w	r3, r2, r3
 800d23a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d23c:	e01b      	b.n	800d276 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d23e:	4b06      	ldr	r3, [pc, #24]	; (800d258 <UART_SetConfig+0x6ac>)
 800d240:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d242:	e018      	b.n	800d276 <UART_SetConfig+0x6ca>
 800d244:	40011400 	.word	0x40011400
 800d248:	58024400 	.word	0x58024400
 800d24c:	40007800 	.word	0x40007800
 800d250:	40007c00 	.word	0x40007c00
 800d254:	58000c00 	.word	0x58000c00
 800d258:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d25c:	4bc4      	ldr	r3, [pc, #784]	; (800d570 <UART_SetConfig+0x9c4>)
 800d25e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d260:	e009      	b.n	800d276 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d266:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d268:	e005      	b.n	800d276 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d26a:	2300      	movs	r3, #0
 800d26c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 81da 	beq.w	800d632 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	4abc      	ldr	r2, [pc, #752]	; (800d574 <UART_SetConfig+0x9c8>)
 800d284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d288:	461a      	mov	r2, r3
 800d28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d290:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	685a      	ldr	r2, [r3, #4]
 800d296:	4613      	mov	r3, r2
 800d298:	005b      	lsls	r3, r3, #1
 800d29a:	4413      	add	r3, r2
 800d29c:	6a3a      	ldr	r2, [r7, #32]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d305      	bcc.n	800d2ae <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2a8:	6a3a      	ldr	r2, [r7, #32]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d903      	bls.n	800d2b6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d2b4:	e1bd      	b.n	800d632 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f04f 0100 	mov.w	r1, #0
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c2:	4aac      	ldr	r2, [pc, #688]	; (800d574 <UART_SetConfig+0x9c8>)
 800d2c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	f04f 0300 	mov.w	r3, #0
 800d2ce:	f7f3 f85f 	bl	8000390 <__aeabi_uldivmod>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	4610      	mov	r0, r2
 800d2d8:	4619      	mov	r1, r3
 800d2da:	f04f 0200 	mov.w	r2, #0
 800d2de:	f04f 0300 	mov.w	r3, #0
 800d2e2:	020b      	lsls	r3, r1, #8
 800d2e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2e8:	0202      	lsls	r2, r0, #8
 800d2ea:	6879      	ldr	r1, [r7, #4]
 800d2ec:	6849      	ldr	r1, [r1, #4]
 800d2ee:	0849      	lsrs	r1, r1, #1
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	f04f 0100 	mov.w	r1, #0
 800d2f6:	1814      	adds	r4, r2, r0
 800d2f8:	eb43 0501 	adc.w	r5, r3, r1
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	461a      	mov	r2, r3
 800d302:	f04f 0300 	mov.w	r3, #0
 800d306:	4620      	mov	r0, r4
 800d308:	4629      	mov	r1, r5
 800d30a:	f7f3 f841 	bl	8000390 <__aeabi_uldivmod>
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	4613      	mov	r3, r2
 800d314:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d31c:	d308      	bcc.n	800d330 <UART_SetConfig+0x784>
 800d31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d324:	d204      	bcs.n	800d330 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d32c:	60da      	str	r2, [r3, #12]
 800d32e:	e180      	b.n	800d632 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d330:	2301      	movs	r3, #1
 800d332:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d336:	e17c      	b.n	800d632 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	69db      	ldr	r3, [r3, #28]
 800d33c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d340:	f040 80be 	bne.w	800d4c0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800d344:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d348:	2b20      	cmp	r3, #32
 800d34a:	dc49      	bgt.n	800d3e0 <UART_SetConfig+0x834>
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	db7c      	blt.n	800d44a <UART_SetConfig+0x89e>
 800d350:	2b20      	cmp	r3, #32
 800d352:	d87a      	bhi.n	800d44a <UART_SetConfig+0x89e>
 800d354:	a201      	add	r2, pc, #4	; (adr r2, 800d35c <UART_SetConfig+0x7b0>)
 800d356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35a:	bf00      	nop
 800d35c:	0800d3e7 	.word	0x0800d3e7
 800d360:	0800d3ef 	.word	0x0800d3ef
 800d364:	0800d44b 	.word	0x0800d44b
 800d368:	0800d44b 	.word	0x0800d44b
 800d36c:	0800d3f7 	.word	0x0800d3f7
 800d370:	0800d44b 	.word	0x0800d44b
 800d374:	0800d44b 	.word	0x0800d44b
 800d378:	0800d44b 	.word	0x0800d44b
 800d37c:	0800d407 	.word	0x0800d407
 800d380:	0800d44b 	.word	0x0800d44b
 800d384:	0800d44b 	.word	0x0800d44b
 800d388:	0800d44b 	.word	0x0800d44b
 800d38c:	0800d44b 	.word	0x0800d44b
 800d390:	0800d44b 	.word	0x0800d44b
 800d394:	0800d44b 	.word	0x0800d44b
 800d398:	0800d44b 	.word	0x0800d44b
 800d39c:	0800d417 	.word	0x0800d417
 800d3a0:	0800d44b 	.word	0x0800d44b
 800d3a4:	0800d44b 	.word	0x0800d44b
 800d3a8:	0800d44b 	.word	0x0800d44b
 800d3ac:	0800d44b 	.word	0x0800d44b
 800d3b0:	0800d44b 	.word	0x0800d44b
 800d3b4:	0800d44b 	.word	0x0800d44b
 800d3b8:	0800d44b 	.word	0x0800d44b
 800d3bc:	0800d44b 	.word	0x0800d44b
 800d3c0:	0800d44b 	.word	0x0800d44b
 800d3c4:	0800d44b 	.word	0x0800d44b
 800d3c8:	0800d44b 	.word	0x0800d44b
 800d3cc:	0800d44b 	.word	0x0800d44b
 800d3d0:	0800d44b 	.word	0x0800d44b
 800d3d4:	0800d44b 	.word	0x0800d44b
 800d3d8:	0800d44b 	.word	0x0800d44b
 800d3dc:	0800d43d 	.word	0x0800d43d
 800d3e0:	2b40      	cmp	r3, #64	; 0x40
 800d3e2:	d02e      	beq.n	800d442 <UART_SetConfig+0x896>
 800d3e4:	e031      	b.n	800d44a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3e6:	f7fd fba9 	bl	800ab3c <HAL_RCC_GetPCLK1Freq>
 800d3ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d3ec:	e033      	b.n	800d456 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3ee:	f7fd fbbb 	bl	800ab68 <HAL_RCC_GetPCLK2Freq>
 800d3f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d3f4:	e02f      	b.n	800d456 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3f6:	f107 0314 	add.w	r3, r7, #20
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fe fb20 	bl	800ba40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d404:	e027      	b.n	800d456 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d406:	f107 0308 	add.w	r3, r7, #8
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7fe fc6c 	bl	800bce8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d414:	e01f      	b.n	800d456 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d416:	4b58      	ldr	r3, [pc, #352]	; (800d578 <UART_SetConfig+0x9cc>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 0320 	and.w	r3, r3, #32
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d009      	beq.n	800d436 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d422:	4b55      	ldr	r3, [pc, #340]	; (800d578 <UART_SetConfig+0x9cc>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	08db      	lsrs	r3, r3, #3
 800d428:	f003 0303 	and.w	r3, r3, #3
 800d42c:	4a53      	ldr	r2, [pc, #332]	; (800d57c <UART_SetConfig+0x9d0>)
 800d42e:	fa22 f303 	lsr.w	r3, r2, r3
 800d432:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d434:	e00f      	b.n	800d456 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d436:	4b51      	ldr	r3, [pc, #324]	; (800d57c <UART_SetConfig+0x9d0>)
 800d438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d43a:	e00c      	b.n	800d456 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d43c:	4b4c      	ldr	r3, [pc, #304]	; (800d570 <UART_SetConfig+0x9c4>)
 800d43e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d440:	e009      	b.n	800d456 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d446:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d448:	e005      	b.n	800d456 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d44a:	2300      	movs	r3, #0
 800d44c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 80ea 	beq.w	800d632 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d462:	4a44      	ldr	r2, [pc, #272]	; (800d574 <UART_SetConfig+0x9c8>)
 800d464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d468:	461a      	mov	r2, r3
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d470:	005a      	lsls	r2, r3, #1
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	085b      	lsrs	r3, r3, #1
 800d478:	441a      	add	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d482:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	2b0f      	cmp	r3, #15
 800d488:	d916      	bls.n	800d4b8 <UART_SetConfig+0x90c>
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d490:	d212      	bcs.n	800d4b8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	b29b      	uxth	r3, r3
 800d496:	f023 030f 	bic.w	r3, r3, #15
 800d49a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	085b      	lsrs	r3, r3, #1
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	f003 0307 	and.w	r3, r3, #7
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d4b4:	60da      	str	r2, [r3, #12]
 800d4b6:	e0bc      	b.n	800d632 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d4be:	e0b8      	b.n	800d632 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d4c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d4c4:	2b20      	cmp	r3, #32
 800d4c6:	dc4b      	bgt.n	800d560 <UART_SetConfig+0x9b4>
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f2c0 8087 	blt.w	800d5dc <UART_SetConfig+0xa30>
 800d4ce:	2b20      	cmp	r3, #32
 800d4d0:	f200 8084 	bhi.w	800d5dc <UART_SetConfig+0xa30>
 800d4d4:	a201      	add	r2, pc, #4	; (adr r2, 800d4dc <UART_SetConfig+0x930>)
 800d4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4da:	bf00      	nop
 800d4dc:	0800d567 	.word	0x0800d567
 800d4e0:	0800d581 	.word	0x0800d581
 800d4e4:	0800d5dd 	.word	0x0800d5dd
 800d4e8:	0800d5dd 	.word	0x0800d5dd
 800d4ec:	0800d589 	.word	0x0800d589
 800d4f0:	0800d5dd 	.word	0x0800d5dd
 800d4f4:	0800d5dd 	.word	0x0800d5dd
 800d4f8:	0800d5dd 	.word	0x0800d5dd
 800d4fc:	0800d599 	.word	0x0800d599
 800d500:	0800d5dd 	.word	0x0800d5dd
 800d504:	0800d5dd 	.word	0x0800d5dd
 800d508:	0800d5dd 	.word	0x0800d5dd
 800d50c:	0800d5dd 	.word	0x0800d5dd
 800d510:	0800d5dd 	.word	0x0800d5dd
 800d514:	0800d5dd 	.word	0x0800d5dd
 800d518:	0800d5dd 	.word	0x0800d5dd
 800d51c:	0800d5a9 	.word	0x0800d5a9
 800d520:	0800d5dd 	.word	0x0800d5dd
 800d524:	0800d5dd 	.word	0x0800d5dd
 800d528:	0800d5dd 	.word	0x0800d5dd
 800d52c:	0800d5dd 	.word	0x0800d5dd
 800d530:	0800d5dd 	.word	0x0800d5dd
 800d534:	0800d5dd 	.word	0x0800d5dd
 800d538:	0800d5dd 	.word	0x0800d5dd
 800d53c:	0800d5dd 	.word	0x0800d5dd
 800d540:	0800d5dd 	.word	0x0800d5dd
 800d544:	0800d5dd 	.word	0x0800d5dd
 800d548:	0800d5dd 	.word	0x0800d5dd
 800d54c:	0800d5dd 	.word	0x0800d5dd
 800d550:	0800d5dd 	.word	0x0800d5dd
 800d554:	0800d5dd 	.word	0x0800d5dd
 800d558:	0800d5dd 	.word	0x0800d5dd
 800d55c:	0800d5cf 	.word	0x0800d5cf
 800d560:	2b40      	cmp	r3, #64	; 0x40
 800d562:	d037      	beq.n	800d5d4 <UART_SetConfig+0xa28>
 800d564:	e03a      	b.n	800d5dc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d566:	f7fd fae9 	bl	800ab3c <HAL_RCC_GetPCLK1Freq>
 800d56a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d56c:	e03c      	b.n	800d5e8 <UART_SetConfig+0xa3c>
 800d56e:	bf00      	nop
 800d570:	003d0900 	.word	0x003d0900
 800d574:	0802458c 	.word	0x0802458c
 800d578:	58024400 	.word	0x58024400
 800d57c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d580:	f7fd faf2 	bl	800ab68 <HAL_RCC_GetPCLK2Freq>
 800d584:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d586:	e02f      	b.n	800d5e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d588:	f107 0314 	add.w	r3, r7, #20
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fe fa57 	bl	800ba40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d596:	e027      	b.n	800d5e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d598:	f107 0308 	add.w	r3, r7, #8
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe fba3 	bl	800bce8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5a6:	e01f      	b.n	800d5e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5a8:	4b2c      	ldr	r3, [pc, #176]	; (800d65c <UART_SetConfig+0xab0>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f003 0320 	and.w	r3, r3, #32
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d009      	beq.n	800d5c8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5b4:	4b29      	ldr	r3, [pc, #164]	; (800d65c <UART_SetConfig+0xab0>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	08db      	lsrs	r3, r3, #3
 800d5ba:	f003 0303 	and.w	r3, r3, #3
 800d5be:	4a28      	ldr	r2, [pc, #160]	; (800d660 <UART_SetConfig+0xab4>)
 800d5c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5c6:	e00f      	b.n	800d5e8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d5c8:	4b25      	ldr	r3, [pc, #148]	; (800d660 <UART_SetConfig+0xab4>)
 800d5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5cc:	e00c      	b.n	800d5e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5ce:	4b25      	ldr	r3, [pc, #148]	; (800d664 <UART_SetConfig+0xab8>)
 800d5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5d2:	e009      	b.n	800d5e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5da:	e005      	b.n	800d5e8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d5e6:	bf00      	nop
    }

    if (pclk != 0U)
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d021      	beq.n	800d632 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f2:	4a1d      	ldr	r2, [pc, #116]	; (800d668 <UART_SetConfig+0xabc>)
 800d5f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	fbb3 f2f2 	udiv	r2, r3, r2
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	085b      	lsrs	r3, r3, #1
 800d606:	441a      	add	r2, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d610:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d614:	2b0f      	cmp	r3, #15
 800d616:	d909      	bls.n	800d62c <UART_SetConfig+0xa80>
 800d618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d61e:	d205      	bcs.n	800d62c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	b29a      	uxth	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	60da      	str	r2, [r3, #12]
 800d62a:	e002      	b.n	800d632 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d64e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d652:	4618      	mov	r0, r3
 800d654:	3738      	adds	r7, #56	; 0x38
 800d656:	46bd      	mov	sp, r7
 800d658:	bdb0      	pop	{r4, r5, r7, pc}
 800d65a:	bf00      	nop
 800d65c:	58024400 	.word	0x58024400
 800d660:	03d09000 	.word	0x03d09000
 800d664:	003d0900 	.word	0x003d0900
 800d668:	0802458c 	.word	0x0802458c

0800d66c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d678:	f003 0301 	and.w	r3, r3, #1
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00a      	beq.n	800d696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	430a      	orrs	r2, r1
 800d694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d69a:	f003 0302 	and.w	r3, r3, #2
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00a      	beq.n	800d6b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	430a      	orrs	r2, r1
 800d6b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6bc:	f003 0304 	and.w	r3, r3, #4
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d00a      	beq.n	800d6da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	430a      	orrs	r2, r1
 800d6d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6de:	f003 0308 	and.w	r3, r3, #8
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	430a      	orrs	r2, r1
 800d6fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d700:	f003 0310 	and.w	r3, r3, #16
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00a      	beq.n	800d71e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	430a      	orrs	r2, r1
 800d71c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d722:	f003 0320 	and.w	r3, r3, #32
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	430a      	orrs	r2, r1
 800d73e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01a      	beq.n	800d782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	430a      	orrs	r2, r1
 800d760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d76a:	d10a      	bne.n	800d782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	430a      	orrs	r2, r1
 800d780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00a      	beq.n	800d7a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	430a      	orrs	r2, r1
 800d7a2:	605a      	str	r2, [r3, #4]
  }
}
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7c0:	f7f5 fdea 	bl	8003398 <HAL_GetTick>
 800d7c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 0308 	and.w	r3, r3, #8
 800d7d0:	2b08      	cmp	r3, #8
 800d7d2:	d10e      	bne.n	800d7f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f82f 	bl	800d846 <UART_WaitOnFlagUntilTimeout>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e025      	b.n	800d83e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0304 	and.w	r3, r3, #4
 800d7fc:	2b04      	cmp	r3, #4
 800d7fe:	d10e      	bne.n	800d81e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f819 	bl	800d846 <UART_WaitOnFlagUntilTimeout>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d81a:	2303      	movs	r3, #3
 800d81c:	e00f      	b.n	800d83e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2220      	movs	r2, #32
 800d822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2220      	movs	r2, #32
 800d82a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b09c      	sub	sp, #112	; 0x70
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	60f8      	str	r0, [r7, #12]
 800d84e:	60b9      	str	r1, [r7, #8]
 800d850:	603b      	str	r3, [r7, #0]
 800d852:	4613      	mov	r3, r2
 800d854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d856:	e0a9      	b.n	800d9ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d85a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d85e:	f000 80a5 	beq.w	800d9ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d862:	f7f5 fd99 	bl	8003398 <HAL_GetTick>
 800d866:	4602      	mov	r2, r0
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d86e:	429a      	cmp	r2, r3
 800d870:	d302      	bcc.n	800d878 <UART_WaitOnFlagUntilTimeout+0x32>
 800d872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d874:	2b00      	cmp	r3, #0
 800d876:	d140      	bne.n	800d8fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d880:	e853 3f00 	ldrex	r3, [r3]
 800d884:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d88c:	667b      	str	r3, [r7, #100]	; 0x64
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d896:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d898:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d89c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d8a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e6      	bne.n	800d878 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b4:	e853 3f00 	ldrex	r3, [r3]
 800d8b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	f023 0301 	bic.w	r3, r3, #1
 800d8c0:	663b      	str	r3, [r7, #96]	; 0x60
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3308      	adds	r3, #8
 800d8c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800d8cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8d2:	e841 2300 	strex	r3, r2, [r1]
 800d8d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1e5      	bne.n	800d8aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2220      	movs	r2, #32
 800d8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e069      	b.n	800d9ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f003 0304 	and.w	r3, r3, #4
 800d904:	2b00      	cmp	r3, #0
 800d906:	d051      	beq.n	800d9ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d916:	d149      	bne.n	800d9ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d920:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92a:	e853 3f00 	ldrex	r3, [r3]
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d936:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	461a      	mov	r2, r3
 800d93e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d940:	637b      	str	r3, [r7, #52]	; 0x34
 800d942:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d948:	e841 2300 	strex	r3, r2, [r1]
 800d94c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1e6      	bne.n	800d922 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	3308      	adds	r3, #8
 800d95a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	e853 3f00 	ldrex	r3, [r3]
 800d962:	613b      	str	r3, [r7, #16]
   return(result);
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	f023 0301 	bic.w	r3, r3, #1
 800d96a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	3308      	adds	r3, #8
 800d972:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d974:	623a      	str	r2, [r7, #32]
 800d976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d978:	69f9      	ldr	r1, [r7, #28]
 800d97a:	6a3a      	ldr	r2, [r7, #32]
 800d97c:	e841 2300 	strex	r3, r2, [r1]
 800d980:	61bb      	str	r3, [r7, #24]
   return(result);
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1e5      	bne.n	800d954 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2220      	movs	r2, #32
 800d98c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2220      	movs	r2, #32
 800d994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2220      	movs	r2, #32
 800d99c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d9a8:	2303      	movs	r3, #3
 800d9aa:	e010      	b.n	800d9ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	69da      	ldr	r2, [r3, #28]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	bf0c      	ite	eq
 800d9bc:	2301      	moveq	r3, #1
 800d9be:	2300      	movne	r3, #0
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	f43f af46 	beq.w	800d858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3770      	adds	r7, #112	; 0x70
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b08f      	sub	sp, #60	; 0x3c
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e4:	6a3b      	ldr	r3, [r7, #32]
 800d9e6:	e853 3f00 	ldrex	r3, [r3]
 800d9ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da04:	e841 2300 	strex	r3, r2, [r1]
 800da08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1e6      	bne.n	800d9de <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	3308      	adds	r3, #8
 800da16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	e853 3f00 	ldrex	r3, [r3]
 800da1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800da26:	633b      	str	r3, [r7, #48]	; 0x30
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3308      	adds	r3, #8
 800da2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da30:	61ba      	str	r2, [r7, #24]
 800da32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da34:	6979      	ldr	r1, [r7, #20]
 800da36:	69ba      	ldr	r2, [r7, #24]
 800da38:	e841 2300 	strex	r3, r2, [r1]
 800da3c:	613b      	str	r3, [r7, #16]
   return(result);
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1e5      	bne.n	800da10 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2220      	movs	r2, #32
 800da48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800da4c:	bf00      	nop
 800da4e:	373c      	adds	r7, #60	; 0x3c
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da58:	b480      	push	{r7}
 800da5a:	b095      	sub	sp, #84	; 0x54
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da68:	e853 3f00 	ldrex	r3, [r3]
 800da6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	461a      	mov	r2, r3
 800da7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da7e:	643b      	str	r3, [r7, #64]	; 0x40
 800da80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da86:	e841 2300 	strex	r3, r2, [r1]
 800da8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1e6      	bne.n	800da60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	3308      	adds	r3, #8
 800da98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	6a3b      	ldr	r3, [r7, #32]
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800daa2:	69fa      	ldr	r2, [r7, #28]
 800daa4:	4b1e      	ldr	r3, [pc, #120]	; (800db20 <UART_EndRxTransfer+0xc8>)
 800daa6:	4013      	ands	r3, r2
 800daa8:	64bb      	str	r3, [r7, #72]	; 0x48
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3308      	adds	r3, #8
 800dab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daba:	e841 2300 	strex	r3, r2, [r1]
 800dabe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1e5      	bne.n	800da92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d118      	bne.n	800db00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	e853 3f00 	ldrex	r3, [r3]
 800dada:	60bb      	str	r3, [r7, #8]
   return(result);
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	f023 0310 	bic.w	r3, r3, #16
 800dae2:	647b      	str	r3, [r7, #68]	; 0x44
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	461a      	mov	r2, r3
 800daea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daec:	61bb      	str	r3, [r7, #24]
 800daee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf0:	6979      	ldr	r1, [r7, #20]
 800daf2:	69ba      	ldr	r2, [r7, #24]
 800daf4:	e841 2300 	strex	r3, r2, [r1]
 800daf8:	613b      	str	r3, [r7, #16]
   return(result);
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1e6      	bne.n	800dace <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2220      	movs	r2, #32
 800db04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	671a      	str	r2, [r3, #112]	; 0x70
}
 800db14:	bf00      	nop
 800db16:	3754      	adds	r7, #84	; 0x54
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	effffffe 	.word	0xeffffffe

0800db24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b090      	sub	sp, #64	; 0x40
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db30:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	69db      	ldr	r3, [r3, #28]
 800db36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db3a:	d037      	beq.n	800dbac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800db3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3e:	2200      	movs	r2, #0
 800db40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800db44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3308      	adds	r3, #8
 800db4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	e853 3f00 	ldrex	r3, [r3]
 800db52:	623b      	str	r3, [r7, #32]
   return(result);
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800db5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3308      	adds	r3, #8
 800db62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db64:	633a      	str	r2, [r7, #48]	; 0x30
 800db66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db6c:	e841 2300 	strex	r3, r2, [r1]
 800db70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1e5      	bne.n	800db44 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	e853 3f00 	ldrex	r3, [r3]
 800db84:	60fb      	str	r3, [r7, #12]
   return(result);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db8c:	637b      	str	r3, [r7, #52]	; 0x34
 800db8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	461a      	mov	r2, r3
 800db94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db96:	61fb      	str	r3, [r7, #28]
 800db98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db9a:	69b9      	ldr	r1, [r7, #24]
 800db9c:	69fa      	ldr	r2, [r7, #28]
 800db9e:	e841 2300 	strex	r3, r2, [r1]
 800dba2:	617b      	str	r3, [r7, #20]
   return(result);
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1e6      	bne.n	800db78 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbaa:	e002      	b.n	800dbb2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800dbac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbae:	f7fe ffd3 	bl	800cb58 <HAL_UART_TxCpltCallback>
}
 800dbb2:	bf00      	nop
 800dbb4:	3740      	adds	r7, #64	; 0x40
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f7fe ffcf 	bl	800cb6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbce:	bf00      	nop
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b086      	sub	sp, #24
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbf2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbfe:	2b80      	cmp	r3, #128	; 0x80
 800dc00:	d109      	bne.n	800dc16 <UART_DMAError+0x40>
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	2b21      	cmp	r3, #33	; 0x21
 800dc06:	d106      	bne.n	800dc16 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800dc10:	6978      	ldr	r0, [r7, #20]
 800dc12:	f7ff fee0 	bl	800d9d6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc20:	2b40      	cmp	r3, #64	; 0x40
 800dc22:	d109      	bne.n	800dc38 <UART_DMAError+0x62>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b22      	cmp	r3, #34	; 0x22
 800dc28:	d106      	bne.n	800dc38 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dc32:	6978      	ldr	r0, [r7, #20]
 800dc34:	f7ff ff10 	bl	800da58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc3e:	f043 0210 	orr.w	r2, r3, #16
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc48:	6978      	ldr	r0, [r7, #20]
 800dc4a:	f7fe ff99 	bl	800cb80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc4e:	bf00      	nop
 800dc50:	3718      	adds	r7, #24
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f7fe ff83 	bl	800cb80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc7a:	bf00      	nop
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b088      	sub	sp, #32
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	e853 3f00 	ldrex	r3, [r3]
 800dc96:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc9e:	61fb      	str	r3, [r7, #28]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	461a      	mov	r2, r3
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	61bb      	str	r3, [r7, #24]
 800dcaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcac:	6979      	ldr	r1, [r7, #20]
 800dcae:	69ba      	ldr	r2, [r7, #24]
 800dcb0:	e841 2300 	strex	r3, r2, [r1]
 800dcb4:	613b      	str	r3, [r7, #16]
   return(result);
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1e6      	bne.n	800dc8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2220      	movs	r2, #32
 800dcc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7fe ff44 	bl	800cb58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcd0:	bf00      	nop
 800dcd2:	3720      	adds	r7, #32
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd08:	bf00      	nop
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d101      	bne.n	800dd2a <HAL_UARTEx_DisableFifoMode+0x16>
 800dd26:	2302      	movs	r3, #2
 800dd28:	e027      	b.n	800dd7a <HAL_UARTEx_DisableFifoMode+0x66>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2224      	movs	r2, #36	; 0x24
 800dd36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f022 0201 	bic.w	r2, r2, #1
 800dd50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dd58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2220      	movs	r2, #32
 800dd6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr

0800dd86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b084      	sub	sp, #16
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d101      	bne.n	800dd9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	e02d      	b.n	800ddfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2201      	movs	r2, #1
 800dda2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2224      	movs	r2, #36	; 0x24
 800ddaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f022 0201 	bic.w	r2, r2, #1
 800ddc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	430a      	orrs	r2, r1
 800ddd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f850 	bl	800de80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2220      	movs	r2, #32
 800ddec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de12:	2b01      	cmp	r3, #1
 800de14:	d101      	bne.n	800de1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de16:	2302      	movs	r3, #2
 800de18:	e02d      	b.n	800de76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2224      	movs	r2, #36	; 0x24
 800de26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f022 0201 	bic.w	r2, r2, #1
 800de40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	430a      	orrs	r2, r1
 800de54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 f812 	bl	800de80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2220      	movs	r2, #32
 800de68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
	...

0800de80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d108      	bne.n	800dea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dea0:	e031      	b.n	800df06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dea2:	2310      	movs	r3, #16
 800dea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dea6:	2310      	movs	r3, #16
 800dea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	0e5b      	lsrs	r3, r3, #25
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	f003 0307 	and.w	r3, r3, #7
 800deb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	0f5b      	lsrs	r3, r3, #29
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	f003 0307 	and.w	r3, r3, #7
 800dec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	7b3a      	ldrb	r2, [r7, #12]
 800dece:	4911      	ldr	r1, [pc, #68]	; (800df14 <UARTEx_SetNbDataToProcess+0x94>)
 800ded0:	5c8a      	ldrb	r2, [r1, r2]
 800ded2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ded6:	7b3a      	ldrb	r2, [r7, #12]
 800ded8:	490f      	ldr	r1, [pc, #60]	; (800df18 <UARTEx_SetNbDataToProcess+0x98>)
 800deda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dedc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dee8:	7bfb      	ldrb	r3, [r7, #15]
 800deea:	7b7a      	ldrb	r2, [r7, #13]
 800deec:	4909      	ldr	r1, [pc, #36]	; (800df14 <UARTEx_SetNbDataToProcess+0x94>)
 800deee:	5c8a      	ldrb	r2, [r1, r2]
 800def0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800def4:	7b7a      	ldrb	r2, [r7, #13]
 800def6:	4908      	ldr	r1, [pc, #32]	; (800df18 <UARTEx_SetNbDataToProcess+0x98>)
 800def8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800defa:	fb93 f3f2 	sdiv	r3, r3, r2
 800defe:	b29a      	uxth	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	080245a4 	.word	0x080245a4
 800df18:	080245ac 	.word	0x080245ac

0800df1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800df1c:	b084      	sub	sp, #16
 800df1e:	b580      	push	{r7, lr}
 800df20:	b084      	sub	sp, #16
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	f107 001c 	add.w	r0, r7, #28
 800df2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df30:	2b01      	cmp	r3, #1
 800df32:	d120      	bne.n	800df76 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	68da      	ldr	r2, [r3, #12]
 800df44:	4b2a      	ldr	r3, [pc, #168]	; (800dff0 <USB_CoreInit+0xd4>)
 800df46:	4013      	ands	r3, r2
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800df58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d105      	bne.n	800df6a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 faa8 	bl	800e4c0 <USB_CoreReset>
 800df70:	4603      	mov	r3, r0
 800df72:	73fb      	strb	r3, [r7, #15]
 800df74:	e01a      	b.n	800dfac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fa9c 	bl	800e4c0 <USB_CoreReset>
 800df88:	4603      	mov	r3, r0
 800df8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800df8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d106      	bne.n	800dfa0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	639a      	str	r2, [r3, #56]	; 0x38
 800df9e:	e005      	b.n	800dfac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d116      	bne.n	800dfe0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dfc0:	4b0c      	ldr	r3, [pc, #48]	; (800dff4 <USB_CoreInit+0xd8>)
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	f043 0206 	orr.w	r2, r3, #6
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	f043 0220 	orr.w	r2, r3, #32
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dfec:	b004      	add	sp, #16
 800dfee:	4770      	bx	lr
 800dff0:	ffbdffbf 	.word	0xffbdffbf
 800dff4:	03ee0000 	.word	0x03ee0000

0800dff8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	f023 0201 	bic.w	r2, r3, #1
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	460b      	mov	r3, r1
 800e024:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e026:	2300      	movs	r3, #0
 800e028:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e036:	78fb      	ldrb	r3, [r7, #3]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d115      	bne.n	800e068 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e048:	2001      	movs	r0, #1
 800e04a:	f7f5 f9b1 	bl	80033b0 <HAL_Delay>
      ms++;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	3301      	adds	r3, #1
 800e052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 fa25 	bl	800e4a4 <USB_GetMode>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d01e      	beq.n	800e09e <USB_SetCurrentMode+0x84>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b31      	cmp	r3, #49	; 0x31
 800e064:	d9f0      	bls.n	800e048 <USB_SetCurrentMode+0x2e>
 800e066:	e01a      	b.n	800e09e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d115      	bne.n	800e09a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e07a:	2001      	movs	r0, #1
 800e07c:	f7f5 f998 	bl	80033b0 <HAL_Delay>
      ms++;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	3301      	adds	r3, #1
 800e084:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fa0c 	bl	800e4a4 <USB_GetMode>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d005      	beq.n	800e09e <USB_SetCurrentMode+0x84>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2b31      	cmp	r3, #49	; 0x31
 800e096:	d9f0      	bls.n	800e07a <USB_SetCurrentMode+0x60>
 800e098:	e001      	b.n	800e09e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	e005      	b.n	800e0aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2b32      	cmp	r3, #50	; 0x32
 800e0a2:	d101      	bne.n	800e0a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e000      	b.n	800e0aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
	...

0800e0b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0b4:	b084      	sub	sp, #16
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b086      	sub	sp, #24
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e0c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	613b      	str	r3, [r7, #16]
 800e0d2:	e009      	b.n	800e0e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	3340      	adds	r3, #64	; 0x40
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	2200      	movs	r2, #0
 800e0e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	613b      	str	r3, [r7, #16]
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	2b0e      	cmp	r3, #14
 800e0ec:	d9f2      	bls.n	800e0d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e0ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d11c      	bne.n	800e12e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e102:	f043 0302 	orr.w	r3, r3, #2
 800e106:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	e005      	b.n	800e13a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e132:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e140:	461a      	mov	r2, r3
 800e142:	2300      	movs	r3, #0
 800e144:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e14c:	4619      	mov	r1, r3
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e154:	461a      	mov	r2, r3
 800e156:	680b      	ldr	r3, [r1, #0]
 800e158:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d10c      	bne.n	800e17a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	2b00      	cmp	r3, #0
 800e164:	d104      	bne.n	800e170 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e166:	2100      	movs	r1, #0
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 f961 	bl	800e430 <USB_SetDevSpeed>
 800e16e:	e008      	b.n	800e182 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e170:	2101      	movs	r1, #1
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 f95c 	bl	800e430 <USB_SetDevSpeed>
 800e178:	e003      	b.n	800e182 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e17a:	2103      	movs	r1, #3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 f957 	bl	800e430 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e182:	2110      	movs	r1, #16
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f8f3 	bl	800e370 <USB_FlushTxFifo>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f91d 	bl	800e3d4 <USB_FlushRxFifo>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	e043      	b.n	800e256 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	015a      	lsls	r2, r3, #5
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e1e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1e4:	d118      	bne.n	800e218 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10a      	bne.n	800e202 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	015a      	lsls	r2, r3, #5
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e1fe:	6013      	str	r3, [r2, #0]
 800e200:	e013      	b.n	800e22a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	015a      	lsls	r2, r3, #5
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	4413      	add	r3, r2
 800e20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e20e:	461a      	mov	r2, r3
 800e210:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	e008      	b.n	800e22a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	015a      	lsls	r2, r3, #5
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	4413      	add	r3, r2
 800e220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e224:	461a      	mov	r2, r3
 800e226:	2300      	movs	r3, #0
 800e228:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	015a      	lsls	r2, r3, #5
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	4413      	add	r3, r2
 800e232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e236:	461a      	mov	r2, r3
 800e238:	2300      	movs	r3, #0
 800e23a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	015a      	lsls	r2, r3, #5
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	4413      	add	r3, r2
 800e244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e248:	461a      	mov	r2, r3
 800e24a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e24e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	3301      	adds	r3, #1
 800e254:	613b      	str	r3, [r7, #16]
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	693a      	ldr	r2, [r7, #16]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d3b7      	bcc.n	800e1ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e25e:	2300      	movs	r3, #0
 800e260:	613b      	str	r3, [r7, #16]
 800e262:	e043      	b.n	800e2ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	015a      	lsls	r2, r3, #5
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	4413      	add	r3, r2
 800e26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e27a:	d118      	bne.n	800e2ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10a      	bne.n	800e298 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	015a      	lsls	r2, r3, #5
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	4413      	add	r3, r2
 800e28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e28e:	461a      	mov	r2, r3
 800e290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e294:	6013      	str	r3, [r2, #0]
 800e296:	e013      	b.n	800e2c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	015a      	lsls	r2, r3, #5
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	4413      	add	r3, r2
 800e2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e2aa:	6013      	str	r3, [r2, #0]
 800e2ac:	e008      	b.n	800e2c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	015a      	lsls	r2, r3, #5
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	2300      	movs	r3, #0
 800e2be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	015a      	lsls	r2, r3, #5
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	015a      	lsls	r2, r3, #5
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	4413      	add	r3, r2
 800e2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2de:	461a      	mov	r2, r3
 800e2e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e2e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	613b      	str	r3, [r7, #16]
 800e2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ee:	693a      	ldr	r2, [r7, #16]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d3b7      	bcc.n	800e264 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2fa:	691b      	ldr	r3, [r3, #16]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e306:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e314:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d105      	bne.n	800e328 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	699b      	ldr	r3, [r3, #24]
 800e320:	f043 0210 	orr.w	r2, r3, #16
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	699a      	ldr	r2, [r3, #24]
 800e32c:	4b0e      	ldr	r3, [pc, #56]	; (800e368 <USB_DevInit+0x2b4>)
 800e32e:	4313      	orrs	r3, r2
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e336:	2b00      	cmp	r3, #0
 800e338:	d005      	beq.n	800e346 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	699b      	ldr	r3, [r3, #24]
 800e33e:	f043 0208 	orr.w	r2, r3, #8
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d105      	bne.n	800e358 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	699a      	ldr	r2, [r3, #24]
 800e350:	4b06      	ldr	r3, [pc, #24]	; (800e36c <USB_DevInit+0x2b8>)
 800e352:	4313      	orrs	r3, r2
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e358:	7dfb      	ldrb	r3, [r7, #23]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3718      	adds	r7, #24
 800e35e:	46bd      	mov	sp, r7
 800e360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e364:	b004      	add	sp, #16
 800e366:	4770      	bx	lr
 800e368:	803c3800 	.word	0x803c3800
 800e36c:	40000004 	.word	0x40000004

0800e370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e37a:	2300      	movs	r3, #0
 800e37c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3301      	adds	r3, #1
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	4a12      	ldr	r2, [pc, #72]	; (800e3d0 <USB_FlushTxFifo+0x60>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d901      	bls.n	800e38e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e38a:	2303      	movs	r3, #3
 800e38c:	e01a      	b.n	800e3c4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	2b00      	cmp	r3, #0
 800e394:	daf3      	bge.n	800e37e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e396:	2300      	movs	r3, #0
 800e398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	019b      	lsls	r3, r3, #6
 800e39e:	f043 0220 	orr.w	r2, r3, #32
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	60fb      	str	r3, [r7, #12]
 800e3ac:	4a08      	ldr	r2, [pc, #32]	; (800e3d0 <USB_FlushTxFifo+0x60>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d901      	bls.n	800e3b6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	e006      	b.n	800e3c4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	691b      	ldr	r3, [r3, #16]
 800e3ba:	f003 0320 	and.w	r3, r3, #32
 800e3be:	2b20      	cmp	r3, #32
 800e3c0:	d0f1      	beq.n	800e3a6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800e3c2:	2300      	movs	r3, #0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3714      	adds	r7, #20
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	00030d40 	.word	0x00030d40

0800e3d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	60fb      	str	r3, [r7, #12]
 800e3e6:	4a11      	ldr	r2, [pc, #68]	; (800e42c <USB_FlushRxFifo+0x58>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d901      	bls.n	800e3f0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	e017      	b.n	800e420 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	daf3      	bge.n	800e3e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2210      	movs	r2, #16
 800e400:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	3301      	adds	r3, #1
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	4a08      	ldr	r2, [pc, #32]	; (800e42c <USB_FlushRxFifo+0x58>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d901      	bls.n	800e412 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800e40e:	2303      	movs	r3, #3
 800e410:	e006      	b.n	800e420 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	f003 0310 	and.w	r3, r3, #16
 800e41a:	2b10      	cmp	r3, #16
 800e41c:	d0f1      	beq.n	800e402 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800e41e:	2300      	movs	r3, #0
}
 800e420:	4618      	mov	r0, r3
 800e422:	3714      	adds	r7, #20
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	00030d40 	.word	0x00030d40

0800e430 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	78fb      	ldrb	r3, [r7, #3]
 800e44a:	68f9      	ldr	r1, [r7, #12]
 800e44c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e450:	4313      	orrs	r3, r2
 800e452:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e462:	b480      	push	{r7}
 800e464:	b085      	sub	sp, #20
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e47c:	f023 0303 	bic.w	r3, r3, #3
 800e480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e490:	f043 0302 	orr.w	r3, r3, #2
 800e494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3714      	adds	r7, #20
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	695b      	ldr	r3, [r3, #20]
 800e4b0:	f003 0301 	and.w	r3, r3, #1
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	4a13      	ldr	r2, [pc, #76]	; (800e520 <USB_CoreReset+0x60>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d901      	bls.n	800e4dc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800e4d8:	2303      	movs	r3, #3
 800e4da:	e01a      	b.n	800e512 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	691b      	ldr	r3, [r3, #16]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	daf3      	bge.n	800e4cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	691b      	ldr	r3, [r3, #16]
 800e4ec:	f043 0201 	orr.w	r2, r3, #1
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	60fb      	str	r3, [r7, #12]
 800e4fa:	4a09      	ldr	r2, [pc, #36]	; (800e520 <USB_CoreReset+0x60>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d901      	bls.n	800e504 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800e500:	2303      	movs	r3, #3
 800e502:	e006      	b.n	800e512 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	f003 0301 	and.w	r3, r3, #1
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d0f1      	beq.n	800e4f4 <USB_CoreReset+0x34>

  return HAL_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3714      	adds	r7, #20
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	00030d40 	.word	0x00030d40

0800e524 <__errno>:
 800e524:	4b01      	ldr	r3, [pc, #4]	; (800e52c <__errno+0x8>)
 800e526:	6818      	ldr	r0, [r3, #0]
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	24000010 	.word	0x24000010

0800e530 <__libc_init_array>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	4d0d      	ldr	r5, [pc, #52]	; (800e568 <__libc_init_array+0x38>)
 800e534:	4c0d      	ldr	r4, [pc, #52]	; (800e56c <__libc_init_array+0x3c>)
 800e536:	1b64      	subs	r4, r4, r5
 800e538:	10a4      	asrs	r4, r4, #2
 800e53a:	2600      	movs	r6, #0
 800e53c:	42a6      	cmp	r6, r4
 800e53e:	d109      	bne.n	800e554 <__libc_init_array+0x24>
 800e540:	4d0b      	ldr	r5, [pc, #44]	; (800e570 <__libc_init_array+0x40>)
 800e542:	4c0c      	ldr	r4, [pc, #48]	; (800e574 <__libc_init_array+0x44>)
 800e544:	f000 fc4e 	bl	800ede4 <_init>
 800e548:	1b64      	subs	r4, r4, r5
 800e54a:	10a4      	asrs	r4, r4, #2
 800e54c:	2600      	movs	r6, #0
 800e54e:	42a6      	cmp	r6, r4
 800e550:	d105      	bne.n	800e55e <__libc_init_array+0x2e>
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	f855 3b04 	ldr.w	r3, [r5], #4
 800e558:	4798      	blx	r3
 800e55a:	3601      	adds	r6, #1
 800e55c:	e7ee      	b.n	800e53c <__libc_init_array+0xc>
 800e55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e562:	4798      	blx	r3
 800e564:	3601      	adds	r6, #1
 800e566:	e7f2      	b.n	800e54e <__libc_init_array+0x1e>
 800e568:	080245f0 	.word	0x080245f0
 800e56c:	080245f0 	.word	0x080245f0
 800e570:	080245f0 	.word	0x080245f0
 800e574:	080245f4 	.word	0x080245f4

0800e578 <memcpy>:
 800e578:	440a      	add	r2, r1
 800e57a:	4291      	cmp	r1, r2
 800e57c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e580:	d100      	bne.n	800e584 <memcpy+0xc>
 800e582:	4770      	bx	lr
 800e584:	b510      	push	{r4, lr}
 800e586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e58a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e58e:	4291      	cmp	r1, r2
 800e590:	d1f9      	bne.n	800e586 <memcpy+0xe>
 800e592:	bd10      	pop	{r4, pc}

0800e594 <memset>:
 800e594:	4402      	add	r2, r0
 800e596:	4603      	mov	r3, r0
 800e598:	4293      	cmp	r3, r2
 800e59a:	d100      	bne.n	800e59e <memset+0xa>
 800e59c:	4770      	bx	lr
 800e59e:	f803 1b01 	strb.w	r1, [r3], #1
 800e5a2:	e7f9      	b.n	800e598 <memset+0x4>

0800e5a4 <siprintf>:
 800e5a4:	b40e      	push	{r1, r2, r3}
 800e5a6:	b500      	push	{lr}
 800e5a8:	b09c      	sub	sp, #112	; 0x70
 800e5aa:	ab1d      	add	r3, sp, #116	; 0x74
 800e5ac:	9002      	str	r0, [sp, #8]
 800e5ae:	9006      	str	r0, [sp, #24]
 800e5b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5b4:	4809      	ldr	r0, [pc, #36]	; (800e5dc <siprintf+0x38>)
 800e5b6:	9107      	str	r1, [sp, #28]
 800e5b8:	9104      	str	r1, [sp, #16]
 800e5ba:	4909      	ldr	r1, [pc, #36]	; (800e5e0 <siprintf+0x3c>)
 800e5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5c0:	9105      	str	r1, [sp, #20]
 800e5c2:	6800      	ldr	r0, [r0, #0]
 800e5c4:	9301      	str	r3, [sp, #4]
 800e5c6:	a902      	add	r1, sp, #8
 800e5c8:	f000 f868 	bl	800e69c <_svfiprintf_r>
 800e5cc:	9b02      	ldr	r3, [sp, #8]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	701a      	strb	r2, [r3, #0]
 800e5d2:	b01c      	add	sp, #112	; 0x70
 800e5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5d8:	b003      	add	sp, #12
 800e5da:	4770      	bx	lr
 800e5dc:	24000010 	.word	0x24000010
 800e5e0:	ffff0208 	.word	0xffff0208

0800e5e4 <__ssputs_r>:
 800e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e8:	688e      	ldr	r6, [r1, #8]
 800e5ea:	429e      	cmp	r6, r3
 800e5ec:	4682      	mov	sl, r0
 800e5ee:	460c      	mov	r4, r1
 800e5f0:	4690      	mov	r8, r2
 800e5f2:	461f      	mov	r7, r3
 800e5f4:	d838      	bhi.n	800e668 <__ssputs_r+0x84>
 800e5f6:	898a      	ldrh	r2, [r1, #12]
 800e5f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e5fc:	d032      	beq.n	800e664 <__ssputs_r+0x80>
 800e5fe:	6825      	ldr	r5, [r4, #0]
 800e600:	6909      	ldr	r1, [r1, #16]
 800e602:	eba5 0901 	sub.w	r9, r5, r1
 800e606:	6965      	ldr	r5, [r4, #20]
 800e608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e60c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e610:	3301      	adds	r3, #1
 800e612:	444b      	add	r3, r9
 800e614:	106d      	asrs	r5, r5, #1
 800e616:	429d      	cmp	r5, r3
 800e618:	bf38      	it	cc
 800e61a:	461d      	movcc	r5, r3
 800e61c:	0553      	lsls	r3, r2, #21
 800e61e:	d531      	bpl.n	800e684 <__ssputs_r+0xa0>
 800e620:	4629      	mov	r1, r5
 800e622:	f000 fb39 	bl	800ec98 <_malloc_r>
 800e626:	4606      	mov	r6, r0
 800e628:	b950      	cbnz	r0, 800e640 <__ssputs_r+0x5c>
 800e62a:	230c      	movs	r3, #12
 800e62c:	f8ca 3000 	str.w	r3, [sl]
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e636:	81a3      	strh	r3, [r4, #12]
 800e638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e640:	6921      	ldr	r1, [r4, #16]
 800e642:	464a      	mov	r2, r9
 800e644:	f7ff ff98 	bl	800e578 <memcpy>
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e64e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e652:	81a3      	strh	r3, [r4, #12]
 800e654:	6126      	str	r6, [r4, #16]
 800e656:	6165      	str	r5, [r4, #20]
 800e658:	444e      	add	r6, r9
 800e65a:	eba5 0509 	sub.w	r5, r5, r9
 800e65e:	6026      	str	r6, [r4, #0]
 800e660:	60a5      	str	r5, [r4, #8]
 800e662:	463e      	mov	r6, r7
 800e664:	42be      	cmp	r6, r7
 800e666:	d900      	bls.n	800e66a <__ssputs_r+0x86>
 800e668:	463e      	mov	r6, r7
 800e66a:	4632      	mov	r2, r6
 800e66c:	6820      	ldr	r0, [r4, #0]
 800e66e:	4641      	mov	r1, r8
 800e670:	f000 faa8 	bl	800ebc4 <memmove>
 800e674:	68a3      	ldr	r3, [r4, #8]
 800e676:	6822      	ldr	r2, [r4, #0]
 800e678:	1b9b      	subs	r3, r3, r6
 800e67a:	4432      	add	r2, r6
 800e67c:	60a3      	str	r3, [r4, #8]
 800e67e:	6022      	str	r2, [r4, #0]
 800e680:	2000      	movs	r0, #0
 800e682:	e7db      	b.n	800e63c <__ssputs_r+0x58>
 800e684:	462a      	mov	r2, r5
 800e686:	f000 fb61 	bl	800ed4c <_realloc_r>
 800e68a:	4606      	mov	r6, r0
 800e68c:	2800      	cmp	r0, #0
 800e68e:	d1e1      	bne.n	800e654 <__ssputs_r+0x70>
 800e690:	6921      	ldr	r1, [r4, #16]
 800e692:	4650      	mov	r0, sl
 800e694:	f000 fab0 	bl	800ebf8 <_free_r>
 800e698:	e7c7      	b.n	800e62a <__ssputs_r+0x46>
	...

0800e69c <_svfiprintf_r>:
 800e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a0:	4698      	mov	r8, r3
 800e6a2:	898b      	ldrh	r3, [r1, #12]
 800e6a4:	061b      	lsls	r3, r3, #24
 800e6a6:	b09d      	sub	sp, #116	; 0x74
 800e6a8:	4607      	mov	r7, r0
 800e6aa:	460d      	mov	r5, r1
 800e6ac:	4614      	mov	r4, r2
 800e6ae:	d50e      	bpl.n	800e6ce <_svfiprintf_r+0x32>
 800e6b0:	690b      	ldr	r3, [r1, #16]
 800e6b2:	b963      	cbnz	r3, 800e6ce <_svfiprintf_r+0x32>
 800e6b4:	2140      	movs	r1, #64	; 0x40
 800e6b6:	f000 faef 	bl	800ec98 <_malloc_r>
 800e6ba:	6028      	str	r0, [r5, #0]
 800e6bc:	6128      	str	r0, [r5, #16]
 800e6be:	b920      	cbnz	r0, 800e6ca <_svfiprintf_r+0x2e>
 800e6c0:	230c      	movs	r3, #12
 800e6c2:	603b      	str	r3, [r7, #0]
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6c8:	e0d1      	b.n	800e86e <_svfiprintf_r+0x1d2>
 800e6ca:	2340      	movs	r3, #64	; 0x40
 800e6cc:	616b      	str	r3, [r5, #20]
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e6d2:	2320      	movs	r3, #32
 800e6d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6dc:	2330      	movs	r3, #48	; 0x30
 800e6de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e888 <_svfiprintf_r+0x1ec>
 800e6e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6e6:	f04f 0901 	mov.w	r9, #1
 800e6ea:	4623      	mov	r3, r4
 800e6ec:	469a      	mov	sl, r3
 800e6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6f2:	b10a      	cbz	r2, 800e6f8 <_svfiprintf_r+0x5c>
 800e6f4:	2a25      	cmp	r2, #37	; 0x25
 800e6f6:	d1f9      	bne.n	800e6ec <_svfiprintf_r+0x50>
 800e6f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e6fc:	d00b      	beq.n	800e716 <_svfiprintf_r+0x7a>
 800e6fe:	465b      	mov	r3, fp
 800e700:	4622      	mov	r2, r4
 800e702:	4629      	mov	r1, r5
 800e704:	4638      	mov	r0, r7
 800e706:	f7ff ff6d 	bl	800e5e4 <__ssputs_r>
 800e70a:	3001      	adds	r0, #1
 800e70c:	f000 80aa 	beq.w	800e864 <_svfiprintf_r+0x1c8>
 800e710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e712:	445a      	add	r2, fp
 800e714:	9209      	str	r2, [sp, #36]	; 0x24
 800e716:	f89a 3000 	ldrb.w	r3, [sl]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 80a2 	beq.w	800e864 <_svfiprintf_r+0x1c8>
 800e720:	2300      	movs	r3, #0
 800e722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e72a:	f10a 0a01 	add.w	sl, sl, #1
 800e72e:	9304      	str	r3, [sp, #16]
 800e730:	9307      	str	r3, [sp, #28]
 800e732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e736:	931a      	str	r3, [sp, #104]	; 0x68
 800e738:	4654      	mov	r4, sl
 800e73a:	2205      	movs	r2, #5
 800e73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e740:	4851      	ldr	r0, [pc, #324]	; (800e888 <_svfiprintf_r+0x1ec>)
 800e742:	f7f1 fdd5 	bl	80002f0 <memchr>
 800e746:	9a04      	ldr	r2, [sp, #16]
 800e748:	b9d8      	cbnz	r0, 800e782 <_svfiprintf_r+0xe6>
 800e74a:	06d0      	lsls	r0, r2, #27
 800e74c:	bf44      	itt	mi
 800e74e:	2320      	movmi	r3, #32
 800e750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e754:	0711      	lsls	r1, r2, #28
 800e756:	bf44      	itt	mi
 800e758:	232b      	movmi	r3, #43	; 0x2b
 800e75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e75e:	f89a 3000 	ldrb.w	r3, [sl]
 800e762:	2b2a      	cmp	r3, #42	; 0x2a
 800e764:	d015      	beq.n	800e792 <_svfiprintf_r+0xf6>
 800e766:	9a07      	ldr	r2, [sp, #28]
 800e768:	4654      	mov	r4, sl
 800e76a:	2000      	movs	r0, #0
 800e76c:	f04f 0c0a 	mov.w	ip, #10
 800e770:	4621      	mov	r1, r4
 800e772:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e776:	3b30      	subs	r3, #48	; 0x30
 800e778:	2b09      	cmp	r3, #9
 800e77a:	d94e      	bls.n	800e81a <_svfiprintf_r+0x17e>
 800e77c:	b1b0      	cbz	r0, 800e7ac <_svfiprintf_r+0x110>
 800e77e:	9207      	str	r2, [sp, #28]
 800e780:	e014      	b.n	800e7ac <_svfiprintf_r+0x110>
 800e782:	eba0 0308 	sub.w	r3, r0, r8
 800e786:	fa09 f303 	lsl.w	r3, r9, r3
 800e78a:	4313      	orrs	r3, r2
 800e78c:	9304      	str	r3, [sp, #16]
 800e78e:	46a2      	mov	sl, r4
 800e790:	e7d2      	b.n	800e738 <_svfiprintf_r+0x9c>
 800e792:	9b03      	ldr	r3, [sp, #12]
 800e794:	1d19      	adds	r1, r3, #4
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	9103      	str	r1, [sp, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	bfbb      	ittet	lt
 800e79e:	425b      	neglt	r3, r3
 800e7a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e7a4:	9307      	strge	r3, [sp, #28]
 800e7a6:	9307      	strlt	r3, [sp, #28]
 800e7a8:	bfb8      	it	lt
 800e7aa:	9204      	strlt	r2, [sp, #16]
 800e7ac:	7823      	ldrb	r3, [r4, #0]
 800e7ae:	2b2e      	cmp	r3, #46	; 0x2e
 800e7b0:	d10c      	bne.n	800e7cc <_svfiprintf_r+0x130>
 800e7b2:	7863      	ldrb	r3, [r4, #1]
 800e7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e7b6:	d135      	bne.n	800e824 <_svfiprintf_r+0x188>
 800e7b8:	9b03      	ldr	r3, [sp, #12]
 800e7ba:	1d1a      	adds	r2, r3, #4
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	9203      	str	r2, [sp, #12]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	bfb8      	it	lt
 800e7c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e7c8:	3402      	adds	r4, #2
 800e7ca:	9305      	str	r3, [sp, #20]
 800e7cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e898 <_svfiprintf_r+0x1fc>
 800e7d0:	7821      	ldrb	r1, [r4, #0]
 800e7d2:	2203      	movs	r2, #3
 800e7d4:	4650      	mov	r0, sl
 800e7d6:	f7f1 fd8b 	bl	80002f0 <memchr>
 800e7da:	b140      	cbz	r0, 800e7ee <_svfiprintf_r+0x152>
 800e7dc:	2340      	movs	r3, #64	; 0x40
 800e7de:	eba0 000a 	sub.w	r0, r0, sl
 800e7e2:	fa03 f000 	lsl.w	r0, r3, r0
 800e7e6:	9b04      	ldr	r3, [sp, #16]
 800e7e8:	4303      	orrs	r3, r0
 800e7ea:	3401      	adds	r4, #1
 800e7ec:	9304      	str	r3, [sp, #16]
 800e7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f2:	4826      	ldr	r0, [pc, #152]	; (800e88c <_svfiprintf_r+0x1f0>)
 800e7f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7f8:	2206      	movs	r2, #6
 800e7fa:	f7f1 fd79 	bl	80002f0 <memchr>
 800e7fe:	2800      	cmp	r0, #0
 800e800:	d038      	beq.n	800e874 <_svfiprintf_r+0x1d8>
 800e802:	4b23      	ldr	r3, [pc, #140]	; (800e890 <_svfiprintf_r+0x1f4>)
 800e804:	bb1b      	cbnz	r3, 800e84e <_svfiprintf_r+0x1b2>
 800e806:	9b03      	ldr	r3, [sp, #12]
 800e808:	3307      	adds	r3, #7
 800e80a:	f023 0307 	bic.w	r3, r3, #7
 800e80e:	3308      	adds	r3, #8
 800e810:	9303      	str	r3, [sp, #12]
 800e812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e814:	4433      	add	r3, r6
 800e816:	9309      	str	r3, [sp, #36]	; 0x24
 800e818:	e767      	b.n	800e6ea <_svfiprintf_r+0x4e>
 800e81a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e81e:	460c      	mov	r4, r1
 800e820:	2001      	movs	r0, #1
 800e822:	e7a5      	b.n	800e770 <_svfiprintf_r+0xd4>
 800e824:	2300      	movs	r3, #0
 800e826:	3401      	adds	r4, #1
 800e828:	9305      	str	r3, [sp, #20]
 800e82a:	4619      	mov	r1, r3
 800e82c:	f04f 0c0a 	mov.w	ip, #10
 800e830:	4620      	mov	r0, r4
 800e832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e836:	3a30      	subs	r2, #48	; 0x30
 800e838:	2a09      	cmp	r2, #9
 800e83a:	d903      	bls.n	800e844 <_svfiprintf_r+0x1a8>
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d0c5      	beq.n	800e7cc <_svfiprintf_r+0x130>
 800e840:	9105      	str	r1, [sp, #20]
 800e842:	e7c3      	b.n	800e7cc <_svfiprintf_r+0x130>
 800e844:	fb0c 2101 	mla	r1, ip, r1, r2
 800e848:	4604      	mov	r4, r0
 800e84a:	2301      	movs	r3, #1
 800e84c:	e7f0      	b.n	800e830 <_svfiprintf_r+0x194>
 800e84e:	ab03      	add	r3, sp, #12
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	462a      	mov	r2, r5
 800e854:	4b0f      	ldr	r3, [pc, #60]	; (800e894 <_svfiprintf_r+0x1f8>)
 800e856:	a904      	add	r1, sp, #16
 800e858:	4638      	mov	r0, r7
 800e85a:	f3af 8000 	nop.w
 800e85e:	1c42      	adds	r2, r0, #1
 800e860:	4606      	mov	r6, r0
 800e862:	d1d6      	bne.n	800e812 <_svfiprintf_r+0x176>
 800e864:	89ab      	ldrh	r3, [r5, #12]
 800e866:	065b      	lsls	r3, r3, #25
 800e868:	f53f af2c 	bmi.w	800e6c4 <_svfiprintf_r+0x28>
 800e86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e86e:	b01d      	add	sp, #116	; 0x74
 800e870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e874:	ab03      	add	r3, sp, #12
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	462a      	mov	r2, r5
 800e87a:	4b06      	ldr	r3, [pc, #24]	; (800e894 <_svfiprintf_r+0x1f8>)
 800e87c:	a904      	add	r1, sp, #16
 800e87e:	4638      	mov	r0, r7
 800e880:	f000 f87a 	bl	800e978 <_printf_i>
 800e884:	e7eb      	b.n	800e85e <_svfiprintf_r+0x1c2>
 800e886:	bf00      	nop
 800e888:	080245b4 	.word	0x080245b4
 800e88c:	080245be 	.word	0x080245be
 800e890:	00000000 	.word	0x00000000
 800e894:	0800e5e5 	.word	0x0800e5e5
 800e898:	080245ba 	.word	0x080245ba

0800e89c <_printf_common>:
 800e89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a0:	4616      	mov	r6, r2
 800e8a2:	4699      	mov	r9, r3
 800e8a4:	688a      	ldr	r2, [r1, #8]
 800e8a6:	690b      	ldr	r3, [r1, #16]
 800e8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	bfb8      	it	lt
 800e8b0:	4613      	movlt	r3, r2
 800e8b2:	6033      	str	r3, [r6, #0]
 800e8b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8b8:	4607      	mov	r7, r0
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	b10a      	cbz	r2, 800e8c2 <_printf_common+0x26>
 800e8be:	3301      	adds	r3, #1
 800e8c0:	6033      	str	r3, [r6, #0]
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	0699      	lsls	r1, r3, #26
 800e8c6:	bf42      	ittt	mi
 800e8c8:	6833      	ldrmi	r3, [r6, #0]
 800e8ca:	3302      	addmi	r3, #2
 800e8cc:	6033      	strmi	r3, [r6, #0]
 800e8ce:	6825      	ldr	r5, [r4, #0]
 800e8d0:	f015 0506 	ands.w	r5, r5, #6
 800e8d4:	d106      	bne.n	800e8e4 <_printf_common+0x48>
 800e8d6:	f104 0a19 	add.w	sl, r4, #25
 800e8da:	68e3      	ldr	r3, [r4, #12]
 800e8dc:	6832      	ldr	r2, [r6, #0]
 800e8de:	1a9b      	subs	r3, r3, r2
 800e8e0:	42ab      	cmp	r3, r5
 800e8e2:	dc26      	bgt.n	800e932 <_printf_common+0x96>
 800e8e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8e8:	1e13      	subs	r3, r2, #0
 800e8ea:	6822      	ldr	r2, [r4, #0]
 800e8ec:	bf18      	it	ne
 800e8ee:	2301      	movne	r3, #1
 800e8f0:	0692      	lsls	r2, r2, #26
 800e8f2:	d42b      	bmi.n	800e94c <_printf_common+0xb0>
 800e8f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8f8:	4649      	mov	r1, r9
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	47c0      	blx	r8
 800e8fe:	3001      	adds	r0, #1
 800e900:	d01e      	beq.n	800e940 <_printf_common+0xa4>
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	68e5      	ldr	r5, [r4, #12]
 800e906:	6832      	ldr	r2, [r6, #0]
 800e908:	f003 0306 	and.w	r3, r3, #6
 800e90c:	2b04      	cmp	r3, #4
 800e90e:	bf08      	it	eq
 800e910:	1aad      	subeq	r5, r5, r2
 800e912:	68a3      	ldr	r3, [r4, #8]
 800e914:	6922      	ldr	r2, [r4, #16]
 800e916:	bf0c      	ite	eq
 800e918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e91c:	2500      	movne	r5, #0
 800e91e:	4293      	cmp	r3, r2
 800e920:	bfc4      	itt	gt
 800e922:	1a9b      	subgt	r3, r3, r2
 800e924:	18ed      	addgt	r5, r5, r3
 800e926:	2600      	movs	r6, #0
 800e928:	341a      	adds	r4, #26
 800e92a:	42b5      	cmp	r5, r6
 800e92c:	d11a      	bne.n	800e964 <_printf_common+0xc8>
 800e92e:	2000      	movs	r0, #0
 800e930:	e008      	b.n	800e944 <_printf_common+0xa8>
 800e932:	2301      	movs	r3, #1
 800e934:	4652      	mov	r2, sl
 800e936:	4649      	mov	r1, r9
 800e938:	4638      	mov	r0, r7
 800e93a:	47c0      	blx	r8
 800e93c:	3001      	adds	r0, #1
 800e93e:	d103      	bne.n	800e948 <_printf_common+0xac>
 800e940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e948:	3501      	adds	r5, #1
 800e94a:	e7c6      	b.n	800e8da <_printf_common+0x3e>
 800e94c:	18e1      	adds	r1, r4, r3
 800e94e:	1c5a      	adds	r2, r3, #1
 800e950:	2030      	movs	r0, #48	; 0x30
 800e952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e956:	4422      	add	r2, r4
 800e958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e95c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e960:	3302      	adds	r3, #2
 800e962:	e7c7      	b.n	800e8f4 <_printf_common+0x58>
 800e964:	2301      	movs	r3, #1
 800e966:	4622      	mov	r2, r4
 800e968:	4649      	mov	r1, r9
 800e96a:	4638      	mov	r0, r7
 800e96c:	47c0      	blx	r8
 800e96e:	3001      	adds	r0, #1
 800e970:	d0e6      	beq.n	800e940 <_printf_common+0xa4>
 800e972:	3601      	adds	r6, #1
 800e974:	e7d9      	b.n	800e92a <_printf_common+0x8e>
	...

0800e978 <_printf_i>:
 800e978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e97c:	460c      	mov	r4, r1
 800e97e:	4691      	mov	r9, r2
 800e980:	7e27      	ldrb	r7, [r4, #24]
 800e982:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e984:	2f78      	cmp	r7, #120	; 0x78
 800e986:	4680      	mov	r8, r0
 800e988:	469a      	mov	sl, r3
 800e98a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e98e:	d807      	bhi.n	800e9a0 <_printf_i+0x28>
 800e990:	2f62      	cmp	r7, #98	; 0x62
 800e992:	d80a      	bhi.n	800e9aa <_printf_i+0x32>
 800e994:	2f00      	cmp	r7, #0
 800e996:	f000 80d8 	beq.w	800eb4a <_printf_i+0x1d2>
 800e99a:	2f58      	cmp	r7, #88	; 0x58
 800e99c:	f000 80a3 	beq.w	800eae6 <_printf_i+0x16e>
 800e9a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e9a8:	e03a      	b.n	800ea20 <_printf_i+0xa8>
 800e9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e9ae:	2b15      	cmp	r3, #21
 800e9b0:	d8f6      	bhi.n	800e9a0 <_printf_i+0x28>
 800e9b2:	a001      	add	r0, pc, #4	; (adr r0, 800e9b8 <_printf_i+0x40>)
 800e9b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e9b8:	0800ea11 	.word	0x0800ea11
 800e9bc:	0800ea25 	.word	0x0800ea25
 800e9c0:	0800e9a1 	.word	0x0800e9a1
 800e9c4:	0800e9a1 	.word	0x0800e9a1
 800e9c8:	0800e9a1 	.word	0x0800e9a1
 800e9cc:	0800e9a1 	.word	0x0800e9a1
 800e9d0:	0800ea25 	.word	0x0800ea25
 800e9d4:	0800e9a1 	.word	0x0800e9a1
 800e9d8:	0800e9a1 	.word	0x0800e9a1
 800e9dc:	0800e9a1 	.word	0x0800e9a1
 800e9e0:	0800e9a1 	.word	0x0800e9a1
 800e9e4:	0800eb31 	.word	0x0800eb31
 800e9e8:	0800ea55 	.word	0x0800ea55
 800e9ec:	0800eb13 	.word	0x0800eb13
 800e9f0:	0800e9a1 	.word	0x0800e9a1
 800e9f4:	0800e9a1 	.word	0x0800e9a1
 800e9f8:	0800eb53 	.word	0x0800eb53
 800e9fc:	0800e9a1 	.word	0x0800e9a1
 800ea00:	0800ea55 	.word	0x0800ea55
 800ea04:	0800e9a1 	.word	0x0800e9a1
 800ea08:	0800e9a1 	.word	0x0800e9a1
 800ea0c:	0800eb1b 	.word	0x0800eb1b
 800ea10:	680b      	ldr	r3, [r1, #0]
 800ea12:	1d1a      	adds	r2, r3, #4
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	600a      	str	r2, [r1, #0]
 800ea18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea20:	2301      	movs	r3, #1
 800ea22:	e0a3      	b.n	800eb6c <_printf_i+0x1f4>
 800ea24:	6825      	ldr	r5, [r4, #0]
 800ea26:	6808      	ldr	r0, [r1, #0]
 800ea28:	062e      	lsls	r6, r5, #24
 800ea2a:	f100 0304 	add.w	r3, r0, #4
 800ea2e:	d50a      	bpl.n	800ea46 <_printf_i+0xce>
 800ea30:	6805      	ldr	r5, [r0, #0]
 800ea32:	600b      	str	r3, [r1, #0]
 800ea34:	2d00      	cmp	r5, #0
 800ea36:	da03      	bge.n	800ea40 <_printf_i+0xc8>
 800ea38:	232d      	movs	r3, #45	; 0x2d
 800ea3a:	426d      	negs	r5, r5
 800ea3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea40:	485e      	ldr	r0, [pc, #376]	; (800ebbc <_printf_i+0x244>)
 800ea42:	230a      	movs	r3, #10
 800ea44:	e019      	b.n	800ea7a <_printf_i+0x102>
 800ea46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ea4a:	6805      	ldr	r5, [r0, #0]
 800ea4c:	600b      	str	r3, [r1, #0]
 800ea4e:	bf18      	it	ne
 800ea50:	b22d      	sxthne	r5, r5
 800ea52:	e7ef      	b.n	800ea34 <_printf_i+0xbc>
 800ea54:	680b      	ldr	r3, [r1, #0]
 800ea56:	6825      	ldr	r5, [r4, #0]
 800ea58:	1d18      	adds	r0, r3, #4
 800ea5a:	6008      	str	r0, [r1, #0]
 800ea5c:	0628      	lsls	r0, r5, #24
 800ea5e:	d501      	bpl.n	800ea64 <_printf_i+0xec>
 800ea60:	681d      	ldr	r5, [r3, #0]
 800ea62:	e002      	b.n	800ea6a <_printf_i+0xf2>
 800ea64:	0669      	lsls	r1, r5, #25
 800ea66:	d5fb      	bpl.n	800ea60 <_printf_i+0xe8>
 800ea68:	881d      	ldrh	r5, [r3, #0]
 800ea6a:	4854      	ldr	r0, [pc, #336]	; (800ebbc <_printf_i+0x244>)
 800ea6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ea6e:	bf0c      	ite	eq
 800ea70:	2308      	moveq	r3, #8
 800ea72:	230a      	movne	r3, #10
 800ea74:	2100      	movs	r1, #0
 800ea76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea7a:	6866      	ldr	r6, [r4, #4]
 800ea7c:	60a6      	str	r6, [r4, #8]
 800ea7e:	2e00      	cmp	r6, #0
 800ea80:	bfa2      	ittt	ge
 800ea82:	6821      	ldrge	r1, [r4, #0]
 800ea84:	f021 0104 	bicge.w	r1, r1, #4
 800ea88:	6021      	strge	r1, [r4, #0]
 800ea8a:	b90d      	cbnz	r5, 800ea90 <_printf_i+0x118>
 800ea8c:	2e00      	cmp	r6, #0
 800ea8e:	d04d      	beq.n	800eb2c <_printf_i+0x1b4>
 800ea90:	4616      	mov	r6, r2
 800ea92:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea96:	fb03 5711 	mls	r7, r3, r1, r5
 800ea9a:	5dc7      	ldrb	r7, [r0, r7]
 800ea9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eaa0:	462f      	mov	r7, r5
 800eaa2:	42bb      	cmp	r3, r7
 800eaa4:	460d      	mov	r5, r1
 800eaa6:	d9f4      	bls.n	800ea92 <_printf_i+0x11a>
 800eaa8:	2b08      	cmp	r3, #8
 800eaaa:	d10b      	bne.n	800eac4 <_printf_i+0x14c>
 800eaac:	6823      	ldr	r3, [r4, #0]
 800eaae:	07df      	lsls	r7, r3, #31
 800eab0:	d508      	bpl.n	800eac4 <_printf_i+0x14c>
 800eab2:	6923      	ldr	r3, [r4, #16]
 800eab4:	6861      	ldr	r1, [r4, #4]
 800eab6:	4299      	cmp	r1, r3
 800eab8:	bfde      	ittt	le
 800eaba:	2330      	movle	r3, #48	; 0x30
 800eabc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eac0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800eac4:	1b92      	subs	r2, r2, r6
 800eac6:	6122      	str	r2, [r4, #16]
 800eac8:	f8cd a000 	str.w	sl, [sp]
 800eacc:	464b      	mov	r3, r9
 800eace:	aa03      	add	r2, sp, #12
 800ead0:	4621      	mov	r1, r4
 800ead2:	4640      	mov	r0, r8
 800ead4:	f7ff fee2 	bl	800e89c <_printf_common>
 800ead8:	3001      	adds	r0, #1
 800eada:	d14c      	bne.n	800eb76 <_printf_i+0x1fe>
 800eadc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eae0:	b004      	add	sp, #16
 800eae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae6:	4835      	ldr	r0, [pc, #212]	; (800ebbc <_printf_i+0x244>)
 800eae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eaec:	6823      	ldr	r3, [r4, #0]
 800eaee:	680e      	ldr	r6, [r1, #0]
 800eaf0:	061f      	lsls	r7, r3, #24
 800eaf2:	f856 5b04 	ldr.w	r5, [r6], #4
 800eaf6:	600e      	str	r6, [r1, #0]
 800eaf8:	d514      	bpl.n	800eb24 <_printf_i+0x1ac>
 800eafa:	07d9      	lsls	r1, r3, #31
 800eafc:	bf44      	itt	mi
 800eafe:	f043 0320 	orrmi.w	r3, r3, #32
 800eb02:	6023      	strmi	r3, [r4, #0]
 800eb04:	b91d      	cbnz	r5, 800eb0e <_printf_i+0x196>
 800eb06:	6823      	ldr	r3, [r4, #0]
 800eb08:	f023 0320 	bic.w	r3, r3, #32
 800eb0c:	6023      	str	r3, [r4, #0]
 800eb0e:	2310      	movs	r3, #16
 800eb10:	e7b0      	b.n	800ea74 <_printf_i+0xfc>
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	f043 0320 	orr.w	r3, r3, #32
 800eb18:	6023      	str	r3, [r4, #0]
 800eb1a:	2378      	movs	r3, #120	; 0x78
 800eb1c:	4828      	ldr	r0, [pc, #160]	; (800ebc0 <_printf_i+0x248>)
 800eb1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb22:	e7e3      	b.n	800eaec <_printf_i+0x174>
 800eb24:	065e      	lsls	r6, r3, #25
 800eb26:	bf48      	it	mi
 800eb28:	b2ad      	uxthmi	r5, r5
 800eb2a:	e7e6      	b.n	800eafa <_printf_i+0x182>
 800eb2c:	4616      	mov	r6, r2
 800eb2e:	e7bb      	b.n	800eaa8 <_printf_i+0x130>
 800eb30:	680b      	ldr	r3, [r1, #0]
 800eb32:	6826      	ldr	r6, [r4, #0]
 800eb34:	6960      	ldr	r0, [r4, #20]
 800eb36:	1d1d      	adds	r5, r3, #4
 800eb38:	600d      	str	r5, [r1, #0]
 800eb3a:	0635      	lsls	r5, r6, #24
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	d501      	bpl.n	800eb44 <_printf_i+0x1cc>
 800eb40:	6018      	str	r0, [r3, #0]
 800eb42:	e002      	b.n	800eb4a <_printf_i+0x1d2>
 800eb44:	0671      	lsls	r1, r6, #25
 800eb46:	d5fb      	bpl.n	800eb40 <_printf_i+0x1c8>
 800eb48:	8018      	strh	r0, [r3, #0]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	6123      	str	r3, [r4, #16]
 800eb4e:	4616      	mov	r6, r2
 800eb50:	e7ba      	b.n	800eac8 <_printf_i+0x150>
 800eb52:	680b      	ldr	r3, [r1, #0]
 800eb54:	1d1a      	adds	r2, r3, #4
 800eb56:	600a      	str	r2, [r1, #0]
 800eb58:	681e      	ldr	r6, [r3, #0]
 800eb5a:	6862      	ldr	r2, [r4, #4]
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	4630      	mov	r0, r6
 800eb60:	f7f1 fbc6 	bl	80002f0 <memchr>
 800eb64:	b108      	cbz	r0, 800eb6a <_printf_i+0x1f2>
 800eb66:	1b80      	subs	r0, r0, r6
 800eb68:	6060      	str	r0, [r4, #4]
 800eb6a:	6863      	ldr	r3, [r4, #4]
 800eb6c:	6123      	str	r3, [r4, #16]
 800eb6e:	2300      	movs	r3, #0
 800eb70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb74:	e7a8      	b.n	800eac8 <_printf_i+0x150>
 800eb76:	6923      	ldr	r3, [r4, #16]
 800eb78:	4632      	mov	r2, r6
 800eb7a:	4649      	mov	r1, r9
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	47d0      	blx	sl
 800eb80:	3001      	adds	r0, #1
 800eb82:	d0ab      	beq.n	800eadc <_printf_i+0x164>
 800eb84:	6823      	ldr	r3, [r4, #0]
 800eb86:	079b      	lsls	r3, r3, #30
 800eb88:	d413      	bmi.n	800ebb2 <_printf_i+0x23a>
 800eb8a:	68e0      	ldr	r0, [r4, #12]
 800eb8c:	9b03      	ldr	r3, [sp, #12]
 800eb8e:	4298      	cmp	r0, r3
 800eb90:	bfb8      	it	lt
 800eb92:	4618      	movlt	r0, r3
 800eb94:	e7a4      	b.n	800eae0 <_printf_i+0x168>
 800eb96:	2301      	movs	r3, #1
 800eb98:	4632      	mov	r2, r6
 800eb9a:	4649      	mov	r1, r9
 800eb9c:	4640      	mov	r0, r8
 800eb9e:	47d0      	blx	sl
 800eba0:	3001      	adds	r0, #1
 800eba2:	d09b      	beq.n	800eadc <_printf_i+0x164>
 800eba4:	3501      	adds	r5, #1
 800eba6:	68e3      	ldr	r3, [r4, #12]
 800eba8:	9903      	ldr	r1, [sp, #12]
 800ebaa:	1a5b      	subs	r3, r3, r1
 800ebac:	42ab      	cmp	r3, r5
 800ebae:	dcf2      	bgt.n	800eb96 <_printf_i+0x21e>
 800ebb0:	e7eb      	b.n	800eb8a <_printf_i+0x212>
 800ebb2:	2500      	movs	r5, #0
 800ebb4:	f104 0619 	add.w	r6, r4, #25
 800ebb8:	e7f5      	b.n	800eba6 <_printf_i+0x22e>
 800ebba:	bf00      	nop
 800ebbc:	080245c5 	.word	0x080245c5
 800ebc0:	080245d6 	.word	0x080245d6

0800ebc4 <memmove>:
 800ebc4:	4288      	cmp	r0, r1
 800ebc6:	b510      	push	{r4, lr}
 800ebc8:	eb01 0402 	add.w	r4, r1, r2
 800ebcc:	d902      	bls.n	800ebd4 <memmove+0x10>
 800ebce:	4284      	cmp	r4, r0
 800ebd0:	4623      	mov	r3, r4
 800ebd2:	d807      	bhi.n	800ebe4 <memmove+0x20>
 800ebd4:	1e43      	subs	r3, r0, #1
 800ebd6:	42a1      	cmp	r1, r4
 800ebd8:	d008      	beq.n	800ebec <memmove+0x28>
 800ebda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebe2:	e7f8      	b.n	800ebd6 <memmove+0x12>
 800ebe4:	4402      	add	r2, r0
 800ebe6:	4601      	mov	r1, r0
 800ebe8:	428a      	cmp	r2, r1
 800ebea:	d100      	bne.n	800ebee <memmove+0x2a>
 800ebec:	bd10      	pop	{r4, pc}
 800ebee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebf6:	e7f7      	b.n	800ebe8 <memmove+0x24>

0800ebf8 <_free_r>:
 800ebf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebfa:	2900      	cmp	r1, #0
 800ebfc:	d048      	beq.n	800ec90 <_free_r+0x98>
 800ebfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec02:	9001      	str	r0, [sp, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f1a1 0404 	sub.w	r4, r1, #4
 800ec0a:	bfb8      	it	lt
 800ec0c:	18e4      	addlt	r4, r4, r3
 800ec0e:	f000 f8d3 	bl	800edb8 <__malloc_lock>
 800ec12:	4a20      	ldr	r2, [pc, #128]	; (800ec94 <_free_r+0x9c>)
 800ec14:	9801      	ldr	r0, [sp, #4]
 800ec16:	6813      	ldr	r3, [r2, #0]
 800ec18:	4615      	mov	r5, r2
 800ec1a:	b933      	cbnz	r3, 800ec2a <_free_r+0x32>
 800ec1c:	6063      	str	r3, [r4, #4]
 800ec1e:	6014      	str	r4, [r2, #0]
 800ec20:	b003      	add	sp, #12
 800ec22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec26:	f000 b8cd 	b.w	800edc4 <__malloc_unlock>
 800ec2a:	42a3      	cmp	r3, r4
 800ec2c:	d90b      	bls.n	800ec46 <_free_r+0x4e>
 800ec2e:	6821      	ldr	r1, [r4, #0]
 800ec30:	1862      	adds	r2, r4, r1
 800ec32:	4293      	cmp	r3, r2
 800ec34:	bf04      	itt	eq
 800ec36:	681a      	ldreq	r2, [r3, #0]
 800ec38:	685b      	ldreq	r3, [r3, #4]
 800ec3a:	6063      	str	r3, [r4, #4]
 800ec3c:	bf04      	itt	eq
 800ec3e:	1852      	addeq	r2, r2, r1
 800ec40:	6022      	streq	r2, [r4, #0]
 800ec42:	602c      	str	r4, [r5, #0]
 800ec44:	e7ec      	b.n	800ec20 <_free_r+0x28>
 800ec46:	461a      	mov	r2, r3
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	b10b      	cbz	r3, 800ec50 <_free_r+0x58>
 800ec4c:	42a3      	cmp	r3, r4
 800ec4e:	d9fa      	bls.n	800ec46 <_free_r+0x4e>
 800ec50:	6811      	ldr	r1, [r2, #0]
 800ec52:	1855      	adds	r5, r2, r1
 800ec54:	42a5      	cmp	r5, r4
 800ec56:	d10b      	bne.n	800ec70 <_free_r+0x78>
 800ec58:	6824      	ldr	r4, [r4, #0]
 800ec5a:	4421      	add	r1, r4
 800ec5c:	1854      	adds	r4, r2, r1
 800ec5e:	42a3      	cmp	r3, r4
 800ec60:	6011      	str	r1, [r2, #0]
 800ec62:	d1dd      	bne.n	800ec20 <_free_r+0x28>
 800ec64:	681c      	ldr	r4, [r3, #0]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	6053      	str	r3, [r2, #4]
 800ec6a:	4421      	add	r1, r4
 800ec6c:	6011      	str	r1, [r2, #0]
 800ec6e:	e7d7      	b.n	800ec20 <_free_r+0x28>
 800ec70:	d902      	bls.n	800ec78 <_free_r+0x80>
 800ec72:	230c      	movs	r3, #12
 800ec74:	6003      	str	r3, [r0, #0]
 800ec76:	e7d3      	b.n	800ec20 <_free_r+0x28>
 800ec78:	6825      	ldr	r5, [r4, #0]
 800ec7a:	1961      	adds	r1, r4, r5
 800ec7c:	428b      	cmp	r3, r1
 800ec7e:	bf04      	itt	eq
 800ec80:	6819      	ldreq	r1, [r3, #0]
 800ec82:	685b      	ldreq	r3, [r3, #4]
 800ec84:	6063      	str	r3, [r4, #4]
 800ec86:	bf04      	itt	eq
 800ec88:	1949      	addeq	r1, r1, r5
 800ec8a:	6021      	streq	r1, [r4, #0]
 800ec8c:	6054      	str	r4, [r2, #4]
 800ec8e:	e7c7      	b.n	800ec20 <_free_r+0x28>
 800ec90:	b003      	add	sp, #12
 800ec92:	bd30      	pop	{r4, r5, pc}
 800ec94:	24000174 	.word	0x24000174

0800ec98 <_malloc_r>:
 800ec98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9a:	1ccd      	adds	r5, r1, #3
 800ec9c:	f025 0503 	bic.w	r5, r5, #3
 800eca0:	3508      	adds	r5, #8
 800eca2:	2d0c      	cmp	r5, #12
 800eca4:	bf38      	it	cc
 800eca6:	250c      	movcc	r5, #12
 800eca8:	2d00      	cmp	r5, #0
 800ecaa:	4606      	mov	r6, r0
 800ecac:	db01      	blt.n	800ecb2 <_malloc_r+0x1a>
 800ecae:	42a9      	cmp	r1, r5
 800ecb0:	d903      	bls.n	800ecba <_malloc_r+0x22>
 800ecb2:	230c      	movs	r3, #12
 800ecb4:	6033      	str	r3, [r6, #0]
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecba:	f000 f87d 	bl	800edb8 <__malloc_lock>
 800ecbe:	4921      	ldr	r1, [pc, #132]	; (800ed44 <_malloc_r+0xac>)
 800ecc0:	680a      	ldr	r2, [r1, #0]
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	b99c      	cbnz	r4, 800ecee <_malloc_r+0x56>
 800ecc6:	4f20      	ldr	r7, [pc, #128]	; (800ed48 <_malloc_r+0xb0>)
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	b923      	cbnz	r3, 800ecd6 <_malloc_r+0x3e>
 800eccc:	4621      	mov	r1, r4
 800ecce:	4630      	mov	r0, r6
 800ecd0:	f000 f862 	bl	800ed98 <_sbrk_r>
 800ecd4:	6038      	str	r0, [r7, #0]
 800ecd6:	4629      	mov	r1, r5
 800ecd8:	4630      	mov	r0, r6
 800ecda:	f000 f85d 	bl	800ed98 <_sbrk_r>
 800ecde:	1c43      	adds	r3, r0, #1
 800ece0:	d123      	bne.n	800ed2a <_malloc_r+0x92>
 800ece2:	230c      	movs	r3, #12
 800ece4:	6033      	str	r3, [r6, #0]
 800ece6:	4630      	mov	r0, r6
 800ece8:	f000 f86c 	bl	800edc4 <__malloc_unlock>
 800ecec:	e7e3      	b.n	800ecb6 <_malloc_r+0x1e>
 800ecee:	6823      	ldr	r3, [r4, #0]
 800ecf0:	1b5b      	subs	r3, r3, r5
 800ecf2:	d417      	bmi.n	800ed24 <_malloc_r+0x8c>
 800ecf4:	2b0b      	cmp	r3, #11
 800ecf6:	d903      	bls.n	800ed00 <_malloc_r+0x68>
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	441c      	add	r4, r3
 800ecfc:	6025      	str	r5, [r4, #0]
 800ecfe:	e004      	b.n	800ed0a <_malloc_r+0x72>
 800ed00:	6863      	ldr	r3, [r4, #4]
 800ed02:	42a2      	cmp	r2, r4
 800ed04:	bf0c      	ite	eq
 800ed06:	600b      	streq	r3, [r1, #0]
 800ed08:	6053      	strne	r3, [r2, #4]
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	f000 f85a 	bl	800edc4 <__malloc_unlock>
 800ed10:	f104 000b 	add.w	r0, r4, #11
 800ed14:	1d23      	adds	r3, r4, #4
 800ed16:	f020 0007 	bic.w	r0, r0, #7
 800ed1a:	1ac2      	subs	r2, r0, r3
 800ed1c:	d0cc      	beq.n	800ecb8 <_malloc_r+0x20>
 800ed1e:	1a1b      	subs	r3, r3, r0
 800ed20:	50a3      	str	r3, [r4, r2]
 800ed22:	e7c9      	b.n	800ecb8 <_malloc_r+0x20>
 800ed24:	4622      	mov	r2, r4
 800ed26:	6864      	ldr	r4, [r4, #4]
 800ed28:	e7cc      	b.n	800ecc4 <_malloc_r+0x2c>
 800ed2a:	1cc4      	adds	r4, r0, #3
 800ed2c:	f024 0403 	bic.w	r4, r4, #3
 800ed30:	42a0      	cmp	r0, r4
 800ed32:	d0e3      	beq.n	800ecfc <_malloc_r+0x64>
 800ed34:	1a21      	subs	r1, r4, r0
 800ed36:	4630      	mov	r0, r6
 800ed38:	f000 f82e 	bl	800ed98 <_sbrk_r>
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	d1dd      	bne.n	800ecfc <_malloc_r+0x64>
 800ed40:	e7cf      	b.n	800ece2 <_malloc_r+0x4a>
 800ed42:	bf00      	nop
 800ed44:	24000174 	.word	0x24000174
 800ed48:	24000178 	.word	0x24000178

0800ed4c <_realloc_r>:
 800ed4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4e:	4607      	mov	r7, r0
 800ed50:	4614      	mov	r4, r2
 800ed52:	460e      	mov	r6, r1
 800ed54:	b921      	cbnz	r1, 800ed60 <_realloc_r+0x14>
 800ed56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	f7ff bf9c 	b.w	800ec98 <_malloc_r>
 800ed60:	b922      	cbnz	r2, 800ed6c <_realloc_r+0x20>
 800ed62:	f7ff ff49 	bl	800ebf8 <_free_r>
 800ed66:	4625      	mov	r5, r4
 800ed68:	4628      	mov	r0, r5
 800ed6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed6c:	f000 f830 	bl	800edd0 <_malloc_usable_size_r>
 800ed70:	42a0      	cmp	r0, r4
 800ed72:	d20f      	bcs.n	800ed94 <_realloc_r+0x48>
 800ed74:	4621      	mov	r1, r4
 800ed76:	4638      	mov	r0, r7
 800ed78:	f7ff ff8e 	bl	800ec98 <_malloc_r>
 800ed7c:	4605      	mov	r5, r0
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d0f2      	beq.n	800ed68 <_realloc_r+0x1c>
 800ed82:	4631      	mov	r1, r6
 800ed84:	4622      	mov	r2, r4
 800ed86:	f7ff fbf7 	bl	800e578 <memcpy>
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4638      	mov	r0, r7
 800ed8e:	f7ff ff33 	bl	800ebf8 <_free_r>
 800ed92:	e7e9      	b.n	800ed68 <_realloc_r+0x1c>
 800ed94:	4635      	mov	r5, r6
 800ed96:	e7e7      	b.n	800ed68 <_realloc_r+0x1c>

0800ed98 <_sbrk_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	4d06      	ldr	r5, [pc, #24]	; (800edb4 <_sbrk_r+0x1c>)
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4608      	mov	r0, r1
 800eda2:	602b      	str	r3, [r5, #0]
 800eda4:	f7f2 fb78 	bl	8001498 <_sbrk>
 800eda8:	1c43      	adds	r3, r0, #1
 800edaa:	d102      	bne.n	800edb2 <_sbrk_r+0x1a>
 800edac:	682b      	ldr	r3, [r5, #0]
 800edae:	b103      	cbz	r3, 800edb2 <_sbrk_r+0x1a>
 800edb0:	6023      	str	r3, [r4, #0]
 800edb2:	bd38      	pop	{r3, r4, r5, pc}
 800edb4:	24001334 	.word	0x24001334

0800edb8 <__malloc_lock>:
 800edb8:	4801      	ldr	r0, [pc, #4]	; (800edc0 <__malloc_lock+0x8>)
 800edba:	f000 b811 	b.w	800ede0 <__retarget_lock_acquire_recursive>
 800edbe:	bf00      	nop
 800edc0:	2400133c 	.word	0x2400133c

0800edc4 <__malloc_unlock>:
 800edc4:	4801      	ldr	r0, [pc, #4]	; (800edcc <__malloc_unlock+0x8>)
 800edc6:	f000 b80c 	b.w	800ede2 <__retarget_lock_release_recursive>
 800edca:	bf00      	nop
 800edcc:	2400133c 	.word	0x2400133c

0800edd0 <_malloc_usable_size_r>:
 800edd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edd4:	1f18      	subs	r0, r3, #4
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	bfbc      	itt	lt
 800edda:	580b      	ldrlt	r3, [r1, r0]
 800eddc:	18c0      	addlt	r0, r0, r3
 800edde:	4770      	bx	lr

0800ede0 <__retarget_lock_acquire_recursive>:
 800ede0:	4770      	bx	lr

0800ede2 <__retarget_lock_release_recursive>:
 800ede2:	4770      	bx	lr

0800ede4 <_init>:
 800ede4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede6:	bf00      	nop
 800ede8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edea:	bc08      	pop	{r3}
 800edec:	469e      	mov	lr, r3
 800edee:	4770      	bx	lr

0800edf0 <_fini>:
 800edf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf2:	bf00      	nop
 800edf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edf6:	bc08      	pop	{r3}
 800edf8:	469e      	mov	lr, r3
 800edfa:	4770      	bx	lr
